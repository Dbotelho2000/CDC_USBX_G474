
CDC_USBX_G474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbdc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800fdbc  0800fdbc  0001fdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff84  0800ff84  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff84  0800ff84  0001ff84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff8c  0800ff8c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff8c  0800ff8c  0001ff8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff90  0800ff90  0001ff90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ff94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004348  2000006c  08010000  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043b4  08010000  000243b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005cb8b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dd3a  00000000  00000000  0007cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022c8  00000000  00000000  0008a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001836  00000000  00000000  0008cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039da7  00000000  00000000  0008e4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00051ed4  00000000  00000000  000c824d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113b41  00000000  00000000  0011a121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a38  00000000  00000000  0022dc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000103  00000000  00000000  0023469c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fda4 	.word	0x0800fda4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800fda4 	.word	0x0800fda4

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	; (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	; (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	200034f8 	.word	0x200034f8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	; (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	; (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	; (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20003594 	.word	0x20003594
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	200034fc 	.word	0x200034fc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20003500 	.word	0x20003500
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20003b00 	.word	0x20003b00

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	; (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	; (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f009 ff95 	bl	800a328 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f009 ff02 	bl	800a20c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	200035a0 	.word	0x200035a0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20003b00 	.word	0x20003b00
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	200035a4 	.word	0x200035a4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20003630 	.word	0x20003630
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20003634 	.word	0x20003634
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	2000362c 	.word	0x2000362c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20003628 	.word	0x20003628
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20003594 	.word	0x20003594
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	200034fc 	.word	0x200034fc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20003500 	.word	0x20003500
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <strlen>:
 8000458:	4603      	mov	r3, r0
 800045a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800045e:	2a00      	cmp	r2, #0
 8000460:	d1fb      	bne.n	800045a <strlen+0x2>
 8000462:	1a18      	subs	r0, r3, r0
 8000464:	3801      	subs	r0, #1
 8000466:	4770      	bx	lr

08000468 <__aeabi_uldivmod>:
 8000468:	b953      	cbnz	r3, 8000480 <__aeabi_uldivmod+0x18>
 800046a:	b94a      	cbnz	r2, 8000480 <__aeabi_uldivmod+0x18>
 800046c:	2900      	cmp	r1, #0
 800046e:	bf08      	it	eq
 8000470:	2800      	cmpeq	r0, #0
 8000472:	bf1c      	itt	ne
 8000474:	f04f 31ff 	movne.w	r1, #4294967295
 8000478:	f04f 30ff 	movne.w	r0, #4294967295
 800047c:	f000 b970 	b.w	8000760 <__aeabi_idiv0>
 8000480:	f1ad 0c08 	sub.w	ip, sp, #8
 8000484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000488:	f000 f806 	bl	8000498 <__udivmoddi4>
 800048c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr

08000498 <__udivmoddi4>:
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	9e08      	ldr	r6, [sp, #32]
 800049e:	460d      	mov	r5, r1
 80004a0:	4604      	mov	r4, r0
 80004a2:	460f      	mov	r7, r1
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d14a      	bne.n	800053e <__udivmoddi4+0xa6>
 80004a8:	428a      	cmp	r2, r1
 80004aa:	4694      	mov	ip, r2
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0xe2>
 80004ae:	fab2 f382 	clz	r3, r2
 80004b2:	b143      	cbz	r3, 80004c6 <__udivmoddi4+0x2e>
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	f1c3 0220 	rsb	r2, r3, #32
 80004bc:	409f      	lsls	r7, r3
 80004be:	fa20 f202 	lsr.w	r2, r0, r2
 80004c2:	4317      	orrs	r7, r2
 80004c4:	409c      	lsls	r4, r3
 80004c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ca:	fa1f f58c 	uxth.w	r5, ip
 80004ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80004d2:	0c22      	lsrs	r2, r4, #16
 80004d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80004d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004dc:	fb01 f005 	mul.w	r0, r1, r5
 80004e0:	4290      	cmp	r0, r2
 80004e2:	d90a      	bls.n	80004fa <__udivmoddi4+0x62>
 80004e4:	eb1c 0202 	adds.w	r2, ip, r2
 80004e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80004ec:	f080 811c 	bcs.w	8000728 <__udivmoddi4+0x290>
 80004f0:	4290      	cmp	r0, r2
 80004f2:	f240 8119 	bls.w	8000728 <__udivmoddi4+0x290>
 80004f6:	3902      	subs	r1, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a12      	subs	r2, r2, r0
 80004fc:	b2a4      	uxth	r4, r4
 80004fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000502:	fb0e 2210 	mls	r2, lr, r0, r2
 8000506:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800050a:	fb00 f505 	mul.w	r5, r0, r5
 800050e:	42a5      	cmp	r5, r4
 8000510:	d90a      	bls.n	8000528 <__udivmoddi4+0x90>
 8000512:	eb1c 0404 	adds.w	r4, ip, r4
 8000516:	f100 32ff 	add.w	r2, r0, #4294967295
 800051a:	f080 8107 	bcs.w	800072c <__udivmoddi4+0x294>
 800051e:	42a5      	cmp	r5, r4
 8000520:	f240 8104 	bls.w	800072c <__udivmoddi4+0x294>
 8000524:	4464      	add	r4, ip
 8000526:	3802      	subs	r0, #2
 8000528:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800052c:	1b64      	subs	r4, r4, r5
 800052e:	2100      	movs	r1, #0
 8000530:	b11e      	cbz	r6, 800053a <__udivmoddi4+0xa2>
 8000532:	40dc      	lsrs	r4, r3
 8000534:	2300      	movs	r3, #0
 8000536:	e9c6 4300 	strd	r4, r3, [r6]
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	428b      	cmp	r3, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0xbc>
 8000542:	2e00      	cmp	r6, #0
 8000544:	f000 80ed 	beq.w	8000722 <__udivmoddi4+0x28a>
 8000548:	2100      	movs	r1, #0
 800054a:	e9c6 0500 	strd	r0, r5, [r6]
 800054e:	4608      	mov	r0, r1
 8000550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000554:	fab3 f183 	clz	r1, r3
 8000558:	2900      	cmp	r1, #0
 800055a:	d149      	bne.n	80005f0 <__udivmoddi4+0x158>
 800055c:	42ab      	cmp	r3, r5
 800055e:	d302      	bcc.n	8000566 <__udivmoddi4+0xce>
 8000560:	4282      	cmp	r2, r0
 8000562:	f200 80f8 	bhi.w	8000756 <__udivmoddi4+0x2be>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	2e00      	cmp	r6, #0
 8000572:	d0e2      	beq.n	800053a <__udivmoddi4+0xa2>
 8000574:	e9c6 4700 	strd	r4, r7, [r6]
 8000578:	e7df      	b.n	800053a <__udivmoddi4+0xa2>
 800057a:	b902      	cbnz	r2, 800057e <__udivmoddi4+0xe6>
 800057c:	deff      	udf	#255	; 0xff
 800057e:	fab2 f382 	clz	r3, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	f040 8090 	bne.w	80006a8 <__udivmoddi4+0x210>
 8000588:	1a8a      	subs	r2, r1, r2
 800058a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800058e:	fa1f fe8c 	uxth.w	lr, ip
 8000592:	2101      	movs	r1, #1
 8000594:	fbb2 f5f7 	udiv	r5, r2, r7
 8000598:	fb07 2015 	mls	r0, r7, r5, r2
 800059c:	0c22      	lsrs	r2, r4, #16
 800059e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005a2:	fb0e f005 	mul.w	r0, lr, r5
 80005a6:	4290      	cmp	r0, r2
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x124>
 80005aa:	eb1c 0202 	adds.w	r2, ip, r2
 80005ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b2:	d202      	bcs.n	80005ba <__udivmoddi4+0x122>
 80005b4:	4290      	cmp	r0, r2
 80005b6:	f200 80cb 	bhi.w	8000750 <__udivmoddi4+0x2b8>
 80005ba:	4645      	mov	r5, r8
 80005bc:	1a12      	subs	r2, r2, r0
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80005c4:	fb07 2210 	mls	r2, r7, r0, r2
 80005c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005cc:	fb0e fe00 	mul.w	lr, lr, r0
 80005d0:	45a6      	cmp	lr, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x14e>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80005dc:	d202      	bcs.n	80005e4 <__udivmoddi4+0x14c>
 80005de:	45a6      	cmp	lr, r4
 80005e0:	f200 80bb 	bhi.w	800075a <__udivmoddi4+0x2c2>
 80005e4:	4610      	mov	r0, r2
 80005e6:	eba4 040e 	sub.w	r4, r4, lr
 80005ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005ee:	e79f      	b.n	8000530 <__udivmoddi4+0x98>
 80005f0:	f1c1 0720 	rsb	r7, r1, #32
 80005f4:	408b      	lsls	r3, r1
 80005f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80005fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000602:	fa20 f307 	lsr.w	r3, r0, r7
 8000606:	40fd      	lsrs	r5, r7
 8000608:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800060c:	4323      	orrs	r3, r4
 800060e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000612:	fa1f fe8c 	uxth.w	lr, ip
 8000616:	fb09 5518 	mls	r5, r9, r8, r5
 800061a:	0c1c      	lsrs	r4, r3, #16
 800061c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000620:	fb08 f50e 	mul.w	r5, r8, lr
 8000624:	42a5      	cmp	r5, r4
 8000626:	fa02 f201 	lsl.w	r2, r2, r1
 800062a:	fa00 f001 	lsl.w	r0, r0, r1
 800062e:	d90b      	bls.n	8000648 <__udivmoddi4+0x1b0>
 8000630:	eb1c 0404 	adds.w	r4, ip, r4
 8000634:	f108 3aff 	add.w	sl, r8, #4294967295
 8000638:	f080 8088 	bcs.w	800074c <__udivmoddi4+0x2b4>
 800063c:	42a5      	cmp	r5, r4
 800063e:	f240 8085 	bls.w	800074c <__udivmoddi4+0x2b4>
 8000642:	f1a8 0802 	sub.w	r8, r8, #2
 8000646:	4464      	add	r4, ip
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	b29d      	uxth	r5, r3
 800064c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000650:	fb09 4413 	mls	r4, r9, r3, r4
 8000654:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000658:	fb03 fe0e 	mul.w	lr, r3, lr
 800065c:	45a6      	cmp	lr, r4
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x1da>
 8000660:	eb1c 0404 	adds.w	r4, ip, r4
 8000664:	f103 35ff 	add.w	r5, r3, #4294967295
 8000668:	d26c      	bcs.n	8000744 <__udivmoddi4+0x2ac>
 800066a:	45a6      	cmp	lr, r4
 800066c:	d96a      	bls.n	8000744 <__udivmoddi4+0x2ac>
 800066e:	3b02      	subs	r3, #2
 8000670:	4464      	add	r4, ip
 8000672:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000676:	fba3 9502 	umull	r9, r5, r3, r2
 800067a:	eba4 040e 	sub.w	r4, r4, lr
 800067e:	42ac      	cmp	r4, r5
 8000680:	46c8      	mov	r8, r9
 8000682:	46ae      	mov	lr, r5
 8000684:	d356      	bcc.n	8000734 <__udivmoddi4+0x29c>
 8000686:	d053      	beq.n	8000730 <__udivmoddi4+0x298>
 8000688:	b156      	cbz	r6, 80006a0 <__udivmoddi4+0x208>
 800068a:	ebb0 0208 	subs.w	r2, r0, r8
 800068e:	eb64 040e 	sbc.w	r4, r4, lr
 8000692:	fa04 f707 	lsl.w	r7, r4, r7
 8000696:	40ca      	lsrs	r2, r1
 8000698:	40cc      	lsrs	r4, r1
 800069a:	4317      	orrs	r7, r2
 800069c:	e9c6 7400 	strd	r7, r4, [r6]
 80006a0:	4618      	mov	r0, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a8:	f1c3 0120 	rsb	r1, r3, #32
 80006ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b0:	fa20 f201 	lsr.w	r2, r0, r1
 80006b4:	fa25 f101 	lsr.w	r1, r5, r1
 80006b8:	409d      	lsls	r5, r3
 80006ba:	432a      	orrs	r2, r5
 80006bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c0:	fa1f fe8c 	uxth.w	lr, ip
 80006c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c8:	fb07 1510 	mls	r5, r7, r0, r1
 80006cc:	0c11      	lsrs	r1, r2, #16
 80006ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006d2:	fb00 f50e 	mul.w	r5, r0, lr
 80006d6:	428d      	cmp	r5, r1
 80006d8:	fa04 f403 	lsl.w	r4, r4, r3
 80006dc:	d908      	bls.n	80006f0 <__udivmoddi4+0x258>
 80006de:	eb1c 0101 	adds.w	r1, ip, r1
 80006e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006e6:	d22f      	bcs.n	8000748 <__udivmoddi4+0x2b0>
 80006e8:	428d      	cmp	r5, r1
 80006ea:	d92d      	bls.n	8000748 <__udivmoddi4+0x2b0>
 80006ec:	3802      	subs	r0, #2
 80006ee:	4461      	add	r1, ip
 80006f0:	1b49      	subs	r1, r1, r5
 80006f2:	b292      	uxth	r2, r2
 80006f4:	fbb1 f5f7 	udiv	r5, r1, r7
 80006f8:	fb07 1115 	mls	r1, r7, r5, r1
 80006fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000700:	fb05 f10e 	mul.w	r1, r5, lr
 8000704:	4291      	cmp	r1, r2
 8000706:	d908      	bls.n	800071a <__udivmoddi4+0x282>
 8000708:	eb1c 0202 	adds.w	r2, ip, r2
 800070c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000710:	d216      	bcs.n	8000740 <__udivmoddi4+0x2a8>
 8000712:	4291      	cmp	r1, r2
 8000714:	d914      	bls.n	8000740 <__udivmoddi4+0x2a8>
 8000716:	3d02      	subs	r5, #2
 8000718:	4462      	add	r2, ip
 800071a:	1a52      	subs	r2, r2, r1
 800071c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000720:	e738      	b.n	8000594 <__udivmoddi4+0xfc>
 8000722:	4631      	mov	r1, r6
 8000724:	4630      	mov	r0, r6
 8000726:	e708      	b.n	800053a <__udivmoddi4+0xa2>
 8000728:	4639      	mov	r1, r7
 800072a:	e6e6      	b.n	80004fa <__udivmoddi4+0x62>
 800072c:	4610      	mov	r0, r2
 800072e:	e6fb      	b.n	8000528 <__udivmoddi4+0x90>
 8000730:	4548      	cmp	r0, r9
 8000732:	d2a9      	bcs.n	8000688 <__udivmoddi4+0x1f0>
 8000734:	ebb9 0802 	subs.w	r8, r9, r2
 8000738:	eb65 0e0c 	sbc.w	lr, r5, ip
 800073c:	3b01      	subs	r3, #1
 800073e:	e7a3      	b.n	8000688 <__udivmoddi4+0x1f0>
 8000740:	4645      	mov	r5, r8
 8000742:	e7ea      	b.n	800071a <__udivmoddi4+0x282>
 8000744:	462b      	mov	r3, r5
 8000746:	e794      	b.n	8000672 <__udivmoddi4+0x1da>
 8000748:	4640      	mov	r0, r8
 800074a:	e7d1      	b.n	80006f0 <__udivmoddi4+0x258>
 800074c:	46d0      	mov	r8, sl
 800074e:	e77b      	b.n	8000648 <__udivmoddi4+0x1b0>
 8000750:	3d02      	subs	r5, #2
 8000752:	4462      	add	r2, ip
 8000754:	e732      	b.n	80005bc <__udivmoddi4+0x124>
 8000756:	4608      	mov	r0, r1
 8000758:	e70a      	b.n	8000570 <__udivmoddi4+0xd8>
 800075a:	4464      	add	r4, ip
 800075c:	3802      	subs	r0, #2
 800075e:	e742      	b.n	80005e6 <__udivmoddi4+0x14e>

08000760 <__aeabi_idiv0>:
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000770:	2334      	movs	r3, #52	; 0x34
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <tx_application_define+0x6c>)
 800077a:	4916      	ldr	r1, [pc, #88]	; (80007d4 <tx_application_define+0x70>)
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <tx_application_define+0x74>)
 800077e:	f00a f87d 	bl	800a87c <_txe_byte_pool_create>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d109      	bne.n	800079c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <tx_application_define+0x74>)
 800078a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f000 f82b 	bl	80007e8 <App_ThreadX_Init>
 8000792:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800079a:	e7fe      	b.n	800079a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800079c:	2334      	movs	r3, #52	; 0x34
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <tx_application_define+0x78>)
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <tx_application_define+0x7c>)
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <tx_application_define+0x80>)
 80007aa:	f00a f867 	bl	800a87c <_txe_byte_pool_create>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d109      	bne.n	80007c8 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <tx_application_define+0x80>)
 80007b6:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Device_Init(memory_ptr);
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f00e fa4b 	bl	800ec54 <MX_USBX_Device_Init>
 80007be:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d000      	beq.n	80007c8 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 80007c6:	e7fe      	b.n	80007c6 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000088 	.word	0x20000088
 80007d4:	0800fdbc 	.word	0x0800fdbc
 80007d8:	20000488 	.word	0x20000488
 80007dc:	200004bc 	.word	0x200004bc
 80007e0:	0800fdd0 	.word	0x0800fdd0
 80007e4:	200030bc 	.word	0x200030bc

080007e8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80007f4:	68fb      	ldr	r3, [r7, #12]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000806:	f007 fb7b 	bl	8007f00 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_GPIO_Init>:
     PC6   ------> S_TIM3_CH1
     PC8   ------> S_TIM3_CH3
     PA8   ------> S_TIM1_CH1
*/
void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <MX_GPIO_Init+0x194>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a5e      	ldr	r2, [pc, #376]	; (80009a4 <MX_GPIO_Init+0x194>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <MX_GPIO_Init+0x194>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <MX_GPIO_Init+0x194>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a58      	ldr	r2, [pc, #352]	; (80009a4 <MX_GPIO_Init+0x194>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <MX_GPIO_Init+0x194>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_GPIO_Init+0x194>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a52      	ldr	r2, [pc, #328]	; (80009a4 <MX_GPIO_Init+0x194>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <MX_GPIO_Init+0x194>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	21a2      	movs	r1, #162	; 0xa2
 8000872:	484d      	ldr	r0, [pc, #308]	; (80009a8 <MX_GPIO_Init+0x198>)
 8000874:	f000 fdc8 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f000 fdc1 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOYSTICK_SEL_Pin|JOYSTICK_DOWN_Pin;
 8000886:	f242 0320 	movw	r3, #8224	; 0x2020
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4843      	ldr	r0, [pc, #268]	; (80009ac <MX_GPIO_Init+0x19c>)
 800089e:	f000 fc31 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin;
 80008a2:	2310      	movs	r3, #16
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(JOYSTICK_LEFT_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	483d      	ldr	r0, [pc, #244]	; (80009ac <MX_GPIO_Init+0x19c>)
 80008b8:	f000 fc24 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 80008bc:	23a2      	movs	r3, #162	; 0xa2
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4835      	ldr	r0, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x198>)
 80008d4:	f000 fc16 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 80008d8:	f240 4304 	movw	r3, #1028	; 0x404
 80008dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	482e      	ldr	r0, [pc, #184]	; (80009a8 <MX_GPIO_Init+0x198>)
 80008f0:	f000 fc08 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|BUCK_GREEN_DRIVE_Pin;
 80008f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4826      	ldr	r0, [pc, #152]	; (80009ac <MX_GPIO_Init+0x19c>)
 8000912:	f000 fbf7 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8000916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000928:	2306      	movs	r3, #6
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fbe5 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 fbd5 	bl	8001104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2008      	movs	r0, #8
 8000960:	f000 fba8 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000964:	2008      	movs	r0, #8
 8000966:	f000 fbbf 	bl	80010e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	200a      	movs	r0, #10
 8000970:	f000 fba0 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000974:	200a      	movs	r0, #10
 8000976:	f000 fbb7 	bl	80010e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2017      	movs	r0, #23
 8000980:	f000 fb98 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000984:	2017      	movs	r0, #23
 8000986:	f000 fbaf 	bl	80010e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f000 fb90 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000994:	2028      	movs	r0, #40	; 0x28
 8000996:	f000 fba7 	bl	80010e8 <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000400 	.word	0x48000400
 80009ac:	48000800 	.word	0x48000800

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fa8f 	bl	8000ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f807 	bl	80009ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f7ff ff28 	bl	8000810 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009c0:	f000 f956 	bl	8000c70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009c4:	f7ff ff1d 	bl	8000802 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <main+0x18>

080009ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b094      	sub	sp, #80	; 0x50
 80009ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	2238      	movs	r2, #56	; 0x38
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f00f f9b7 	bl	800fd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 faa9 	bl	8002f44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80009f2:	2322      	movs	r3, #34	; 0x22
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a10:	2355      	movs	r3, #85	; 0x55
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fb31 	bl	800308c <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a30:	f000 f82a 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fe35 	bl	80036bc <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a58:	f000 f816 	bl	8000a88 <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3750      	adds	r7, #80	; 0x50
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 fa47 	bl	8000f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <HAL_InitTick+0xc4>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <HAL_InitTick+0xc4>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6593      	str	r3, [r2, #88]	; 0x58
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <HAL_InitTick+0xc4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b04:	f107 020c 	add.w	r2, r7, #12
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 ffaa 	bl	8003a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b14:	f002 ff7c 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8000b18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <HAL_InitTick+0xc8>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3b01      	subs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <HAL_InitTick+0xd0>)
 8000b2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b4a:	f003 fa53 	bl	8003ff4 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_InitTick+0xcc>)
 8000b5e:	f003 faab 	bl	80040b8 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b70:	2036      	movs	r0, #54	; 0x36
 8000b72:	f000 fab9 	bl	80010e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2036      	movs	r0, #54	; 0x36
 8000b82:	f000 fa97 	bl	80010b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_InitTick+0xd4>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	200030f0 	.word	0x200030f0
 8000bac:	40001000 	.word	0x40001000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f000 fc27 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 8000bf2:	2010      	movs	r0, #16
 8000bf4:	f000 fc20 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USB_LP_IRQHandler+0x10>)
 8000c02:	f000 fd5a 	bl	80016ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200031cc 	.word	0x200031cc

08000c10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 8000c14:	2020      	movs	r0, #32
 8000c16:	f000 fc0f 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 8000c22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c26:	f000 fc07 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_SEL_Pin);
 8000c2a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c2e:	f000 fc03 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f003 fab3 	bl	80041a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200030f0 	.word	0x200030f0

08000c4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <MX_USART3_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cba:	f003 fd0b 	bl	80046d4 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f7ff fee0 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f004 fa3c 	bl	8005148 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f7ff fed7 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cde:	f004 fa71 	bl	80051c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f7ff fece 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cee:	f004 f9f2 	bl	80050d6 <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f7ff fec6 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000313c 	.word	0x2000313c
 8000d04:	40004800 	.word	0x40004800

08000d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09e      	sub	sp, #120	; 0x78
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2254      	movs	r2, #84	; 0x54
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f00f f80f 	bl	800fd4c <memset>
  if(uartHandle->Instance==USART3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <HAL_UART_MspInit+0xa8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d136      	bne.n	8000da6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 ff07 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d50:	f7ff fe9a 	bl	8000a88 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8000d84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d92:	2301      	movs	r3, #1
 8000d94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d96:	2307      	movs	r3, #7
 8000d98:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0xb0>)
 8000da2:	f000 f9af 	bl	8001104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3778      	adds	r7, #120	; 0x78
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004800 	.word	0x40004800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000800 	.word	0x48000800

08000dbc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <MX_USB_PCD_Init+0x4c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000dc8:	2208      	movs	r2, #8
 8000dca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_USB_PCD_Init+0x48>)
 8000df2:	f000 fb39 	bl	8001468 <HAL_PCD_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000dfc:	f7ff fe44 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200031cc 	.word	0x200031cc
 8000e08:	40005c00 	.word	0x40005c00

08000e0c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b098      	sub	sp, #96	; 0x60
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2254      	movs	r2, #84	; 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00e ff95 	bl	800fd4c <memset>
  if(pcdHandle->Instance==USB)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_PCD_MspInit+0x70>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d122      	bne.n	8000e72 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e30:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e32:	2300      	movs	r3, #0
 8000e34:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fe8c 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000e46:	f7ff fe1f 	bl	8000a88 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_PCD_MspInit+0x74>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_PCD_MspInit+0x74>)
 8000e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_PCD_MspInit+0x74>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 6, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2106      	movs	r1, #6
 8000e66:	2014      	movs	r0, #20
 8000e68:	f000 f924 	bl	80010b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000e6c:	2014      	movs	r0, #20
 8000e6e:	f000 f93b 	bl	80010e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3760      	adds	r7, #96	; 0x60
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005c00 	.word	0x40005c00
 8000e80:	40021000 	.word	0x40021000

08000e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eae:	f7ff fecd 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f00e ff53 	bl	800fd5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fd7b 	bl	80009b0 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   r0, =_estack
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ec8:	0800ff94 	.word	0x0800ff94
  ldr r2, =_sbss
 8000ecc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ed0:	200043b4 	.word	0x200043b4

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>

08000ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8dc 	bl	800109e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f7ff fdf8 	bl	8000adc <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e001      	b.n	8000efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef8:	f7ff fdcc 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efc:	79fb      	ldrb	r3, [r7, #7]

}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x1c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x20>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <HAL_IncTick+0x1c>)
 8000f18:	6013      	str	r3, [r2, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	200034c0 	.word	0x200034c0
 8000f28:	20000008 	.word	0x20000008

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200034c0 	.word	0x200034c0

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff4c 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c2:	f7ff ff63 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	6978      	ldr	r0, [r7, #20]
 80010ce:	f7ff ffb3 	bl	8001038 <NVIC_EncodePriority>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff82 	bl	8000fe4 <__NVIC_SetPriority>
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001112:	e15a      	b.n	80013ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 814c 	beq.w	80013c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f003 0201 	and.w	r2, r3, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	6939      	ldr	r1, [r7, #16]
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0203 	and.w	r2, r3, #3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80a6 	beq.w	80013c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 800127a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127c:	4a5a      	ldr	r2, [pc, #360]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6613      	str	r3, [r2, #96]	; 0x60
 8001284:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001290:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ba:	d01f      	beq.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4c      	ldr	r2, [pc, #304]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d019      	beq.n	80012f8 <HAL_GPIO_Init+0x1f4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4b      	ldr	r2, [pc, #300]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d013      	beq.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4a      	ldr	r2, [pc, #296]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a49      	ldr	r2, [pc, #292]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x1e8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a48      	ldr	r2, [pc, #288]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012e4:	2305      	movs	r3, #5
 80012e6:	e00a      	b.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012e8:	2306      	movs	r3, #6
 80012ea:	e008      	b.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012f0:	2303      	movs	r3, #3
 80012f2:	e004      	b.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012fc:	2300      	movs	r3, #0
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	f002 0203 	and.w	r2, r2, #3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4093      	lsls	r3, r2
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130e:	4937      	ldr	r1, [pc, #220]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_GPIO_Init+0x300>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001340:	4a30      	ldr	r2, [pc, #192]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <HAL_GPIO_Init+0x300>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_GPIO_Init+0x300>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_GPIO_Init+0x300>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f47f ae9d 	bne.w	8001114 <HAL_GPIO_Init+0x10>
  }
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48000800 	.word	0x48000800
 80013f8:	48000c00 	.word	0x48000c00
 80013fc:	48001000 	.word	0x48001000
 8001400:	48001400 	.word	0x48001400
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001424:	e002      	b.n	800142c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	4618      	mov	r0, r3
 8001458:	f00d fe1c 	bl	800f094 <HAL_GPIO_EXTI_Callback>
  }
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af06      	add	r7, sp, #24
 800146e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0d7      	b.n	800162a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fcbc 	bl	8000e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 ff32 	bl	800530a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e04c      	b.n	8001546 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3301      	adds	r3, #1
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	b298      	uxth	r0, r3
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3336      	adds	r3, #54	; 0x36
 80014ea:	4602      	mov	r2, r0
 80014ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3303      	adds	r3, #3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3338      	adds	r3, #56	; 0x38
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	333c      	adds	r3, #60	; 0x3c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3ad      	bcc.n	80014ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e044      	b.n	80015e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3b5      	bcc.n	8001556 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	687e      	ldr	r6, [r7, #4]
 80015f2:	466d      	mov	r5, sp
 80015f4:	f106 0410 	add.w	r4, r6, #16
 80015f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	602b      	str	r3, [r5, #0]
 8001600:	1d33      	adds	r3, r6, #4
 8001602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f003 fe9b 	bl	8005340 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d102      	bne.n	8001628 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f001 fc58 	bl	8002ed8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001632 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_PCD_Start+0x16>
 8001644:	2302      	movs	r3, #2
 8001646:	e012      	b.n	800166e <HAL_PCD_Start+0x3c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fe41 	bl	80052dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f006 f85a 	bl	8007718 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_PCD_Stop+0x16>
 8001688:	2302      	movs	r3, #2
 800168a:	e012      	b.n	80016b2 <HAL_PCD_Stop+0x3c>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fe36 	bl	800530a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 f84f 	bl	8007746 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 f852 	bl	8007770 <USB_ReadInterrupts>
 80016cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fb33 	bl	8001d44 <PCD_EP_ISR_Handler>

    return;
 80016de:	e110      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d013      	beq.n	8001712 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fc:	b292      	uxth	r2, r2
 80016fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f00c fee0 	bl	800e4c8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001708:	2100      	movs	r1, #0
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8fc 	bl	8001908 <HAL_PCD_SetAddress>

    return;
 8001710:	e0f7      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800172e:	b292      	uxth	r2, r2
 8001730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001734:	e0e5      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001752:	b292      	uxth	r2, r2
 8001754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001758:	e0d3      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d034      	beq.n	80017ce <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	b292      	uxth	r2, r2
 8001778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	b292      	uxth	r2, r2
 8001790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f001 fbbf 	bl	8002f2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f00c fec8 	bl	800e544 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017c6:	b292      	uxth	r2, r2
 80017c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017cc:	e099      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d027      	beq.n	8001828 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0208 	orr.w	r2, r2, #8
 80017ea:	b292      	uxth	r2, r2
 80017ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001802:	b292      	uxth	r2, r2
 8001804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0204 	orr.w	r2, r2, #4
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f00c fe79 	bl	800e518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001826:	e06c      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b00      	cmp	r3, #0
 8001830:	d040      	beq.n	80018b4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001844:	b292      	uxth	r2, r2
 8001846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d12b      	bne.n	80018ac <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0204 	orr.w	r2, r2, #4
 8001866:	b292      	uxth	r2, r2
 8001868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0208 	orr.w	r2, r2, #8
 800187e:	b292      	uxth	r2, r2
 8001880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001894:	b29b      	uxth	r3, r3
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018a2:	2101      	movs	r1, #1
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f001 fb41 	bl	8002f2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80018aa:	e02a      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f00c fe33 	bl	800e518 <HAL_PCD_SuspendCallback>
    return;
 80018b2:	e026      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00f      	beq.n	80018de <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018d0:	b292      	uxth	r2, r2
 80018d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f00c fe4a 	bl	800e570 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018dc:	e011      	b.n	8001902 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00c      	beq.n	8001902 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001900:	bf00      	nop
  }
}
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_PCD_SetAddress+0x1a>
 800191e:	2302      	movs	r3, #2
 8001920:	e013      	b.n	800194a <HAL_PCD_SetAddress+0x42>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f005 fed8 	bl	80076f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	4608      	mov	r0, r1
 800195c:	4611      	mov	r1, r2
 800195e:	461a      	mov	r2, r3
 8001960:	4603      	mov	r3, r0
 8001962:	70fb      	strb	r3, [r7, #3]
 8001964:	460b      	mov	r3, r1
 8001966:	803b      	strh	r3, [r7, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da0e      	bge.n	8001996 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	705a      	strb	r2, [r3, #1]
 8001994:	e00e      	b.n	80019b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 0207 	and.w	r2, r3, #7
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019c0:	883a      	ldrh	r2, [r7, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	78ba      	ldrb	r2, [r7, #2]
 80019ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019de:	78bb      	ldrb	r3, [r7, #2]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d102      	bne.n	80019ea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_PCD_EP_Open+0xa6>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e00e      	b.n	8001a16 <HAL_PCD_EP_Open+0xc4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fcbc 	bl	8005384 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a14:	7afb      	ldrb	r3, [r7, #11]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da0e      	bge.n	8001a50 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	705a      	strb	r2, [r3, #1]
 8001a4e:	e00e      	b.n	8001a6e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	f003 0207 	and.w	r2, r3, #7
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_EP_Close+0x6a>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e00e      	b.n	8001aa6 <HAL_PCD_EP_Close+0x88>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f808 	bl	8005aac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	460b      	mov	r3, r1
 8001abc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	f003 0207 	and.w	r2, r3, #7
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2200      	movs	r2, #0
 8001aec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d106      	bne.n	8001b12 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f9bb 	bl	8005e86 <USB_EPStartXfer>
 8001b10:	e005      	b.n	8001b1e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 f9b4 	bl	8005e86 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6979      	ldr	r1, [r7, #20]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 f960 	bl	8005e86 <USB_EPStartXfer>
 8001bc6:	e005      	b.n	8001bd4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6979      	ldr	r1, [r7, #20]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 f959 	bl	8005e86 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0207 	and.w	r2, r3, #7
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d901      	bls.n	8001bfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e03e      	b.n	8001c7a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da0e      	bge.n	8001c22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
 8001c20:	e00c      	b.n	8001c3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_PCD_EP_SetStall+0x7e>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e00e      	b.n	8001c7a <HAL_PCD_EP_SetStall+0x9c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 fc41 	bl	80074f2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d901      	bls.n	8001ca0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e040      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da0e      	bge.n	8001cc6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	705a      	strb	r2, [r3, #1]
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 0207 	and.w	r2, r3, #7
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_PCD_EP_ClrStall+0x82>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e00e      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0xa0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fc3e 	bl	8007594 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b096      	sub	sp, #88	; 0x58
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d4c:	e39c      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001d68:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 815e 	bne.w	800202e <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d150      	bne.n	8001e20 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8e:	81fb      	strh	r3, [r7, #14]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3328      	adds	r3, #40	; 0x28
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	441a      	add	r2, r3
 8001dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ddc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f00c fa39 	bl	800e258 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 834a 	beq.w	8002488 <PCD_EP_ISR_Handler+0x744>
 8001df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 8345 	bne.w	8002488 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e1e:	e333      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d032      	beq.n	8001ea4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f005 fccb 	bl	8007814 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	823b      	strh	r3, [r7, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	8a3a      	ldrh	r2, [r7, #16]
 8001e94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e98:	b292      	uxth	r2, r2
 8001e9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f00c f961 	bl	800e164 <HAL_PCD_SetupStageCallback>
 8001ea2:	e2f1      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ea4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f280 82ed 	bge.w	8002488 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eba:	4013      	ands	r3, r2
 8001ebc:	83fb      	strh	r3, [r7, #30]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	8bfa      	ldrh	r2, [r7, #30]
 8001ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <PCD_EP_ISR_Handler+0x1ec>
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0a:	6959      	ldr	r1, [r3, #20]
 8001f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f005 fc7d 	bl	8007814 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	441a      	add	r2, r3
 8001f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f00c fa4c 	bl	800e3c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 82a3 	bne.w	8002488 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	4413      	add	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b3e      	cmp	r3, #62	; 0x3e
 8001f68:	d918      	bls.n	8001f9c <PCD_EP_ISR_Handler+0x258>
 8001f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <PCD_EP_ISR_Handler+0x240>
 8001f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f80:	3b01      	subs	r3, #1
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
 8001f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e029      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x2ac>
 8001f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d112      	bne.n	8001fca <PCD_EP_ISR_Handler+0x286>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	e012      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x2ac>
 8001fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <PCD_EP_ISR_Handler+0x2a0>
 8001fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002000:	827b      	strh	r3, [r7, #18]
 8002002:	8a7b      	ldrh	r3, [r7, #18]
 8002004:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002008:	827b      	strh	r3, [r7, #18]
 800200a:	8a7b      	ldrh	r3, [r7, #18]
 800200c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002010:	827b      	strh	r3, [r7, #18]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	8a7b      	ldrh	r3, [r7, #18]
 8002018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	b29b      	uxth	r3, r3
 800202a:	8013      	strh	r3, [r2, #0]
 800202c:	e22c      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002042:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002046:	2b00      	cmp	r3, #0
 8002048:	f280 80f6 	bge.w	8002238 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002062:	4013      	ands	r3, r2
 8002064:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800207a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207e:	b292      	uxth	r2, r2
 8002080:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002082:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	7b1b      	ldrb	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80020c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 808e 	beq.w	80021ee <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d8:	6959      	ldr	r1, [r3, #20]
 80020da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020dc:	88da      	ldrh	r2, [r3, #6]
 80020de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020e2:	f005 fb97 	bl	8007814 <USB_ReadPMA>
 80020e6:	e082      	b.n	80021ee <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ea:	78db      	ldrb	r3, [r3, #3]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d10a      	bne.n	8002106 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020f4:	461a      	mov	r2, r3
 80020f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f9d3 	bl	80024a4 <HAL_PCD_EP_DB_Receive>
 80020fe:	4603      	mov	r3, r0
 8002100:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002104:	e073      	b.n	80021ee <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002120:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800213a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002146:	b29b      	uxth	r3, r3
 8002148:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d022      	beq.n	80021aa <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4413      	add	r3, r2
 800217e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002188:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800218c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002190:	2b00      	cmp	r3, #0
 8002192:	d02c      	beq.n	80021ee <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219a:	6959      	ldr	r1, [r3, #20]
 800219c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219e:	891a      	ldrh	r2, [r3, #8]
 80021a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021a4:	f005 fb36 	bl	8007814 <USB_ReadPMA>
 80021a8:	e021      	b.n	80021ee <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80021d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	6959      	ldr	r1, [r3, #20]
 80021e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e4:	895a      	ldrh	r2, [r3, #10]
 80021e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021ea:	f005 fb13 	bl	8007814 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021f6:	441a      	add	r2, r3
 80021f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002204:	441a      	add	r2, r3
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <PCD_EP_ISR_Handler+0x4da>
 8002212:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d206      	bcs.n	800222c <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800221e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f00c f8cf 	bl	800e3c8 <HAL_PCD_DataOutStageCallback>
 800222a:	e005      	b.n	8002238 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fe27 	bl	8005e86 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8121 	beq.w	8002488 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002246:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002274:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800228a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002292:	b29b      	uxth	r3, r3
 8002294:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002298:	78db      	ldrb	r3, [r3, #3]
 800229a:	2b02      	cmp	r3, #2
 800229c:	f000 80a2 	beq.w	80023e4 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80022a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a8:	7b1b      	ldrb	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8093 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d046      	beq.n	800234a <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d126      	bne.n	8002312 <PCD_EP_ISR_Handler+0x5ce>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	4413      	add	r3, r2
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
 80022dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00da      	lsls	r2, r3, #3
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	4413      	add	r3, r2
 80022e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800230a:	b29a      	uxth	r2, r3
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	e061      	b.n	80023d6 <PCD_EP_ISR_Handler+0x692>
 8002312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d15d      	bne.n	80023d6 <PCD_EP_ISR_Handler+0x692>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	4413      	add	r3, r2
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	4413      	add	r3, r2
 800233c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	e045      	b.n	80023d6 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d126      	bne.n	80023a6 <PCD_EP_ISR_Handler+0x662>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236c:	4413      	add	r3, r2
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	00da      	lsls	r2, r3, #3
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	4413      	add	r3, r2
 800237a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800238a:	b29a      	uxth	r2, r3
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800239a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239e:	b29a      	uxth	r2, r3
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	801a      	strh	r2, [r3, #0]
 80023a4:	e017      	b.n	80023d6 <PCD_EP_ISR_Handler+0x692>
 80023a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d113      	bne.n	80023d6 <PCD_EP_ISR_Handler+0x692>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023bc:	4413      	add	r3, r2
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	00da      	lsls	r2, r3, #3
 80023c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c8:	4413      	add	r3, r2
 80023ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80023d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d2:	2200      	movs	r2, #0
 80023d4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f00b ff3b 	bl	800e258 <HAL_PCD_DataInStageCallback>
 80023e2:	e051      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80023e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d144      	bne.n	800247a <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4413      	add	r3, r2
 800240a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002414:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002420:	429a      	cmp	r2, r3
 8002422:	d907      	bls.n	8002434 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800242c:	1ad2      	subs	r2, r2, r3
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	e002      	b.n	800243a <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f00b ff05 	bl	800e258 <HAL_PCD_DataInStageCallback>
 800244e:	e01b      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002458:	441a      	add	r2, r3
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800245e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002466:	441a      	add	r2, r3
 8002468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fd07 	bl	8005e86 <USB_EPStartXfer>
 8002478:	e006      	b.n	8002488 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800247a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800247e:	461a      	mov	r2, r3
 8002480:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f917 	bl	80026b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002490:	b29b      	uxth	r3, r3
 8002492:	b21b      	sxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f6ff ac5a 	blt.w	8001d4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3758      	adds	r7, #88	; 0x58
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d07c      	beq.n	80025b6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	8b7b      	ldrh	r3, [r7, #26]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d306      	bcc.n	80024fa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	e002      	b.n	8002500 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d123      	bne.n	8002550 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	833b      	strh	r3, [r7, #24]
 8002524:	8b3b      	ldrh	r3, [r7, #24]
 8002526:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800252a:	833b      	strh	r3, [r7, #24]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	441a      	add	r2, r3
 800253a:	8b3b      	ldrh	r3, [r7, #24]
 800253c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	b29b      	uxth	r3, r3
 800254e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01f      	beq.n	800259a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002574:	82fb      	strh	r3, [r7, #22]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	441a      	add	r2, r3
 8002584:	8afb      	ldrh	r3, [r7, #22]
 8002586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800258e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002596:	b29b      	uxth	r3, r3
 8002598:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800259a:	8b7b      	ldrh	r3, [r7, #26]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8085 	beq.w	80026ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	891a      	ldrh	r2, [r3, #8]
 80025ae:	8b7b      	ldrh	r3, [r7, #26]
 80025b0:	f005 f930 	bl	8007814 <USB_ReadPMA>
 80025b4:	e07a      	b.n	80026ac <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	8b7b      	ldrh	r3, [r7, #26]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d306      	bcc.n	80025f4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	8b7b      	ldrh	r3, [r7, #26]
 80025ec:	1ad2      	subs	r2, r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	e002      	b.n	80025fa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d123      	bne.n	800264a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261c:	83fb      	strh	r3, [r7, #30]
 800261e:	8bfb      	ldrh	r3, [r7, #30]
 8002620:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002624:	83fb      	strh	r3, [r7, #30]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	441a      	add	r2, r3
 8002634:	8bfb      	ldrh	r3, [r7, #30]
 8002636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800263e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002646:	b29b      	uxth	r3, r3
 8002648:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11f      	bne.n	8002694 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	83bb      	strh	r3, [r7, #28]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	8bbb      	ldrh	r3, [r7, #28]
 8002680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002690:	b29b      	uxth	r3, r3
 8002692:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002694:	8b7b      	ldrh	r3, [r7, #26]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6959      	ldr	r1, [r3, #20]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	895a      	ldrh	r2, [r3, #10]
 80026a6:	8b7b      	ldrh	r3, [r7, #26]
 80026a8:	f005 f8b4 	bl	8007814 <USB_ReadPMA>
    }
  }

  return count;
 80026ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b0a2      	sub	sp, #136	; 0x88
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	4613      	mov	r3, r2
 80026c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 81c5 	beq.w	8002a5a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002700:	429a      	cmp	r2, r3
 8002702:	d907      	bls.n	8002714 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	1ad2      	subs	r2, r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	619a      	str	r2, [r3, #24]
 8002712:	e002      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80b9 	bne.w	8002896 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d126      	bne.n	800277a <HAL_PCD_EP_DB_Transmit+0xc4>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	4413      	add	r3, r2
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	00da      	lsls	r2, r3, #3
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	4413      	add	r3, r2
 800274e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800275e:	b29a      	uxth	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002772:	b29a      	uxth	r2, r3
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e01a      	b.n	80027b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d116      	bne.n	80027b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	4413      	add	r3, r2
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	4413      	add	r3, r2
 80027a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	2200      	movs	r2, #0
 80027ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d126      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x156>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00da      	lsls	r2, r3, #3
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002804:	b29a      	uxth	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e017      	b.n	800283c <HAL_PCD_EP_DB_Transmit+0x186>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d113      	bne.n	800283c <HAL_PCD_EP_DB_Transmit+0x186>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	4413      	add	r3, r2
 8002824:	623b      	str	r3, [r7, #32]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	00da      	lsls	r2, r3, #3
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	4413      	add	r3, r2
 8002830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f00b fd08 	bl	800e258 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 82d2 	beq.w	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	827b      	strh	r3, [r7, #18]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	8a7b      	ldrh	r3, [r7, #18]
 8002880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	b29b      	uxth	r3, r3
 8002892:	8013      	strh	r3, [r2, #0]
 8002894:	e2b0      	b.n	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	441a      	add	r2, r3
 80028cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	f040 8284 	bne.w	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f8:	441a      	add	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002906:	441a      	add	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d309      	bcc.n	800292c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002924:	1ad2      	subs	r2, r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	621a      	str	r2, [r3, #32]
 800292a:	e015      	b.n	8002958 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002938:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002942:	e009      	b.n	8002958 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d155      	bne.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x356>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	4413      	add	r3, r2
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00da      	lsls	r2, r3, #3
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	4413      	add	r3, r2
 8002982:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
 8002988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298a:	2b3e      	cmp	r3, #62	; 0x3e
 800298c:	d916      	bls.n	80029bc <HAL_PCD_EP_DB_Transmit+0x306>
 800298e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48
 8002994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800299e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a0:	3b01      	subs	r3, #1
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	029b      	lsls	r3, r3, #10
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	e043      	b.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d112      	bne.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x332>
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e02d      	b.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_PCD_EP_DB_Transmit+0x348>
 80029f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fa:	3301      	adds	r3, #1
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	029b      	lsls	r3, r3, #10
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e01b      	b.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d117      	bne.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a28:	4413      	add	r3, r2
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	00da      	lsls	r2, r3, #3
 8002a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a42:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6959      	ldr	r1, [r3, #20]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	891a      	ldrh	r2, [r3, #8]
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f004 fe9c 	bl	8007790 <USB_WritePMA>
 8002a58:	e1ce      	b.n	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d307      	bcc.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	619a      	str	r2, [r3, #24]
 8002a9c:	e002      	b.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 80c4 	bne.w	8002c36 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	785b      	ldrb	r3, [r3, #1]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d126      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aca:	4413      	add	r3, r2
 8002acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	00da      	lsls	r2, r3, #3
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002adc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	e01a      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x484>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d116      	bne.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x484>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	673b      	str	r3, [r7, #112]	; 0x70
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b20:	4413      	add	r3, r2
 8002b22:	673b      	str	r3, [r7, #112]	; 0x70
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	00da      	lsls	r2, r3, #3
 8002b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	2200      	movs	r2, #0
 8002b38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d12f      	bne.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b60:	4413      	add	r3, r2
 8002b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	00da      	lsls	r2, r3, #3
 8002b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	e017      	b.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x522>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d113      	bne.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x522>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bbe:	4413      	add	r3, r2
 8002bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	00da      	lsls	r2, r3, #3
 8002bc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bca:	4413      	add	r3, r2
 8002bcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f00b fb3a 	bl	800e258 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8104 	bne.w	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	8013      	strh	r3, [r2, #0]
 8002c34:	e0e0      	b.n	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d121      	bne.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f040 80b4 	bne.w	8002df8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c98:	441a      	add	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d309      	bcc.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	1ad2      	subs	r2, r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	621a      	str	r2, [r3, #32]
 8002cca:	e015      	b.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ce2:	e009      	b.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d155      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1a:	4413      	add	r3, r2
 8002d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	00da      	lsls	r2, r3, #3
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8002d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d30:	2b3e      	cmp	r3, #62	; 0x3e
 8002d32:	d916      	bls.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	677b      	str	r3, [r7, #116]	; 0x74
 8002d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x694>
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	3b01      	subs	r3, #1
 8002d48:	677b      	str	r3, [r7, #116]	; 0x74
 8002d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5e:	801a      	strh	r2, [r3, #0]
 8002d60:	e040      	b.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d112      	bne.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	e02a      	b.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	677b      	str	r3, [r7, #116]	; 0x74
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da0:	3301      	adds	r3, #1
 8002da2:	677b      	str	r3, [r7, #116]	; 0x74
 8002da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e018      	b.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	785b      	ldrb	r3, [r3, #1]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d114      	bne.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc8:	4413      	add	r3, r2
 8002dca:	663b      	str	r3, [r7, #96]	; 0x60
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00da      	lsls	r2, r3, #3
 8002dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6959      	ldr	r1, [r3, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	895a      	ldrh	r2, [r3, #10]
 8002df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f004 fccc 	bl	8007790 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e12:	823b      	strh	r3, [r7, #16]
 8002e14:	8a3b      	ldrh	r3, [r7, #16]
 8002e16:	f083 0310 	eor.w	r3, r3, #16
 8002e1a:	823b      	strh	r3, [r7, #16]
 8002e1c:	8a3b      	ldrh	r3, [r7, #16]
 8002e1e:	f083 0320 	eor.w	r3, r3, #32
 8002e22:	823b      	strh	r3, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	8a3b      	ldrh	r3, [r7, #16]
 8002e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3788      	adds	r7, #136	; 0x88
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	817b      	strh	r3, [r7, #10]
 8002e60:	4613      	mov	r3, r2
 8002e62:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e009      	b.n	8002e9c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e88:	897a      	ldrh	r2, [r7, #10]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	80da      	strh	r2, [r3, #6]
 8002eb0:	e00b      	b.n	8002eca <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d141      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d131      	bne.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f60:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f66:	4a46      	ldr	r2, [pc, #280]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f78:	4a41      	ldr	r2, [pc, #260]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2232      	movs	r2, #50	; 0x32
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	e002      	b.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9e:	4b38      	ldr	r3, [pc, #224]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d102      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f2      	bne.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fb2:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d158      	bne.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e057      	b.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fd4:	e04d      	b.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d141      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d131      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2232      	movs	r2, #50	; 0x32
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	0c9b      	lsrs	r3, r3, #18
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003022:	e002      	b.n	800302a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3b01      	subs	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d102      	bne.n	800303e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f2      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304a:	d112      	bne.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e011      	b.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003060:	e007      	b.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003070:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40007000 	.word	0x40007000
 8003084:	20000000 	.word	0x20000000
 8003088:	431bde83 	.word	0x431bde83

0800308c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e306      	b.n	80036ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d075      	beq.n	8003196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b97      	ldr	r3, [pc, #604]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b94      	ldr	r3, [pc, #592]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_OscConfig+0x3e>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_OscConfig+0x44>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	4b8d      	ldr	r3, [pc, #564]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d05b      	beq.n	8003194 <HAL_RCC_OscConfig+0x108>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d157      	bne.n	8003194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e2e1      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0x74>
 80030f2:	4b85      	ldr	r3, [pc, #532]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a84      	ldr	r2, [pc, #528]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e01d      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x98>
 800310a:	4b7f      	ldr	r3, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a7e      	ldr	r2, [pc, #504]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b7c      	ldr	r3, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7b      	ldr	r2, [pc, #492]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003124:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a77      	ldr	r2, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b75      	ldr	r3, [pc, #468]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a74      	ldr	r2, [pc, #464]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fd fef2 	bl	8000f2c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fd feee 	bl	8000f2c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e2a6      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0xc0>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fd fede 	bl	8000f2c <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fd feda 	bl	8000f2c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e292      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0xe8>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d075      	beq.n	800328e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ac:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d102      	bne.n	80031c2 <HAL_RCC_OscConfig+0x136>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_OscConfig+0x13c>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11f      	bne.n	8003208 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x154>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e265      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b49      	ldr	r3, [pc, #292]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	4946      	ldr	r1, [pc, #280]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_RCC_OscConfig+0x280>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fc6f 	bl	8000adc <HAL_InitTick>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d043      	beq.n	800328c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e251      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fe86 	bl	8000f2c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7fd fe82 	bl	8000f2c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e23a      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003236:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	492d      	ldr	r1, [pc, #180]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e01a      	b.n	800328e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800325e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fe62 	bl	8000f2c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fd fe5e 	bl	8000f2c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e216      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1e0>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d041      	beq.n	800331e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01c      	beq.n	80032dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fd fe3b 	bl	8000f2c <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fd fe37 	bl	8000f2c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1ef      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ef      	beq.n	80032ba <HAL_RCC_OscConfig+0x22e>
 80032da:	e020      	b.n	800331e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fd fe1e 	bl	8000f2c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f2:	e00d      	b.n	8003310 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fd fe1a 	bl	8000f2c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d906      	bls.n	8003310 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1d2      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003310:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ea      	bne.n	80032f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a6 	beq.w	8003478 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003330:	4b84      	ldr	r3, [pc, #528]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x2b4>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x2b6>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6593      	str	r3, [r2, #88]	; 0x58
 8003352:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003362:	4b79      	ldr	r3, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fd fdd7 	bl	8000f2c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fd fdd3 	bl	8000f2c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e18b      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d108      	bne.n	80033ba <HAL_RCC_OscConfig+0x32e>
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b8:	e024      	b.n	8003404 <HAL_RCC_OscConfig+0x378>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d110      	bne.n	80033e4 <HAL_RCC_OscConfig+0x358>
 80033c2:	4b60      	ldr	r3, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d2:	4b5c      	ldr	r3, [pc, #368]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x378>
 80033e4:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a56      	ldr	r2, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d016      	beq.n	800343a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fd8e 	bl	8000f2c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd fd8a 	bl	8000f2c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e140      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ed      	beq.n	8003414 <HAL_RCC_OscConfig+0x388>
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fd fd77 	bl	8000f2c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fd73 	bl	8000f2c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e129      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ed      	bne.n	8003442 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a34      	ldr	r2, [pc, #208]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d03c      	beq.n	80034fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003492:	4a2c      	ldr	r2, [pc, #176]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fd46 	bl	8000f2c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a4:	f7fd fd42 	bl	8000f2c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0fa      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ef      	beq.n	80034a4 <HAL_RCC_OscConfig+0x418>
 80034c4:	e01b      	b.n	80034fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fd29 	bl	8000f2c <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034de:	f7fd fd25 	bl	8000f2c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0dd      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ef      	bne.n	80034de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80d1 	beq.w	80036aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b0c      	cmp	r3, #12
 8003512:	f000 808b 	beq.w	800362c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d15e      	bne.n	80035dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd fcff 	bl	8000f2c <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	e00c      	b.n	800354c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003532:	f7fd fcfb 	bl	8000f2c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d905      	bls.n	800354c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0b3      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ec      	bne.n	8003532 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003558:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCC_OscConfig+0x62c>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6a11      	ldr	r1, [r2, #32]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003568:	3a01      	subs	r2, #1
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003572:	0212      	lsls	r2, r2, #8
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0552      	lsls	r2, r2, #21
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003586:	0852      	lsrs	r2, r2, #1
 8003588:	3a01      	subs	r2, #1
 800358a:	0652      	lsls	r2, r2, #25
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003592:	06d2      	lsls	r2, r2, #27
 8003594:	430a      	orrs	r2, r1
 8003596:	4947      	ldr	r1, [pc, #284]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a8:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a41      	ldr	r2, [pc, #260]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fcba 	bl	8000f2c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fd fcb6 	bl	8000f2c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e06e      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x530>
 80035da:	e066      	b.n	80036aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a2e      	ldr	r2, [pc, #184]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 80035fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fc92 	bl	8000f2c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fc8e 	bl	8000f2c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e046      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x580>
 800362a:	e03e      	b.n	80036aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e039      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_RCC_OscConfig+0x628>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	429a      	cmp	r2, r3
 800364a:	d12c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	3b01      	subs	r3, #1
 8003658:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d123      	bne.n	80036a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d11b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d113      	bne.n	80036a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	019f800c 	.word	0x019f800c

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e11e      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 020f 	bic.w	r2, r3, #15
 80036ea:	498c      	ldr	r1, [pc, #560]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b8a      	ldr	r3, [pc, #552]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e106      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d073      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d129      	bne.n	800376c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003718:	4b81      	ldr	r3, [pc, #516]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0f4      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003728:	f000 f9d0 	bl	8003acc <RCC_GetSysClockFreqFromPLLSource>
 800372c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <HAL_RCC_ClockConfig+0x268>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d93f      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003736:	4b7a      	ldr	r3, [pc, #488]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800374a:	2b00      	cmp	r3, #0
 800374c:	d033      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d12f      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375e:	4a70      	ldr	r2, [pc, #448]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e024      	b.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d107      	bne.n	8003784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0c6      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	4b66      	ldr	r3, [pc, #408]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0be      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003794:	f000 f8ce 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8003798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a61      	ldr	r2, [pc, #388]	; (8003924 <HAL_RCC_ClockConfig+0x268>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d909      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a2:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037aa:	4a5d      	ldr	r2, [pc, #372]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b5a      	ldr	r3, [pc, #360]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4957      	ldr	r1, [pc, #348]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fbb0 	bl	8000f2c <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fd fbac 	bl	8000f2c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e095      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b4e      	ldr	r3, [pc, #312]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d023      	beq.n	800384c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a42      	ldr	r2, [pc, #264]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800381a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003828:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003830:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4936      	ldr	r1, [pc, #216]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
 800384a:	e008      	b.n	800385e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d105      	bne.n	800385e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a32      	ldr	r2, [pc, #200]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385e:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d21d      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 020f 	bic.w	r2, r3, #15
 8003874:	4929      	ldr	r1, [pc, #164]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800387c:	f7fd fb56 	bl	8000f2c <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd fb52 	bl	8000f2c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e03b      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1ed      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4917      	ldr	r1, [pc, #92]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	490f      	ldr	r1, [pc, #60]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e6:	f000 f825 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038ea:	4602      	mov	r2, r0
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	490c      	ldr	r1, [pc, #48]	; (8003928 <HAL_RCC_ClockConfig+0x26c>)
 80038f8:	5ccb      	ldrb	r3, [r1, r3]
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f8e6 	bl	8000adc <HAL_InitTick>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	40021000 	.word	0x40021000
 8003924:	04c4b400 	.word	0x04c4b400
 8003928:	0800ff44 	.word	0x0800ff44
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d102      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e047      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d102      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e03e      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d136      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3301      	adds	r3, #1
 8003980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d10c      	bne.n	80039a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a16      	ldr	r2, [pc, #88]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003992:	68d2      	ldr	r2, [r2, #12]
 8003994:	0a12      	lsrs	r2, r2, #8
 8003996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
      break;
 80039a0:	e00c      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a2:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a10      	ldr	r2, [pc, #64]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0a12      	lsrs	r2, r2, #8
 80039b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
      break;
 80039ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e001      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039dc:	693b      	ldr	r3, [r7, #16]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a14:	f7ff fff0 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800ff54 	.word	0x0800ff54

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a40:	f7ff ffda 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0adb      	lsrs	r3, r3, #11
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4904      	ldr	r1, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800ff54 	.word	0x0800ff54

08003a68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	220f      	movs	r2, #15
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_GetClockConfig+0x60>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40022000 	.word	0x40022000

08003acc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d10c      	bne.n	8003b0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003afa:	68d2      	ldr	r2, [r2, #12]
 8003afc:	0a12      	lsrs	r2, r2, #8
 8003afe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
    break;
 8003b08:	e00c      	b.n	8003b24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	0a12      	lsrs	r2, r2, #8
 8003b18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
    break;
 8003b22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0e5b      	lsrs	r3, r3, #25
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b3e:	687b      	ldr	r3, [r7, #4]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	007a1200 	.word	0x007a1200
 8003b54:	00f42400 	.word	0x00f42400

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b60:	2300      	movs	r3, #0
 8003b62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b64:	2300      	movs	r3, #0
 8003b66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8098 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10d      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6593      	str	r3, [r2, #88]	; 0x58
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a39      	ldr	r2, [pc, #228]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bae:	f7fd f9bd 	bl	8000f2c <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb4:	e009      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd f9b9 	bl	8000f2c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ef      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d159      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01e      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d019      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c04:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c24:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd f979 	bl	8000f2c <HAL_GetTick>
 8003c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd f975 	bl	8000f2c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	74fb      	strb	r3, [r7, #19]
            break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ec      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	74bb      	strb	r3, [r7, #18]
 8003c86:	e005      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c94:	7c7b      	ldrb	r3, [r7, #17]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4ba7      	ldr	r3, [pc, #668]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4aa6      	ldr	r2, [pc, #664]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb2:	4ba1      	ldr	r3, [pc, #644]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f023 0203 	bic.w	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	499d      	ldr	r1, [pc, #628]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd4:	4b98      	ldr	r3, [pc, #608]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f023 020c 	bic.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4995      	ldr	r1, [pc, #596]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf6:	4b90      	ldr	r3, [pc, #576]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	498c      	ldr	r1, [pc, #560]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d18:	4b87      	ldr	r3, [pc, #540]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	4984      	ldr	r1, [pc, #528]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	497b      	ldr	r1, [pc, #492]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d5c:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	4973      	ldr	r1, [pc, #460]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	496a      	ldr	r1, [pc, #424]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da0:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4962      	ldr	r1, [pc, #392]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	4959      	ldr	r1, [pc, #356]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003de4:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dea:	f023 0203 	bic.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	4951      	ldr	r1, [pc, #324]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e06:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	4948      	ldr	r1, [pc, #288]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e28:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4940      	ldr	r1, [pc, #256]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e60:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	4932      	ldr	r1, [pc, #200]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	4924      	ldr	r1, [pc, #144]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	4916      	ldr	r1, [pc, #88]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d019      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f26:	d109      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a02      	ldr	r2, [pc, #8]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	e002      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f48:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4926      	ldr	r1, [pc, #152]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8e:	4918      	ldr	r1, [pc, #96]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d105      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	490a      	ldr	r1, [pc, #40]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000

08003ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e049      	b.n	800409a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f841 	bl	80040a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fa60 	bl	80044f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d001      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e054      	b.n	800417a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a26      	ldr	r2, [pc, #152]	; (8004188 <HAL_TIM_Base_Start_IT+0xd0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d01d      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <HAL_TIM_Base_Start_IT+0xd4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <HAL_TIM_Base_Start_IT+0xd8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_TIM_Base_Start_IT+0xdc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_TIM_Base_Start_IT+0xe0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_TIM_Base_Start_IT+0xe4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d115      	bne.n	8004164 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b06      	cmp	r3, #6
 8004148:	d015      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0xbe>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d011      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e008      	b.n	8004176 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e000      	b.n	8004178 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40014000 	.word	0x40014000
 80041a0:	40015000 	.word	0x40015000
 80041a4:	00010007 	.word	0x00010007

080041a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0202 	mvn.w	r2, #2
 80041d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f965 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f957 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f968 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0204 	mvn.w	r2, #4
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f93b 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f92d 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f93e 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b08      	cmp	r3, #8
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0208 	mvn.w	r2, #8
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2204      	movs	r2, #4
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f911 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f903 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f914 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0210 	mvn.w	r2, #16
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2208      	movs	r2, #8
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8e7 	bl	80044ba <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f8d9 	bl	80044a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8ea 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10e      	bne.n	800432c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d107      	bne.n	800432c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0201 	mvn.w	r2, #1
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fb9c 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f982 	bl	800465c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	d10e      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d107      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f975 	bl	8004670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d10e      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d107      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f898 	bl	80044e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d10e      	bne.n	80043de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d107      	bne.n	80043de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0220 	mvn.w	r2, #32
 80043d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f935 	bl	8004648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ec:	d10f      	bne.n	800440e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fc:	d107      	bne.n	800440e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f93b 	bl	8004684 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441c:	d10f      	bne.n	800443e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f92d 	bl	8004698 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d10f      	bne.n	800446e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445c:	d107      	bne.n	800446e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f91f 	bl	80046ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800447c:	d10f      	bne.n	800449e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800448c:	d107      	bne.n	800449e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f911 	bl	80046c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a46      	ldr	r2, [pc, #280]	; (8004624 <TIM_Base_SetConfig+0x12c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d017      	beq.n	8004540 <TIM_Base_SetConfig+0x48>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d013      	beq.n	8004540 <TIM_Base_SetConfig+0x48>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a43      	ldr	r2, [pc, #268]	; (8004628 <TIM_Base_SetConfig+0x130>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0x48>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a42      	ldr	r2, [pc, #264]	; (800462c <TIM_Base_SetConfig+0x134>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0x48>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a41      	ldr	r2, [pc, #260]	; (8004630 <TIM_Base_SetConfig+0x138>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0x48>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a40      	ldr	r2, [pc, #256]	; (8004634 <TIM_Base_SetConfig+0x13c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0x48>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <TIM_Base_SetConfig+0x140>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d108      	bne.n	8004552 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a33      	ldr	r2, [pc, #204]	; (8004624 <TIM_Base_SetConfig+0x12c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d023      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d01f      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a30      	ldr	r2, [pc, #192]	; (8004628 <TIM_Base_SetConfig+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01b      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2f      	ldr	r2, [pc, #188]	; (800462c <TIM_Base_SetConfig+0x134>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d017      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2e      	ldr	r2, [pc, #184]	; (8004630 <TIM_Base_SetConfig+0x138>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2d      	ldr	r2, [pc, #180]	; (8004634 <TIM_Base_SetConfig+0x13c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00f      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <TIM_Base_SetConfig+0x144>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <TIM_Base_SetConfig+0x148>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <TIM_Base_SetConfig+0x14c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_Base_SetConfig+0xaa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a26      	ldr	r2, [pc, #152]	; (8004638 <TIM_Base_SetConfig+0x140>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d108      	bne.n	80045b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <TIM_Base_SetConfig+0x12c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <TIM_Base_SetConfig+0x110>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <TIM_Base_SetConfig+0x13c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00f      	beq.n	8004608 <TIM_Base_SetConfig+0x110>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a14      	ldr	r2, [pc, #80]	; (800463c <TIM_Base_SetConfig+0x144>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_Base_SetConfig+0x110>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a13      	ldr	r2, [pc, #76]	; (8004640 <TIM_Base_SetConfig+0x148>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_Base_SetConfig+0x110>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <TIM_Base_SetConfig+0x14c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0x110>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <TIM_Base_SetConfig+0x140>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40013400 	.word	0x40013400
 8004638:	40015000 	.word	0x40015000
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800

08004648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e042      	b.n	800476c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fb05 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2224      	movs	r2, #36	; 0x24
 8004702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f82c 	bl	8004774 <UART_SetConfig>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e022      	b.n	800476c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fb1c 	bl	8004d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fba3 	bl	8004eb0 <UART_CheckIdleState>
 800476a:	4603      	mov	r3, r0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b08c      	sub	sp, #48	; 0x30
 800477a:	af00      	add	r7, sp, #0
 800477c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4baa      	ldr	r3, [pc, #680]	; (8004a4c <UART_SetConfig+0x2d8>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a9f      	ldr	r2, [pc, #636]	; (8004a50 <UART_SetConfig+0x2dc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047dc:	4313      	orrs	r3, r2
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	f023 010f 	bic.w	r1, r3, #15
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a90      	ldr	r2, [pc, #576]	; (8004a54 <UART_SetConfig+0x2e0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0xf0>
 8004818:	4b8f      	ldr	r3, [pc, #572]	; (8004a58 <UART_SetConfig+0x2e4>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b03      	cmp	r3, #3
 8004824:	d81a      	bhi.n	800485c <UART_SetConfig+0xe8>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0xb8>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800484d 	.word	0x0800484d
 8004834:	08004845 	.word	0x08004845
 8004838:	08004855 	.word	0x08004855
 800483c:	2301      	movs	r3, #1
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004842:	e116      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484a:	e112      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004852:	e10e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485a:	e10a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004862:	e106      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7c      	ldr	r2, [pc, #496]	; (8004a5c <UART_SetConfig+0x2e8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d138      	bne.n	80048e0 <UART_SetConfig+0x16c>
 800486e:	4b7a      	ldr	r3, [pc, #488]	; (8004a58 <UART_SetConfig+0x2e4>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d82d      	bhi.n	80048d8 <UART_SetConfig+0x164>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x110>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048b9 	.word	0x080048b9
 8004888:	080048d9 	.word	0x080048d9
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048d9 	.word	0x080048d9
 8004894:	080048c9 	.word	0x080048c9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048d9 	.word	0x080048d9
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048c1 	.word	0x080048c1
 80048a8:	080048d9 	.word	0x080048d9
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048d1 	.word	0x080048d1
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048be:	e0d8      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048c0:	2302      	movs	r3, #2
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c6:	e0d4      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ce:	e0d0      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e0cc      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048de:	e0c8      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5e      	ldr	r2, [pc, #376]	; (8004a60 <UART_SetConfig+0x2ec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d125      	bne.n	8004936 <UART_SetConfig+0x1c2>
 80048ea:	4b5b      	ldr	r3, [pc, #364]	; (8004a58 <UART_SetConfig+0x2e4>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048f4:	2b30      	cmp	r3, #48	; 0x30
 80048f6:	d016      	beq.n	8004926 <UART_SetConfig+0x1b2>
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d818      	bhi.n	800492e <UART_SetConfig+0x1ba>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d00a      	beq.n	8004916 <UART_SetConfig+0x1a2>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d814      	bhi.n	800492e <UART_SetConfig+0x1ba>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <UART_SetConfig+0x19a>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d008      	beq.n	800491e <UART_SetConfig+0x1aa>
 800490c:	e00f      	b.n	800492e <UART_SetConfig+0x1ba>
 800490e:	2300      	movs	r3, #0
 8004910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004914:	e0ad      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004916:	2302      	movs	r3, #2
 8004918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491c:	e0a9      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800491e:	2304      	movs	r3, #4
 8004920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004924:	e0a5      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004926:	2308      	movs	r3, #8
 8004928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492c:	e0a1      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800492e:	2310      	movs	r3, #16
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004934:	e09d      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <UART_SetConfig+0x2f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d125      	bne.n	800498c <UART_SetConfig+0x218>
 8004940:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <UART_SetConfig+0x2e4>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800494a:	2bc0      	cmp	r3, #192	; 0xc0
 800494c:	d016      	beq.n	800497c <UART_SetConfig+0x208>
 800494e:	2bc0      	cmp	r3, #192	; 0xc0
 8004950:	d818      	bhi.n	8004984 <UART_SetConfig+0x210>
 8004952:	2b80      	cmp	r3, #128	; 0x80
 8004954:	d00a      	beq.n	800496c <UART_SetConfig+0x1f8>
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d814      	bhi.n	8004984 <UART_SetConfig+0x210>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <UART_SetConfig+0x1f0>
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d008      	beq.n	8004974 <UART_SetConfig+0x200>
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x210>
 8004964:	2300      	movs	r3, #0
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496a:	e082      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004972:	e07e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497a:	e07a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004982:	e076      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498a:	e072      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a35      	ldr	r2, [pc, #212]	; (8004a68 <UART_SetConfig+0x2f4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d12a      	bne.n	80049ec <UART_SetConfig+0x278>
 8004996:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <UART_SetConfig+0x2e4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a4:	d01a      	beq.n	80049dc <UART_SetConfig+0x268>
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d81b      	bhi.n	80049e4 <UART_SetConfig+0x270>
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d00c      	beq.n	80049cc <UART_SetConfig+0x258>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	d815      	bhi.n	80049e4 <UART_SetConfig+0x270>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <UART_SetConfig+0x250>
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c0:	d008      	beq.n	80049d4 <UART_SetConfig+0x260>
 80049c2:	e00f      	b.n	80049e4 <UART_SetConfig+0x270>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e052      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e04e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049d4:	2304      	movs	r3, #4
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049da:	e04a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e046      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e042      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <UART_SetConfig+0x2dc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d13a      	bne.n	8004a6c <UART_SetConfig+0x2f8>
 80049f6:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <UART_SetConfig+0x2e4>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a04:	d01a      	beq.n	8004a3c <UART_SetConfig+0x2c8>
 8004a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0a:	d81b      	bhi.n	8004a44 <UART_SetConfig+0x2d0>
 8004a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a10:	d00c      	beq.n	8004a2c <UART_SetConfig+0x2b8>
 8004a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a16:	d815      	bhi.n	8004a44 <UART_SetConfig+0x2d0>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <UART_SetConfig+0x2b0>
 8004a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a20:	d008      	beq.n	8004a34 <UART_SetConfig+0x2c0>
 8004a22:	e00f      	b.n	8004a44 <UART_SetConfig+0x2d0>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e022      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e01e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e01a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e016      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e012      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a4c:	cfff69f3 	.word	0xcfff69f3
 8004a50:	40008000 	.word	0x40008000
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40004400 	.word	0x40004400
 8004a60:	40004800 	.word	0x40004800
 8004a64:	40004c00 	.word	0x40004c00
 8004a68:	40005000 	.word	0x40005000
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4aae      	ldr	r2, [pc, #696]	; (8004d30 <UART_SetConfig+0x5bc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 8097 	bne.w	8004bac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d823      	bhi.n	8004ace <UART_SetConfig+0x35a>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <UART_SetConfig+0x318>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004acf 	.word	0x08004acf
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004acf 	.word	0x08004acf
 8004a9c:	08004abf 	.word	0x08004abf
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004acf 	.word	0x08004acf
 8004aa8:	08004acf 	.word	0x08004acf
 8004aac:	08004ac7 	.word	0x08004ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7fe ffae 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ab6:	e010      	b.n	8004ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b9e      	ldr	r3, [pc, #632]	; (8004d34 <UART_SetConfig+0x5c0>)
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004abc:	e00d      	b.n	8004ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7fe ff39 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8004ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004acc:	e005      	b.n	8004ada <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8130 	beq.w	8004d42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	4a94      	ldr	r2, [pc, #592]	; (8004d38 <UART_SetConfig+0x5c4>)
 8004ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d305      	bcc.n	8004b12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d903      	bls.n	8004b1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b18:	e113      	b.n	8004d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	60fa      	str	r2, [r7, #12]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	4a84      	ldr	r2, [pc, #528]	; (8004d38 <UART_SetConfig+0x5c4>)
 8004b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2200      	movs	r2, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b3c:	f7fb fc94 	bl	8000468 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4610      	mov	r0, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	020b      	lsls	r3, r1, #8
 8004b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b56:	0202      	lsls	r2, r0, #8
 8004b58:	6979      	ldr	r1, [r7, #20]
 8004b5a:	6849      	ldr	r1, [r1, #4]
 8004b5c:	0849      	lsrs	r1, r1, #1
 8004b5e:	2000      	movs	r0, #0
 8004b60:	460c      	mov	r4, r1
 8004b62:	4605      	mov	r5, r0
 8004b64:	eb12 0804 	adds.w	r8, r2, r4
 8004b68:	eb43 0905 	adc.w	r9, r3, r5
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	469a      	mov	sl, r3
 8004b74:	4693      	mov	fp, r2
 8004b76:	4652      	mov	r2, sl
 8004b78:	465b      	mov	r3, fp
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	f7fb fc73 	bl	8000468 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4613      	mov	r3, r2
 8004b88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b90:	d308      	bcc.n	8004ba4 <UART_SetConfig+0x430>
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b98:	d204      	bcs.n	8004ba4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a3a      	ldr	r2, [r7, #32]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e0ce      	b.n	8004d42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004baa:	e0ca      	b.n	8004d42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb4:	d166      	bne.n	8004c84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d827      	bhi.n	8004c0e <UART_SetConfig+0x49a>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x450>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe ff12 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bee:	e014      	b.n	8004c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe ff24 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bf6:	e010      	b.n	8004c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b4e      	ldr	r3, [pc, #312]	; (8004d34 <UART_SetConfig+0x5c0>)
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bfc:	e00d      	b.n	8004c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fe fe99 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8004c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c0c:	e005      	b.n	8004c1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8090 	beq.w	8004d42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	4a44      	ldr	r2, [pc, #272]	; (8004d38 <UART_SetConfig+0x5c4>)
 8004c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d916      	bls.n	8004c7c <UART_SetConfig+0x508>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d212      	bcs.n	8004c7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f023 030f 	bic.w	r3, r3, #15
 8004c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	8bfb      	ldrh	r3, [r7, #30]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	8bfa      	ldrh	r2, [r7, #30]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	e062      	b.n	8004d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c82:	e05e      	b.n	8004d42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d828      	bhi.n	8004cde <UART_SetConfig+0x56a>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <UART_SetConfig+0x520>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc9 	.word	0x08004cc9
 8004ca0:	08004cdf 	.word	0x08004cdf
 8004ca4:	08004ccf 	.word	0x08004ccf
 8004ca8:	08004cdf 	.word	0x08004cdf
 8004cac:	08004cdf 	.word	0x08004cdf
 8004cb0:	08004cdf 	.word	0x08004cdf
 8004cb4:	08004cd7 	.word	0x08004cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fe feaa 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cbe:	e014      	b.n	8004cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7fe febc 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cc6:	e010      	b.n	8004cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <UART_SetConfig+0x5c0>)
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ccc:	e00d      	b.n	8004cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cce:	f7fe fe31 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8004cd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cd4:	e009      	b.n	8004cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cdc:	e005      	b.n	8004cea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d028      	beq.n	8004d42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <UART_SetConfig+0x5c4>)
 8004cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d910      	bls.n	8004d3c <UART_SetConfig+0x5c8>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d20c      	bcs.n	8004d3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e009      	b.n	8004d42 <UART_SetConfig+0x5ce>
 8004d2e:	bf00      	nop
 8004d30:	40008000 	.word	0x40008000
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	0800ff5c 	.word	0x0800ff5c
      }
      else
      {
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6a:	d10a      	bne.n	8004e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec0:	f7fc f834 	bl	8000f2c <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10e      	bne.n	8004ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f82f 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e025      	b.n	8004f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d10e      	bne.n	8004f1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f819 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e00f      	b.n	8004f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b09c      	sub	sp, #112	; 0x70
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f56:	e0a9      	b.n	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	f000 80a5 	beq.w	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fb ffe3 	bl	8000f2c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d140      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e069      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d051      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d149      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	66bb      	str	r3, [r7, #104]	; 0x68
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005074:	623a      	str	r2, [r7, #32]
 8005076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e010      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f43f af46 	beq.w	8004f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3770      	adds	r7, #112	; 0x70
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_UARTEx_DisableFifoMode+0x16>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e027      	b.n	800513c <HAL_UARTEx_DisableFifoMode+0x66>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800511a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e02d      	b.n	80051bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	; 0x24
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f84f 	bl	8005240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051d8:	2302      	movs	r3, #2
 80051da:	e02d      	b.n	8005238 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f811 	bl	8005240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005260:	e031      	b.n	80052c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005262:	2308      	movs	r3, #8
 8005264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005266:	2308      	movs	r3, #8
 8005268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	0e5b      	lsrs	r3, r3, #25
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0f5b      	lsrs	r3, r3, #29
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	7b3a      	ldrb	r2, [r7, #12]
 800528e:	4911      	ldr	r1, [pc, #68]	; (80052d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005290:	5c8a      	ldrb	r2, [r1, r2]
 8005292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005296:	7b3a      	ldrb	r2, [r7, #12]
 8005298:	490f      	ldr	r1, [pc, #60]	; (80052d8 <UARTEx_SetNbDataToProcess+0x98>)
 800529a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529c:	fb93 f3f2 	sdiv	r3, r3, r2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	7b7a      	ldrb	r2, [r7, #13]
 80052ac:	4909      	ldr	r1, [pc, #36]	; (80052d4 <UARTEx_SetNbDataToProcess+0x94>)
 80052ae:	5c8a      	ldrb	r2, [r1, r2]
 80052b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052b4:	7b7a      	ldrb	r2, [r7, #13]
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <UARTEx_SetNbDataToProcess+0x98>)
 80052b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	0800ff74 	.word	0x0800ff74
 80052d8:	0800ff7c 	.word	0x0800ff7c

080052dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80052f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005312:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005316:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	b29b      	uxth	r3, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	b29b      	uxth	r3, r3
 8005328:	4013      	ands	r3, r2
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005340:	b084      	sub	sp, #16
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	f107 0014 	add.w	r0, r7, #20
 800534e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	b004      	add	sp, #16
 8005380:	4770      	bx	lr
	...

08005384 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005384:	b480      	push	{r7}
 8005386:	b09d      	sub	sp, #116	; 0x74
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d81f      	bhi.n	80053f6 <USB_ActivateEndpoint+0x72>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <USB_ActivateEndpoint+0x38>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053ff 	.word	0x080053ff
 80053c8:	080053db 	.word	0x080053db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053d8:	e012      	b.n	8005400 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053e6:	e00b      	b.n	8005400 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053f4:	e004      	b.n	8005400 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80053fc:	e000      	b.n	8005400 <USB_ActivateEndpoint+0x7c>
      break;
 80053fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	b21b      	sxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	b21a      	sxth	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b21b      	sxth	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b21b      	sxth	r3, r3
 8005446:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 8149 	bne.w	8005708 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8084 	beq.w	8005588 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00da      	lsls	r2, r3, #3
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	88db      	ldrh	r3, [r3, #6]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	827b      	strh	r3, [r7, #18]
 80054c2:	8a7b      	ldrh	r3, [r7, #18]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <USB_ActivateEndpoint+0x180>
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	823b      	strh	r3, [r7, #16]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8a3b      	ldrh	r3, [r7, #16]
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d020      	beq.n	800554e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	81bb      	strh	r3, [r7, #12]
 8005524:	89bb      	ldrh	r3, [r7, #12]
 8005526:	f083 0320 	eor.w	r3, r3, #32
 800552a:	81bb      	strh	r3, [r7, #12]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	89bb      	ldrh	r3, [r7, #12]
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]
 800554c:	e2a6      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005564:	81fb      	strh	r3, [r7, #14]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]
 8005586:	e289      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	4413      	add	r3, r2
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	00da      	lsls	r2, r3, #3
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	88db      	ldrh	r3, [r3, #6]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	4413      	add	r3, r2
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	00da      	lsls	r2, r3, #3
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	4413      	add	r3, r2
 80055da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b3e      	cmp	r3, #62	; 0x3e
 80055e6:	d918      	bls.n	800561a <USB_ActivateEndpoint+0x296>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <USB_ActivateEndpoint+0x27e>
 80055fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fe:	3b01      	subs	r3, #1
 8005600:	66bb      	str	r3, [r7, #104]	; 0x68
 8005602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005604:	b29b      	uxth	r3, r3
 8005606:	029b      	lsls	r3, r3, #10
 8005608:	b29b      	uxth	r3, r3
 800560a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005612:	b29a      	uxth	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	e029      	b.n	800566e <USB_ActivateEndpoint+0x2ea>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d112      	bne.n	8005648 <USB_ActivateEndpoint+0x2c4>
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800562c:	b29a      	uxth	r2, r3
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005640:	b29a      	uxth	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e012      	b.n	800566e <USB_ActivateEndpoint+0x2ea>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <USB_ActivateEndpoint+0x2de>
 800565c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565e:	3301      	adds	r3, #1
 8005660:	66bb      	str	r3, [r7, #104]	; 0x68
 8005662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	847b      	strh	r3, [r7, #34]	; 0x22
 800567c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800567e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01b      	beq.n	80056be <USB_ActivateEndpoint+0x33a>
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	843b      	strh	r3, [r7, #32]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	8c3b      	ldrh	r3, [r7, #32]
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	8bfb      	ldrh	r3, [r7, #30]
 80056d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056dc:	83fb      	strh	r3, [r7, #30]
 80056de:	8bfb      	ldrh	r3, [r7, #30]
 80056e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056e4:	83fb      	strh	r3, [r7, #30]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
 8005706:	e1c9      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	78db      	ldrb	r3, [r3, #3]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d11e      	bne.n	800574e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
 800574c:	e01d      	b.n	800578a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579a:	4413      	add	r3, r2
 800579c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	00da      	lsls	r2, r3, #3
 80057a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	891b      	ldrh	r3, [r3, #8]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	657b      	str	r3, [r7, #84]	; 0x54
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ce:	4413      	add	r3, r2
 80057d0:	657b      	str	r3, [r7, #84]	; 0x54
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	00da      	lsls	r2, r3, #3
 80057d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057da:	4413      	add	r3, r2
 80057dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057e0:	653b      	str	r3, [r7, #80]	; 0x50
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	895b      	ldrh	r3, [r3, #10]
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 8093 	bne.w	8005922 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800580c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <USB_ActivateEndpoint+0x4cc>
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800585e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <USB_ActivateEndpoint+0x51c>
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058be:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]
 8005920:	e0bc      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01d      	beq.n	800597a <USB_ActivateEndpoint+0x5f6>
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800598a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01d      	beq.n	80059d2 <USB_ActivateEndpoint+0x64e>
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	78db      	ldrb	r3, [r3, #3]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d024      	beq.n	8005a24 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059f8:	f083 0320 	eor.w	r3, r3, #32
 80059fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
 8005a22:	e01d      	b.n	8005a60 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3774      	adds	r7, #116	; 0x74
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b08d      	sub	sp, #52	; 0x34
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	7b1b      	ldrb	r3, [r3, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 808e 	bne.w	8005bdc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d044      	beq.n	8005b52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	81bb      	strh	r3, [r7, #12]
 8005ad6:	89bb      	ldrh	r3, [r7, #12]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <USB_DeactivateEndpoint+0x6c>
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	817b      	strh	r3, [r7, #10]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	813b      	strh	r3, [r7, #8]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	893b      	ldrh	r3, [r7, #8]
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
 8005b50:	e192      	b.n	8005e78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	827b      	strh	r3, [r7, #18]
 8005b60:	8a7b      	ldrh	r3, [r7, #18]
 8005b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <USB_DeactivateEndpoint+0xf6>
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	823b      	strh	r3, [r7, #16]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8a3b      	ldrh	r3, [r7, #16]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	81fb      	strh	r3, [r7, #14]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	89fb      	ldrh	r3, [r7, #14]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e14d      	b.n	8005e78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 80a5 	bne.w	8005d30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	843b      	strh	r3, [r7, #32]
 8005bf4:	8c3b      	ldrh	r3, [r7, #32]
 8005bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01b      	beq.n	8005c36 <USB_DeactivateEndpoint+0x18a>
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	83fb      	strh	r3, [r7, #30]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	8bfb      	ldrh	r3, [r7, #30]
 8005c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	83bb      	strh	r3, [r7, #28]
 8005c44:	8bbb      	ldrh	r3, [r7, #28]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01b      	beq.n	8005c86 <USB_DeactivateEndpoint+0x1da>
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	837b      	strh	r3, [r7, #26]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8b7b      	ldrh	r3, [r7, #26]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	833b      	strh	r3, [r7, #24]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	8b3b      	ldrh	r3, [r7, #24]
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	82fb      	strh	r3, [r7, #22]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8afb      	ldrh	r3, [r7, #22]
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	82bb      	strh	r3, [r7, #20]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8abb      	ldrh	r3, [r7, #20]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
 8005d2e:	e0a3      	b.n	8005e78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <USB_DeactivateEndpoint+0x2d4>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <USB_DeactivateEndpoint+0x324>
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	853b      	strh	r3, [r7, #40]	; 0x28
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3734      	adds	r7, #52	; 0x34
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b0c2      	sub	sp, #264	; 0x108
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e94:	6018      	str	r0, [r3, #0]
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 867b 	bne.w	8006ba8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d908      	bls.n	8005ee0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ede:	e007      	b.n	8005ef0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	7b1b      	ldrb	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d13a      	bne.n	8005f76 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6959      	ldr	r1, [r3, #20]
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	88da      	ldrh	r2, [r3, #6]
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	f001 fc32 	bl	8007790 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	00da      	lsls	r2, r3, #3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f000 bde3 	b.w	8006b3c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	78db      	ldrb	r3, [r3, #3]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	f040 843a 	bne.w	80067fc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	f240 83b7 	bls.w	8006714 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a1a      	ldr	r2, [r3, #32]
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 81b3 	beq.w	80063ae <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	633b      	str	r3, [r7, #48]	; 0x30
 8006054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d16d      	bne.n	8006140 <USB_EPStartXfer+0x2ba>
 8006064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607e:	b29b      	uxth	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	4413      	add	r3, r2
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00da      	lsls	r2, r3, #3
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	4413      	add	r3, r2
 800609a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a4:	2b3e      	cmp	r3, #62	; 0x3e
 80060a6:	d91c      	bls.n	80060e2 <USB_EPStartXfer+0x25c>
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <USB_EPStartXfer+0x242>
 80060be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060c2:	3b01      	subs	r3, #1
 80060c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	029b      	lsls	r3, r3, #10
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060da:	b29a      	uxth	r2, r3
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e053      	b.n	800618a <USB_EPStartXfer+0x304>
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d112      	bne.n	8006110 <USB_EPStartXfer+0x28a>
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006108:	b29a      	uxth	r2, r3
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	e03c      	b.n	800618a <USB_EPStartXfer+0x304>
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800611a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <USB_EPStartXfer+0x2aa>
 8006126:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800612a:	3301      	adds	r3, #1
 800612c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006134:	b29b      	uxth	r3, r3
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	b29a      	uxth	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	e024      	b.n	800618a <USB_EPStartXfer+0x304>
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d11c      	bne.n	800618a <USB_EPStartXfer+0x304>
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	4413      	add	r3, r2
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	00da      	lsls	r2, r3, #3
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	4413      	add	r3, r2
 800617a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006184:	b29a      	uxth	r2, r3
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	895b      	ldrh	r3, [r3, #10]
 8006196:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6959      	ldr	r1, [r3, #20]
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061b8:	6800      	ldr	r0, [r0, #0]
 80061ba:	f001 fae9 	bl	8007790 <USB_WritePMA>
            ep->xfer_buff += len;
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ce:	441a      	add	r2, r3
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d90f      	bls.n	8006218 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1a      	ldr	r2, [r3, #32]
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006208:	1ad2      	subs	r2, r2, r3
 800620a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	621a      	str	r2, [r3, #32]
 8006216:	e00e      	b.n	8006236 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d16d      	bne.n	8006322 <USB_EPStartXfer+0x49c>
 8006246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006260:	b29b      	uxth	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	4413      	add	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	00da      	lsls	r2, r3, #3
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	4413      	add	r3, r2
 800627c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006286:	2b3e      	cmp	r3, #62	; 0x3e
 8006288:	d91c      	bls.n	80062c4 <USB_EPStartXfer+0x43e>
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <USB_EPStartXfer+0x424>
 80062a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a4:	3b01      	subs	r3, #1
 80062a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	029b      	lsls	r3, r3, #10
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062bc:	b29a      	uxth	r2, r3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e059      	b.n	8006378 <USB_EPStartXfer+0x4f2>
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d112      	bne.n	80062f2 <USB_EPStartXfer+0x46c>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	e042      	b.n	8006378 <USB_EPStartXfer+0x4f2>
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <USB_EPStartXfer+0x48c>
 8006308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630c:	3301      	adds	r3, #1
 800630e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29a      	uxth	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	e02a      	b.n	8006378 <USB_EPStartXfer+0x4f2>
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d122      	bne.n	8006378 <USB_EPStartXfer+0x4f2>
 8006332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	4413      	add	r3, r2
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	00da      	lsls	r2, r3, #3
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	4413      	add	r3, r2
 8006368:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	b29a      	uxth	r2, r3
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	891b      	ldrh	r3, [r3, #8]
 8006384:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6959      	ldr	r1, [r3, #20]
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006398:	b29b      	uxth	r3, r3
 800639a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800639e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063a6:	6800      	ldr	r0, [r0, #0]
 80063a8:	f001 f9f2 	bl	8007790 <USB_WritePMA>
 80063ac:	e3c6      	b.n	8006b3c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d16d      	bne.n	800649a <USB_EPStartXfer+0x614>
 80063be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063de:	4413      	add	r3, r2
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	00da      	lsls	r2, r3, #3
 80063f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f2:	4413      	add	r3, r2
 80063f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f8:	647b      	str	r3, [r7, #68]	; 0x44
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006400:	d91c      	bls.n	800643c <USB_EPStartXfer+0x5b6>
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800640c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <USB_EPStartXfer+0x59c>
 8006418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800641c:	3b01      	subs	r3, #1
 800641e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006434:	b29a      	uxth	r2, r3
 8006436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e059      	b.n	80064f0 <USB_EPStartXfer+0x66a>
 800643c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006440:	2b00      	cmp	r3, #0
 8006442:	d112      	bne.n	800646a <USB_EPStartXfer+0x5e4>
 8006444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644e:	b29a      	uxth	r2, r3
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e042      	b.n	80064f0 <USB_EPStartXfer+0x66a>
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <USB_EPStartXfer+0x604>
 8006480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006484:	3301      	adds	r3, #1
 8006486:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800648a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29a      	uxth	r2, r3
 8006494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	e02a      	b.n	80064f0 <USB_EPStartXfer+0x66a>
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d122      	bne.n	80064f0 <USB_EPStartXfer+0x66a>
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	653b      	str	r3, [r7, #80]	; 0x50
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ca:	4413      	add	r3, r2
 80064cc:	653b      	str	r3, [r7, #80]	; 0x50
 80064ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	00da      	lsls	r2, r3, #3
 80064dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064de:	4413      	add	r3, r2
 80064e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	891b      	ldrh	r3, [r3, #8]
 80064fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6959      	ldr	r1, [r3, #20]
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006510:	b29b      	uxth	r3, r3
 8006512:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006516:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800651a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	f001 f936 	bl	8007790 <USB_WritePMA>
            ep->xfer_buff += len;
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	441a      	add	r2, r3
 8006536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a1a      	ldr	r2, [r3, #32]
 800654e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d90f      	bls.n	800657e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a1a      	ldr	r2, [r3, #32]
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	621a      	str	r2, [r3, #32]
 800657c:	e00e      	b.n	800659c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800657e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800658e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2200      	movs	r2, #0
 800659a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d16d      	bne.n	8006694 <USB_EPStartXfer+0x80e>
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	4413      	add	r3, r2
 80065da:	63bb      	str	r3, [r7, #56]	; 0x38
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	00da      	lsls	r2, r3, #3
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	2b3e      	cmp	r3, #62	; 0x3e
 80065fa:	d91c      	bls.n	8006636 <USB_EPStartXfer+0x7b0>
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <USB_EPStartXfer+0x796>
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	3b01      	subs	r3, #1
 8006618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662e:	b29a      	uxth	r2, r3
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	e053      	b.n	80066de <USB_EPStartXfer+0x858>
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	2b00      	cmp	r3, #0
 800663c:	d112      	bne.n	8006664 <USB_EPStartXfer+0x7de>
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006648:	b29a      	uxth	r2, r3
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665c:	b29a      	uxth	r2, r3
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e03c      	b.n	80066de <USB_EPStartXfer+0x858>
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	085b      	lsrs	r3, r3, #1
 800666a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <USB_EPStartXfer+0x7fe>
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	3301      	adds	r3, #1
 8006680:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	b29b      	uxth	r3, r3
 800668a:	029b      	lsls	r3, r3, #10
 800668c:	b29a      	uxth	r2, r3
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e024      	b.n	80066de <USB_EPStartXfer+0x858>
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d11c      	bne.n	80066de <USB_EPStartXfer+0x858>
 80066a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	4413      	add	r3, r2
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	00da      	lsls	r2, r3, #3
 80066ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	b29a      	uxth	r2, r3
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	895b      	ldrh	r3, [r3, #10]
 80066ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6959      	ldr	r1, [r3, #20]
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006704:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006708:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f001 f83f 	bl	8007790 <USB_WritePMA>
 8006712:	e213      	b.n	8006b3c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a0:	4413      	add	r3, r2
 80067a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	00da      	lsls	r2, r3, #3
 80067b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	891b      	ldrh	r3, [r3, #8]
 80067d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6959      	ldr	r1, [r3, #20]
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067f4:	6800      	ldr	r0, [r0, #0]
 80067f6:	f000 ffcb 	bl	8007790 <USB_WritePMA>
 80067fa:	e19f      	b.n	8006b3c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80067fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a1a      	ldr	r2, [r3, #32]
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680c:	1ad2      	subs	r2, r2, r3
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800681a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80bc 	beq.w	80069ba <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	673b      	str	r3, [r7, #112]	; 0x70
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d16d      	bne.n	800693a <USB_EPStartXfer+0xab4>
 800685e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	66bb      	str	r3, [r7, #104]	; 0x68
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800687e:	4413      	add	r3, r2
 8006880:	66bb      	str	r3, [r7, #104]	; 0x68
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	00da      	lsls	r2, r3, #3
 8006890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006892:	4413      	add	r3, r2
 8006894:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006898:	667b      	str	r3, [r7, #100]	; 0x64
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	2b3e      	cmp	r3, #62	; 0x3e
 80068a0:	d91c      	bls.n	80068dc <USB_EPStartXfer+0xa56>
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <USB_EPStartXfer+0xa3c>
 80068b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068bc:	3b01      	subs	r3, #1
 80068be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	029b      	lsls	r3, r3, #10
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	e053      	b.n	8006984 <USB_EPStartXfer+0xafe>
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d112      	bne.n	800690a <USB_EPStartXfer+0xa84>
 80068e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e03c      	b.n	8006984 <USB_EPStartXfer+0xafe>
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <USB_EPStartXfer+0xaa4>
 8006920:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800692a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29a      	uxth	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e024      	b.n	8006984 <USB_EPStartXfer+0xafe>
 800693a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d11c      	bne.n	8006984 <USB_EPStartXfer+0xafe>
 800694a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006958:	b29b      	uxth	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695e:	4413      	add	r3, r2
 8006960:	673b      	str	r3, [r7, #112]	; 0x70
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	00da      	lsls	r2, r3, #3
 8006970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006972:	4413      	add	r3, r2
 8006974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	b29a      	uxth	r2, r3
 8006980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006982:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	895b      	ldrh	r3, [r3, #10]
 8006990:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6959      	ldr	r1, [r3, #20]
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069b2:	6800      	ldr	r0, [r0, #0]
 80069b4:	f000 feec 	bl	8007790 <USB_WritePMA>
 80069b8:	e0c0      	b.n	8006b3c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d16d      	bne.n	8006aa6 <USB_EPStartXfer+0xc20>
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069ea:	4413      	add	r3, r2
 80069ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	00da      	lsls	r2, r3, #3
 80069fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069fe:	4413      	add	r3, r2
 8006a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a0c:	d91c      	bls.n	8006a48 <USB_EPStartXfer+0xbc2>
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <USB_EPStartXfer+0xba8>
 8006a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	e05f      	b.n	8006b08 <USB_EPStartXfer+0xc82>
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d112      	bne.n	8006a76 <USB_EPStartXfer+0xbf0>
 8006a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e048      	b.n	8006b08 <USB_EPStartXfer+0xc82>
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <USB_EPStartXfer+0xc10>
 8006a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a90:	3301      	adds	r3, #1
 8006a92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e030      	b.n	8006b08 <USB_EPStartXfer+0xc82>
 8006aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d128      	bne.n	8006b08 <USB_EPStartXfer+0xc82>
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ada:	4413      	add	r3, r2
 8006adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	00da      	lsls	r2, r3, #3
 8006aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006af2:	4413      	add	r3, r2
 8006af4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	891b      	ldrh	r3, [r3, #8]
 8006b14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6959      	ldr	r1, [r3, #20]
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b36:	6800      	ldr	r0, [r0, #0]
 8006b38:	f000 fe2a 	bl	8007790 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b62:	817b      	strh	r3, [r7, #10]
 8006b64:	897b      	ldrh	r3, [r7, #10]
 8006b66:	f083 0310 	eor.w	r3, r3, #16
 8006b6a:	817b      	strh	r3, [r7, #10]
 8006b6c:	897b      	ldrh	r3, [r7, #10]
 8006b6e:	f083 0320 	eor.w	r3, r3, #32
 8006b72:	817b      	strh	r3, [r7, #10]
 8006b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8013      	strh	r3, [r2, #0]
 8006ba4:	f000 bc9f 	b.w	80074e6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	7b1b      	ldrb	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 80ae 	bne.w	8006d16 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d917      	bls.n	8006c06 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	619a      	str	r2, [r3, #24]
 8006c04:	e00e      	b.n	8006c24 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2200      	movs	r2, #0
 8006c22:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c48:	4413      	add	r3, r2
 8006c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	00da      	lsls	r2, r3, #3
 8006c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c70:	d91d      	bls.n	8006cae <USB_EPStartXfer+0xe28>
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <USB_EPStartXfer+0xe0c>
 8006c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e3e1      	b.n	8007472 <USB_EPStartXfer+0x15ec>
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d116      	bne.n	8006ce4 <USB_EPStartXfer+0xe5e>
 8006cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e3c6      	b.n	8007472 <USB_EPStartXfer+0x15ec>
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <USB_EPStartXfer+0xe7e>
 8006cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cfe:	3301      	adds	r3, #1
 8006d00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	029b      	lsls	r3, r3, #10
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	e3ad      	b.n	8007472 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	78db      	ldrb	r3, [r3, #3]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	f040 8200 	bne.w	8007128 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 8091 	bne.w	8006e5c <USB_EPStartXfer+0xfd6>
 8006d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d5e:	4413      	add	r3, r2
 8006d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	00da      	lsls	r2, r3, #3
 8006d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d8e:	d925      	bls.n	8006ddc <USB_EPStartXfer+0xf56>
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <USB_EPStartXfer+0xf3a>
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e074      	b.n	8006ec6 <USB_EPStartXfer+0x1040>
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d116      	bne.n	8006e1a <USB_EPStartXfer+0xf94>
 8006dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dfe:	801a      	strh	r2, [r3, #0]
 8006e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e055      	b.n	8006ec6 <USB_EPStartXfer+0x1040>
 8006e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <USB_EPStartXfer+0xfc4>
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	3301      	adds	r3, #1
 8006e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	029b      	lsls	r3, r3, #10
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e034      	b.n	8006ec6 <USB_EPStartXfer+0x1040>
 8006e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d12c      	bne.n	8006ec6 <USB_EPStartXfer+0x1040>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e90:	4413      	add	r3, r2
 8006e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	00da      	lsls	r2, r3, #3
 8006ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 8091 	bne.w	8007008 <USB_EPStartXfer+0x1182>
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	00da      	lsls	r2, r3, #3
 8006f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f22:	4413      	add	r3, r2
 8006f24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3a:	d925      	bls.n	8006f88 <USB_EPStartXfer+0x1102>
 8006f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <USB_EPStartXfer+0x10e6>
 8006f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	029b      	lsls	r3, r3, #10
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e06d      	b.n	8007064 <USB_EPStartXfer+0x11de>
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d116      	bne.n	8006fc6 <USB_EPStartXfer+0x1140>
 8006f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fc2:	801a      	strh	r2, [r3, #0]
 8006fc4:	e04e      	b.n	8007064 <USB_EPStartXfer+0x11de>
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <USB_EPStartXfer+0x1170>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	029b      	lsls	r3, r3, #10
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	e02d      	b.n	8007064 <USB_EPStartXfer+0x11de>
 8007008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d125      	bne.n	8007064 <USB_EPStartXfer+0x11de>
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800702e:	4413      	add	r3, r2
 8007030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	00da      	lsls	r2, r3, #3
 8007042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007046:	4413      	add	r3, r2
 8007048:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800704c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007062:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 81fe 	beq.w	8007472 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007096:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800709a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <USB_EPStartXfer+0x1228>
 80070a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10d      	bne.n	80070ca <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80070b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 81db 	bne.w	8007472 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 81d4 	bne.w	8007472 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007122:	b29b      	uxth	r3, r3
 8007124:	8013      	strh	r3, [r2, #0]
 8007126:	e1a4      	b.n	8007472 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	78db      	ldrb	r3, [r3, #3]
 8007134:	2b01      	cmp	r3, #1
 8007136:	f040 819a 	bne.w	800746e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d917      	bls.n	8007186 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	619a      	str	r2, [r3, #24]
 8007184:	e00e      	b.n	80071a4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d178      	bne.n	80072a6 <USB_EPStartXfer+0x1420>
 80071b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071d8:	4413      	add	r3, r2
 80071da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	00da      	lsls	r2, r3, #3
 80071ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007200:	d91d      	bls.n	800723e <USB_EPStartXfer+0x13b8>
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007206:	095b      	lsrs	r3, r3, #5
 8007208:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <USB_EPStartXfer+0x139c>
 8007218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800721c:	3b01      	subs	r3, #1
 800721e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29b      	uxth	r3, r3
 800722c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007234:	b29a      	uxth	r2, r3
 8007236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e064      	b.n	8007308 <USB_EPStartXfer+0x1482>
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007242:	2b00      	cmp	r3, #0
 8007244:	d116      	bne.n	8007274 <USB_EPStartXfer+0x13ee>
 8007246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726a:	b29a      	uxth	r2, r3
 800726c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e049      	b.n	8007308 <USB_EPStartXfer+0x1482>
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <USB_EPStartXfer+0x140e>
 800728a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728e:	3301      	adds	r3, #1
 8007290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007298:	b29b      	uxth	r3, r3
 800729a:	029b      	lsls	r3, r3, #10
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e030      	b.n	8007308 <USB_EPStartXfer+0x1482>
 80072a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d128      	bne.n	8007308 <USB_EPStartXfer+0x1482>
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80072c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072da:	4413      	add	r3, r2
 80072dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	00da      	lsls	r2, r3, #3
 80072ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072f2:	4413      	add	r3, r2
 80072f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d178      	bne.n	8007418 <USB_EPStartXfer+0x1592>
 8007326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800734a:	4413      	add	r3, r2
 800734c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	00da      	lsls	r2, r3, #3
 800735e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007362:	4413      	add	r3, r2
 8007364:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007370:	2b3e      	cmp	r3, #62	; 0x3e
 8007372:	d91d      	bls.n	80073b0 <USB_EPStartXfer+0x152a>
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <USB_EPStartXfer+0x150e>
 800738a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800738e:	3b01      	subs	r3, #1
 8007390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007398:	b29b      	uxth	r3, r3
 800739a:	029b      	lsls	r3, r3, #10
 800739c:	b29b      	uxth	r3, r3
 800739e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	e060      	b.n	8007472 <USB_EPStartXfer+0x15ec>
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d116      	bne.n	80073e6 <USB_EPStartXfer+0x1560>
 80073b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	e045      	b.n	8007472 <USB_EPStartXfer+0x15ec>
 80073e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ea:	085b      	lsrs	r3, r3, #1
 80073ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <USB_EPStartXfer+0x1580>
 80073fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007400:	3301      	adds	r3, #1
 8007402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800740a:	b29b      	uxth	r3, r3
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e02c      	b.n	8007472 <USB_EPStartXfer+0x15ec>
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d124      	bne.n	8007472 <USB_EPStartXfer+0x15ec>
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800743e:	4413      	add	r3, r2
 8007440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	00da      	lsls	r2, r3, #3
 8007452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007456:	4413      	add	r3, r2
 8007458:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800745c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e001      	b.n	8007472 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e03a      	b.n	80074e8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800749c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80074a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80074b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751a:	81bb      	strh	r3, [r7, #12]
 800751c:	89bb      	ldrh	r3, [r7, #12]
 800751e:	f083 0310 	eor.w	r3, r3, #16
 8007522:	81bb      	strh	r3, [r7, #12]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	89bb      	ldrh	r3, [r7, #12]
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]
 8007544:	e01f      	b.n	8007586 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755c:	81fb      	strh	r3, [r7, #14]
 800755e:	89fb      	ldrh	r3, [r7, #14]
 8007560:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007564:	81fb      	strh	r3, [r7, #14]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007582:	b29b      	uxth	r3, r3
 8007584:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	7b1b      	ldrb	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 809d 	bne.w	80076e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d04c      	beq.n	800764a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	823b      	strh	r3, [r7, #16]
 80075be:	8a3b      	ldrh	r3, [r7, #16]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01b      	beq.n	8007600 <USB_EPClearStall+0x6c>
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075de:	81fb      	strh	r3, [r7, #14]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	78db      	ldrb	r3, [r3, #3]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d06c      	beq.n	80076e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800761e:	81bb      	strh	r3, [r7, #12]
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	f083 0320 	eor.w	r3, r3, #32
 8007626:	81bb      	strh	r3, [r7, #12]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	89bb      	ldrh	r3, [r7, #12]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
 8007648:	e04b      	b.n	80076e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	82fb      	strh	r3, [r7, #22]
 8007658:	8afb      	ldrh	r3, [r7, #22]
 800765a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01b      	beq.n	800769a <USB_EPClearStall+0x106>
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007678:	82bb      	strh	r3, [r7, #20]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	8abb      	ldrh	r3, [r7, #20]
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b0:	827b      	strh	r3, [r7, #18]
 80076b2:	8a7b      	ldrh	r3, [r7, #18]
 80076b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076b8:	827b      	strh	r3, [r7, #18]
 80076ba:	8a7b      	ldrh	r3, [r7, #18]
 80076bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076c0:	827b      	strh	r3, [r7, #18]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	8a7b      	ldrh	r3, [r7, #18]
 80076ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2280      	movs	r2, #128	; 0x80
 8007706:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007754:	b29b      	uxth	r3, r3
 8007756:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800777e:	b29b      	uxth	r3, r3
 8007780:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007790:	b480      	push	{r7}
 8007792:	b08d      	sub	sp, #52	; 0x34
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4611      	mov	r1, r2
 800779c:	461a      	mov	r2, r3
 800779e:	460b      	mov	r3, r1
 80077a0:	80fb      	strh	r3, [r7, #6]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077a6:	88bb      	ldrh	r3, [r7, #4]
 80077a8:	3301      	adds	r3, #1
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077b6:	88fa      	ldrh	r2, [r7, #6]
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077c6:	e01b      	b.n	8007800 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	3301      	adds	r3, #1
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29b      	uxth	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	3302      	adds	r3, #2
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	3301      	adds	r3, #1
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	3b01      	subs	r3, #1
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e0      	bne.n	80077c8 <USB_WritePMA+0x38>
  }
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3734      	adds	r7, #52	; 0x34
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007814:	b480      	push	{r7}
 8007816:	b08b      	sub	sp, #44	; 0x2c
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	460b      	mov	r3, r1
 8007824:	80fb      	strh	r3, [r7, #6]
 8007826:	4613      	mov	r3, r2
 8007828:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800782a:	88bb      	ldrh	r3, [r7, #4]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007844:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
 800784a:	e018      	b.n	800787e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	3302      	adds	r3, #2
 8007858:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	b2da      	uxtb	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	3b01      	subs	r3, #1
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e3      	bne.n	800784c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007884:	88bb      	ldrh	r3, [r7, #4]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	b29b      	uxth	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	b2da      	uxtb	r2, r3
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	701a      	strb	r2, [r3, #0]
  }
}
 80078a0:	bf00      	nop
 80078a2:	372c      	adds	r7, #44	; 0x2c
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b096      	sub	sp, #88	; 0x58
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3303      	adds	r3, #3
 80078be:	f023 0303 	bic.w	r3, r3, #3
 80078c2:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078c4:	f3ef 8310 	mrs	r3, PRIMASK
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80078ce:	b672      	cpsid	i
#endif
    return(int_posture);
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80078d2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80078d4:	4b55      	ldr	r3, [pc, #340]	; (8007a2c <_tx_byte_allocate+0x180>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e2:	621a      	str	r2, [r3, #32]
 80078e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	f383 8810 	msr	PRIMASK, r3
}
 80078ee:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f9b2 	bl	8007c5c <_tx_byte_pool_search>
 80078f8:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078fa:	f3ef 8310 	mrs	r3, PRIMASK
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007902:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007904:	b672      	cpsid	i
    return(int_posture);
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8007908:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800790a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007914:	e006      	b.n	8007924 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800791c:	429a      	cmp	r2, r3
 800791e:	d101      	bne.n	8007924 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8007924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0d9      	beq.n	80078de <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800792e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8007930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <_tx_byte_allocate+0x9c>
 8007936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007938:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	f383 8810 	msr	PRIMASK, r3
}
 8007940:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8007942:	2300      	movs	r3, #0
 8007944:	653b      	str	r3, [r7, #80]	; 0x50
 8007946:	e06c      	b.n	8007a22 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d061      	beq.n	8007a12 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <_tx_byte_allocate+0x184>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8007956:	2310      	movs	r3, #16
 8007958:	653b      	str	r3, [r7, #80]	; 0x50
 800795a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f383 8810 	msr	PRIMASK, r3
}
 8007964:	e05d      	b.n	8007a22 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8007966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007968:	4a32      	ldr	r2, [pc, #200]	; (8007a34 <_tx_byte_allocate+0x188>)
 800796a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800796c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8007972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8007978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800797e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007980:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007988:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800799c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80079a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ac:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80079ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b2:	675a      	str	r2, [r3, #116]	; 0x74
 80079b4:	e011      	b.n	80079da <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80079bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079c0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80079c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80079c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079cc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80079d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80079da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079dc:	2209      	movs	r2, #9
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80079e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079e2:	2201      	movs	r2, #1
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80079e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80079ec:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <_tx_byte_allocate+0x184>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	4a0f      	ldr	r2, [pc, #60]	; (8007a30 <_tx_byte_allocate+0x184>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	f383 8810 	msr	PRIMASK, r3
}
 8007a00:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007a02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007a04:	f002 faea 	bl	8009fdc <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a10:	e007      	b.n	8007a22 <_tx_byte_allocate+0x176>
 8007a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a14:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f383 8810 	msr	PRIMASK, r3
}
 8007a1c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8007a1e:	2310      	movs	r3, #16
 8007a20:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8007a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3758      	adds	r7, #88	; 0x58
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200034fc 	.word	0x200034fc
 8007a30:	20003594 	.word	0x20003594
 8007a34:	08007a39 	.word	0x08007a39

08007a38 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08e      	sub	sp, #56	; 0x38
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a42:	f3ef 8310 	mrs	r3, PRIMASK
 8007a46:	623b      	str	r3, [r7, #32]
    return(posture);
 8007a48:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007a4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007a4c:	b672      	cpsid	i
    return(int_posture);
 8007a4e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a56:	4a33      	ldr	r2, [pc, #204]	; (8007b24 <_tx_byte_pool_cleanup+0xec>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d158      	bne.n	8007b0e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d152      	bne.n	8007b0e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d04c      	beq.n	8007b0e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2b      	ldr	r2, [pc, #172]	; (8007b28 <_tx_byte_pool_cleanup+0xf0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d147      	bne.n	8007b0e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d043      	beq.n	8007b0e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	1e5a      	subs	r2, r3, #1
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8007aa8:	e013      	b.n	8007ad2 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aba:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d102      	bne.n	8007ad2 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	2b09      	cmp	r3, #9
 8007ad8:	d119      	bne.n	8007b0e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2210      	movs	r2, #16
 8007ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <_tx_byte_pool_cleanup+0xf4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <_tx_byte_pool_cleanup+0xf4>)
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f383 8810 	msr	PRIMASK, r3
}
 8007af6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 f96f 	bl	8009ddc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007afe:	f3ef 8310 	mrs	r3, PRIMASK
 8007b02:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007b04:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007b06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b08:	b672      	cpsid	i
    return(int_posture);
 8007b0a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f383 8810 	msr	PRIMASK, r3
}
 8007b18:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007b1a:	bf00      	nop
 8007b1c:	3738      	adds	r7, #56	; 0x38
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	08007a39 	.word	0x08007a39
 8007b28:	42595445 	.word	0x42595445
 8007b2c:	20003594 	.word	0x20003594

08007b30 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08e      	sub	sp, #56	; 0x38
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8007b3e:	2234      	movs	r2, #52	; 0x34
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f008 f902 	bl	800fd4c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f1a3 0208 	sub.w	r2, r3, #8
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8007b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	4413      	add	r3, r2
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b9c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	3b04      	subs	r3, #4
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bba:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <_tx_byte_pool_create+0x11c>)
 8007bce:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bda:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007bdc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007bde:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007be0:	b672      	cpsid	i
    return(int_posture);
 8007be2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a19      	ldr	r2, [pc, #100]	; (8007c50 <_tx_byte_pool_create+0x120>)
 8007bea:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8007bec:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <_tx_byte_pool_create+0x124>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d109      	bne.n	8007c08 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8007bf4:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <_tx_byte_pool_create+0x128>)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
 8007c06:	e011      	b.n	8007c2c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8007c08:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <_tx_byte_pool_create+0x128>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a3a      	ldr	r2, [r7, #32]
 8007c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <_tx_byte_pool_create+0x124>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3301      	adds	r3, #1
 8007c32:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <_tx_byte_pool_create+0x124>)
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f383 8810 	msr	PRIMASK, r3
}
 8007c40:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3738      	adds	r7, #56	; 0x38
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	ffffeeee 	.word	0xffffeeee
 8007c50:	42595445 	.word	0x42595445
 8007c54:	200034f0 	.word	0x200034f0
 8007c58:	200034ec 	.word	0x200034ec

08007c5c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b097      	sub	sp, #92	; 0x5c
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8007c66:	2300      	movs	r3, #0
 8007c68:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007c72:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c74:	b672      	cpsid	i
    return(int_posture);
 8007c76:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8007c78:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	3b02      	subs	r3, #2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d308      	bcc.n	8007ca4 <_tx_byte_pool_search+0x48>
 8007c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c94:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	f383 8810 	msr	PRIMASK, r3
}
 8007c9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca2:	e0dd      	b.n	8007e60 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007ca4:	4b72      	ldr	r3, [pc, #456]	; (8007e70 <_tx_byte_pool_search+0x214>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cae:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8007cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a68      	ldr	r2, [pc, #416]	; (8007e74 <_tx_byte_pool_search+0x218>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d143      	bne.n	8007d5e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8007cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ce0:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce8:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8007cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8007cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfa:	3b08      	subs	r3, #8
 8007cfc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8007cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d257      	bcs.n	8007db6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8007d06:	2300      	movs	r3, #0
 8007d08:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8007d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a56      	ldr	r2, [pc, #344]	; (8007e74 <_tx_byte_pool_search+0x218>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d113      	bne.n	8007d46 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d114      	bne.n	8007d68 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d42:	615a      	str	r2, [r3, #20]
 8007d44:	e010      	b.n	8007d68 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8007d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8007d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d5c:	e004      	b.n	8007d68 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d60:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8007d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8007d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d70:	3b01      	subs	r3, #1
 8007d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d76:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f383 8810 	msr	PRIMASK, r3
}
 8007d7e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d80:	f3ef 8310 	mrs	r3, PRIMASK
 8007d84:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007d86:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007d88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007d8a:	b672      	cpsid	i
    return(int_posture);
 8007d8c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8007d8e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d009      	beq.n	8007dae <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	3301      	adds	r3, #1
 8007da6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dac:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8007dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d186      	bne.n	8007cc2 <_tx_byte_pool_search+0x66>
 8007db4:	e000      	b.n	8007db8 <_tx_byte_pool_search+0x15c>
                    break;
 8007db6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d048      	beq.n	8007e50 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8007dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b13      	cmp	r3, #19
 8007dc6:	d91e      	bls.n	8007e06 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dce:	4413      	add	r3, r2
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd8:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	3304      	adds	r3, #4
 8007de6:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <_tx_byte_pool_search+0x218>)
 8007df0:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e00:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8007e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e08:	3304      	adds	r3, #4
 8007e0a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f1a3 0208 	sub.w	r2, r3, #8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d105      	bne.n	8007e3c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e32:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	615a      	str	r2, [r3, #20]
 8007e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f383 8810 	msr	PRIMASK, r3
}
 8007e46:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8007e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e4e:	e007      	b.n	8007e60 <_tx_byte_pool_search+0x204>
 8007e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e52:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f383 8810 	msr	PRIMASK, r3
}
 8007e5a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8007e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	375c      	adds	r7, #92	; 0x5c
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	200034fc 	.word	0x200034fc
 8007e74:	ffffeeee 	.word	0xffffeeee

08007e78 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8007e7c:	f001 fe6c 	bl	8009b58 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8007e80:	f002 fa74 	bl	800a36c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8007e84:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <_tx_initialize_high_level+0x58>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <_tx_initialize_high_level+0x5c>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <_tx_initialize_high_level+0x60>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	4b11      	ldr	r3, [pc, #68]	; (8007edc <_tx_initialize_high_level+0x64>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <_tx_initialize_high_level+0x68>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <_tx_initialize_high_level+0x6c>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <_tx_initialize_high_level+0x70>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <_tx_initialize_high_level+0x74>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <_tx_initialize_high_level+0x78>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <_tx_initialize_high_level+0x7c>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <_tx_initialize_high_level+0x80>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <_tx_initialize_high_level+0x84>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
#endif
}
 8007ecc:	bf00      	nop
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	200034c4 	.word	0x200034c4
 8007ed4:	200034c8 	.word	0x200034c8
 8007ed8:	200034cc 	.word	0x200034cc
 8007edc:	200034d0 	.word	0x200034d0
 8007ee0:	200034d4 	.word	0x200034d4
 8007ee4:	200034d8 	.word	0x200034d8
 8007ee8:	200034e4 	.word	0x200034e4
 8007eec:	200034e8 	.word	0x200034e8
 8007ef0:	200034ec 	.word	0x200034ec
 8007ef4:	200034f0 	.word	0x200034f0
 8007ef8:	200034dc 	.word	0x200034dc
 8007efc:	200034e0 	.word	0x200034e0

08007f00 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007f04:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <_tx_initialize_kernel_enter+0x48>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8007f0c:	d00c      	beq.n	8007f28 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <_tx_initialize_kernel_enter+0x48>)
 8007f10:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007f14:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8007f16:	f7f8 f983 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8007f1a:	f7ff ffad 	bl	8007e78 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8007f1e:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <_tx_initialize_kernel_enter+0x4c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <_tx_initialize_kernel_enter+0x4c>)
 8007f26:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <_tx_initialize_kernel_enter+0x48>)
 8007f2a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007f2e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <_tx_initialize_kernel_enter+0x50>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7f8 fc15 	bl	8000764 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8007f3a:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <_tx_initialize_kernel_enter+0x48>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8007f40:	f7f8 f9ae 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	2000000c 	.word	0x2000000c
 8007f4c:	20003594 	.word	0x20003594
 8007f50:	200034f4 	.word	0x200034f4

08007f54 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f62:	623b      	str	r3, [r7, #32]
    return(posture);
 8007f64:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007f66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f68:	b672      	cpsid	i
    return(int_posture);
 8007f6a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f72:	4a33      	ldr	r2, [pc, #204]	; (8008040 <_tx_mutex_cleanup+0xec>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d158      	bne.n	800802a <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d152      	bne.n	800802a <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d04c      	beq.n	800802a <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a2b      	ldr	r2, [pc, #172]	; (8008044 <_tx_mutex_cleanup+0xf0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d147      	bne.n	800802a <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d043      	beq.n	800802a <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	619a      	str	r2, [r3, #24]
 8007fc4:	e013      	b.n	8007fee <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fdc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d102      	bne.n	8007fee <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fec:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	2b0d      	cmp	r3, #13
 8007ff4:	d119      	bne.n	800802a <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	221d      	movs	r2, #29
 8007ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <_tx_mutex_cleanup+0xf4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	4a10      	ldr	r2, [pc, #64]	; (8008048 <_tx_mutex_cleanup+0xf4>)
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f383 8810 	msr	PRIMASK, r3
}
 8008012:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fee1 	bl	8009ddc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800801a:	f3ef 8310 	mrs	r3, PRIMASK
 800801e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008020:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008022:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008024:	b672      	cpsid	i
    return(int_posture);
 8008026:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f383 8810 	msr	PRIMASK, r3
}
 8008034:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008036:	bf00      	nop
 8008038:	3738      	adds	r7, #56	; 0x38
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	08007f55 	.word	0x08007f55
 8008044:	4d555445 	.word	0x4d555445
 8008048:	20003594 	.word	0x20003594

0800804c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	; 0x28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008054:	f3ef 8310 	mrs	r3, PRIMASK
 8008058:	61fb      	str	r3, [r7, #28]
    return(posture);
 800805a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800805c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800805e:	b672      	cpsid	i
    return(int_posture);
 8008060:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8008062:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008064:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <_tx_mutex_thread_release+0x84>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <_tx_mutex_thread_release+0x84>)
 800806c:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008074:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d017      	beq.n	80080ac <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	2201      	movs	r2, #1
 8008080:	609a      	str	r2, [r3, #8]
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f383 8810 	msr	PRIMASK, r3
}
 800808c:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800808e:	6a38      	ldr	r0, [r7, #32]
 8008090:	f000 fb9c 	bl	80087cc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008094:	f3ef 8310 	mrs	r3, PRIMASK
 8008098:	617b      	str	r3, [r7, #20]
    return(posture);
 800809a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800809c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800809e:	b672      	cpsid	i
    return(int_posture);
 80080a0:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080aa:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1dd      	bne.n	800806e <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80080b2:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <_tx_mutex_thread_release+0x84>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4a05      	ldr	r2, [pc, #20]	; (80080d0 <_tx_mutex_thread_release+0x84>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f383 8810 	msr	PRIMASK, r3
}
 80080c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80080c8:	bf00      	nop
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20003594 	.word	0x20003594

080080d4 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	; 0x28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80080e0:	2234      	movs	r2, #52	; 0x34
 80080e2:	2100      	movs	r1, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f007 fe31 	bl	800fd4c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080f6:	f3ef 8310 	mrs	r3, PRIMASK
 80080fa:	61bb      	str	r3, [r7, #24]
    return(posture);
 80080fc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80080fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008100:	b672      	cpsid	i
    return(int_posture);
 8008102:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8008104:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a1a      	ldr	r2, [pc, #104]	; (8008174 <_tx_mutex_create+0xa0>)
 800810a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800810c:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <_tx_mutex_create+0xa4>)
 800810e:	4a1b      	ldr	r2, [pc, #108]	; (800817c <_tx_mutex_create+0xa8>)
 8008110:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8008112:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <_tx_mutex_create+0xac>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800811a:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <_tx_mutex_create+0xb0>)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	625a      	str	r2, [r3, #36]	; 0x24
 800812c:	e011      	b.n	8008152 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800812e:	4b15      	ldr	r3, [pc, #84]	; (8008184 <_tx_mutex_create+0xb0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a3a      	ldr	r2, [r7, #32]
 8008150:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <_tx_mutex_create+0xac>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <_tx_mutex_create+0xac>)
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f383 8810 	msr	PRIMASK, r3
}
 8008166:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3728      	adds	r7, #40	; 0x28
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	4d555445 	.word	0x4d555445
 8008178:	20003598 	.word	0x20003598
 800817c:	0800804d 	.word	0x0800804d
 8008180:	200034e0 	.word	0x200034e0
 8008184:	200034dc 	.word	0x200034dc

08008188 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b096      	sub	sp, #88	; 0x58
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008190:	f3ef 8310 	mrs	r3, PRIMASK
 8008194:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800819a:	b672      	cpsid	i
    return(int_posture);
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800819e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 80081a6:	4b4a      	ldr	r3, [pc, #296]	; (80082d0 <_tx_mutex_delete+0x148>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a48      	ldr	r2, [pc, #288]	; (80082d0 <_tx_mutex_delete+0x148>)
 80081ae:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80081b0:	4b47      	ldr	r3, [pc, #284]	; (80082d0 <_tx_mutex_delete+0x148>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 80081b8:	4b46      	ldr	r3, [pc, #280]	; (80082d4 <_tx_mutex_delete+0x14c>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e013      	b.n	80081e8 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 80081cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80081d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081d6:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 80081d8:	4b3e      	ldr	r3, [pc, #248]	; (80082d4 <_tx_mutex_delete+0x14c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d102      	bne.n	80081e8 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 80081e2:	4a3c      	ldr	r2, [pc, #240]	; (80082d4 <_tx_mutex_delete+0x14c>)
 80081e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80081e8:	4b3b      	ldr	r3, [pc, #236]	; (80082d8 <_tx_mutex_delete+0x150>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	4a3a      	ldr	r2, [pc, #232]	; (80082d8 <_tx_mutex_delete+0x150>)
 80081f0:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8008210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d013      	beq.n	800823e <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 facf 	bl	80087cc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800822e:	f3ef 8310 	mrs	r3, PRIMASK
 8008232:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008238:	b672      	cpsid	i
    return(int_posture);
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800823c:	657b      	str	r3, [r7, #84]	; 0x54
 800823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	f383 8810 	msr	PRIMASK, r3
}
 8008248:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800824a:	e024      	b.n	8008296 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824e:	3b01      	subs	r3, #1
 8008250:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008252:	f3ef 8310 	mrs	r3, PRIMASK
 8008256:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008258:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800825a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800825c:	b672      	cpsid	i
    return(int_posture);
 800825e:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8008260:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008264:	2200      	movs	r2, #0
 8008266:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8008268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826a:	2201      	movs	r2, #1
 800826c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8008270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <_tx_mutex_delete+0x150>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3301      	adds	r3, #1
 800827c:	4a16      	ldr	r2, [pc, #88]	; (80082d8 <_tx_mutex_delete+0x150>)
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008282:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	f383 8810 	msr	PRIMASK, r3
}
 800828a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800828c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800828e:	f001 fda5 	bl	8009ddc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8008292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008294:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8008296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1d7      	bne.n	800824c <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800829c:	f3ef 8310 	mrs	r3, PRIMASK
 80082a0:	613b      	str	r3, [r7, #16]
    return(posture);
 80082a2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80082a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80082a6:	b672      	cpsid	i
    return(int_posture);
 80082a8:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <_tx_mutex_delete+0x150>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <_tx_mutex_delete+0x150>)
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f383 8810 	msr	PRIMASK, r3
}
 80082c0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80082c2:	f001 fd51 	bl	8009d68 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3758      	adds	r7, #88	; 0x58
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	200034e0 	.word	0x200034e0
 80082d4:	200034dc 	.word	0x200034dc
 80082d8:	20003594 	.word	0x20003594

080082dc <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b092      	sub	sp, #72	; 0x48
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80082e6:	f3ef 8310 	mrs	r3, PRIMASK
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80082ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80082f0:	b672      	cpsid	i
    return(int_posture);
 80082f2:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80082f4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80082f6:	4b7a      	ldr	r3, [pc, #488]	; (80084e0 <_tx_mutex_get+0x204>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d144      	bne.n	800838e <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800830e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d032      	beq.n	800837c <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d106      	bne.n	800832c <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800831e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00f      	beq.n	800835a <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c
 8008358:	e009      	b.n	800836e <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800835a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800836e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800837c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800837e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f383 8810 	msr	PRIMASK, r3
}
 8008386:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8008388:	2300      	movs	r3, #0
 800838a:	647b      	str	r3, [r7, #68]	; 0x44
 800838c:	e0a2      	b.n	80084d4 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008394:	429a      	cmp	r2, r3
 8008396:	d10d      	bne.n	80083b4 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	609a      	str	r2, [r3, #8]
 80083a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	f383 8810 	msr	PRIMASK, r3
}
 80083ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80083ae:	2300      	movs	r3, #0
 80083b0:	647b      	str	r3, [r7, #68]	; 0x44
 80083b2:	e08f      	b.n	80084d4 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8084 	beq.w	80084c4 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80083bc:	4b49      	ldr	r3, [pc, #292]	; (80084e4 <_tx_mutex_get+0x208>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d008      	beq.n	80083d6 <_tx_mutex_get+0xfa>
 80083c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f383 8810 	msr	PRIMASK, r3
}
 80083ce:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80083d0:	231d      	movs	r3, #29
 80083d2:	647b      	str	r3, [r7, #68]	; 0x44
 80083d4:	e07e      	b.n	80084d4 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80083dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083de:	4a42      	ldr	r2, [pc, #264]	; (80084e8 <_tx_mutex_get+0x20c>)
 80083e0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80083e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008402:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008408:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800840a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800840e:	675a      	str	r2, [r3, #116]	; 0x74
 8008410:	e011      	b.n	8008436 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800841c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008422:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008428:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800842e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008434:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8008440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008442:	220d      	movs	r2, #13
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008448:	2201      	movs	r2, #1
 800844a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800844c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <_tx_mutex_get+0x208>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	4a22      	ldr	r2, [pc, #136]	; (80084e4 <_tx_mutex_get+0x208>)
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f383 8810 	msr	PRIMASK, r3
}
 8008466:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d121      	bne.n	80084b4 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	429a      	cmp	r2, r3
 800847a:	d903      	bls.n	8008484 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800847c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800848e:	429a      	cmp	r2, r3
 8008490:	d204      	bcs.n	800849c <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d905      	bls.n	80084b4 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80084a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4619      	mov	r1, r3
 80084ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084b0:	f000 f8ce 	bl	8008650 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80084b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80084b6:	f001 fd91 	bl	8009fdc <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80084ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c0:	647b      	str	r3, [r7, #68]	; 0x44
 80084c2:	e007      	b.n	80084d4 <_tx_mutex_get+0x1f8>
 80084c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f383 8810 	msr	PRIMASK, r3
}
 80084ce:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80084d0:	231d      	movs	r3, #29
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3748      	adds	r7, #72	; 0x48
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200034fc 	.word	0x200034fc
 80084e4:	20003594 	.word	0x20003594
 80084e8:	08007f55 	.word	0x08007f55

080084ec <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b092      	sub	sp, #72	; 0x48
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084f4:	f3ef 8310 	mrs	r3, PRIMASK
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80084fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80084fe:	b672      	cpsid	i
    return(int_posture);
 8008500:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8008502:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	2b01      	cmp	r3, #1
 800850e:	d805      	bhi.n	800851c <_tx_mutex_prioritize+0x30>
 8008510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008512:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f383 8810 	msr	PRIMASK, r3
}
 800851a:	e092      	b.n	8008642 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800851c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851e:	2b02      	cmp	r3, #2
 8008520:	d114      	bne.n	800854c <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	429a      	cmp	r2, r3
 8008538:	d202      	bcs.n	8008540 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853e:	619a      	str	r2, [r3, #24]
 8008540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008542:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	f383 8810 	msr	PRIMASK, r3
}
 800854a:	e07a      	b.n	8008642 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8008556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855a:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800855c:	4b3b      	ldr	r3, [pc, #236]	; (800864c <_tx_mutex_prioritize+0x160>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a3a      	ldr	r2, [pc, #232]	; (800864c <_tx_mutex_prioritize+0x160>)
 8008564:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8008566:	2300      	movs	r3, #0
 8008568:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800856a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d201      	bcs.n	800857a <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8008576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f383 8810 	msr	PRIMASK, r3
}
 8008584:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008586:	f3ef 8310 	mrs	r3, PRIMASK
 800858a:	617b      	str	r3, [r7, #20]
    return(posture);
 800858c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800858e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008590:	b672      	cpsid	i
    return(int_posture);
 8008592:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8008594:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800859c:	429a      	cmp	r2, r3
 800859e:	d002      	beq.n	80085a6 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	633b      	str	r3, [r7, #48]	; 0x30
 80085a4:	e006      	b.n	80085b4 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d103      	bne.n	80085c2 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80085ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085be:	643b      	str	r3, [r7, #64]	; 0x40
 80085c0:	e00c      	b.n	80085dc <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80085d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 80085dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d1c2      	bne.n	800856a <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80085e4:	4b19      	ldr	r3, [pc, #100]	; (800864c <_tx_mutex_prioritize+0x160>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	4a18      	ldr	r2, [pc, #96]	; (800864c <_tx_mutex_prioritize+0x160>)
 80085ec:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80085ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d01d      	beq.n	8008632 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80085f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80085fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008606:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800860c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8008614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008618:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800861e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008624:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800862a:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008630:	619a      	str	r2, [r3, #24]
 8008632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008634:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f383 8810 	msr	PRIMASK, r3
}
 800863c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800863e:	f001 fb93 	bl	8009d68 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8008642:	2300      	movs	r3, #0
#endif
}
 8008644:	4618      	mov	r0, r3
 8008646:	3748      	adds	r7, #72	; 0x48
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20003594 	.word	0x20003594

08008650 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b090      	sub	sp, #64	; 0x40
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800865a:	f3ef 8310 	mrs	r3, PRIMASK
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008664:	b672      	cpsid	i
    return(int_posture);
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008668:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	2b00      	cmp	r3, #0
 8008670:	d017      	beq.n	80086a2 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d905      	bls.n	8008690 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	63da      	str	r2, [r3, #60]	; 0x3c
 800868e:	e002      	b.n	8008696 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	63da      	str	r2, [r3, #60]	; 0x3c
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	f383 8810 	msr	PRIMASK, r3
}
 80086a0:	e089      	b.n	80087b6 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80086a2:	4b47      	ldr	r3, [pc, #284]	; (80087c0 <_tx_mutex_priority_change+0x170>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80086ae:	4b45      	ldr	r3, [pc, #276]	; (80087c4 <_tx_mutex_priority_change+0x174>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3302      	adds	r3, #2
 80086b4:	4a43      	ldr	r2, [pc, #268]	; (80087c4 <_tx_mutex_priority_change+0x174>)
 80086b6:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	220e      	movs	r2, #14
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80086ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086cc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f383 8810 	msr	PRIMASK, r3
}
 80086d4:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fc80 	bl	8009fdc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086dc:	f3ef 8310 	mrs	r3, PRIMASK
 80086e0:	623b      	str	r3, [r7, #32]
    return(posture);
 80086e2:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80086e4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80086e6:	b672      	cpsid	i
    return(int_posture);
 80086e8:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d905      	bls.n	800870a <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	63da      	str	r2, [r3, #60]	; 0x3c
 8008708:	e002      	b.n	8008710 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f383 8810 	msr	PRIMASK, r3
}
 800871a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fb5d 	bl	8009ddc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008722:	f3ef 8310 	mrs	r3, PRIMASK
 8008726:	617b      	str	r3, [r7, #20]
    return(posture);
 8008728:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800872a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800872c:	b672      	cpsid	i
    return(int_posture);
 800872e:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <_tx_mutex_priority_change+0x170>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	429a      	cmp	r2, r3
 800873e:	d034      	beq.n	80087aa <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008744:	2b00      	cmp	r3, #0
 8008746:	d130      	bne.n	80087aa <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	429a      	cmp	r2, r3
 8008752:	d811      	bhi.n	8008778 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	429a      	cmp	r2, r3
 800875a:	d126      	bne.n	80087aa <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800875c:	4a18      	ldr	r2, [pc, #96]	; (80087c0 <_tx_mutex_priority_change+0x170>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8008762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d21f      	bcs.n	80087aa <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	4916      	ldr	r1, [pc, #88]	; (80087c8 <_tx_mutex_priority_change+0x178>)
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008776:	e018      	b.n	80087aa <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	429a      	cmp	r2, r3
 8008782:	d212      	bcs.n	80087aa <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d80c      	bhi.n	80087aa <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008790:	4a0b      	ldr	r2, [pc, #44]	; (80087c0 <_tx_mutex_priority_change+0x170>)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8008796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d205      	bcs.n	80087aa <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4909      	ldr	r1, [pc, #36]	; (80087c8 <_tx_mutex_priority_change+0x178>)
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80087aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f383 8810 	msr	PRIMASK, r3
}
 80087b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80087b6:	bf00      	nop
 80087b8:	3740      	adds	r7, #64	; 0x40
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20003500 	.word	0x20003500
 80087c4:	20003594 	.word	0x20003594
 80087c8:	20003514 	.word	0x20003514

080087cc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b0a6      	sub	sp, #152	; 0x98
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80087d4:	2320      	movs	r3, #32
 80087d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087da:	f3ef 8310 	mrs	r3, PRIMASK
 80087de:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 80087e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 80087e2:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 80087e4:	b672      	cpsid	i
    return(int_posture);
 80087e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80087e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 81ff 	beq.w	8008bf4 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80087fc:	4ba3      	ldr	r3, [pc, #652]	; (8008a8c <_tx_mutex_put+0x2c0>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008808:	429a      	cmp	r2, r3
 800880a:	d00d      	beq.n	8008828 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800880c:	4ba0      	ldr	r3, [pc, #640]	; (8008a90 <_tx_mutex_put+0x2c4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d109      	bne.n	8008828 <_tx_mutex_put+0x5c>
 8008814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008818:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800881a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881c:	f383 8810 	msr	PRIMASK, r3
}
 8008820:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8008822:	231e      	movs	r3, #30
 8008824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8008828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800882c:	2b20      	cmp	r3, #32
 800882e:	f040 81eb 	bne.w	8008c08 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	1e5a      	subs	r2, r3, #1
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <_tx_mutex_put+0x8e>
 8008844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008848:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800884a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800884c:	f383 8810 	msr	PRIMASK, r3
}
 8008850:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8008852:	2300      	movs	r3, #0
 8008854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008858:	e1d6      	b.n	8008c08 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800885a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <_tx_mutex_put+0xaa>
 8008860:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008864:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008868:	f383 8810 	msr	PRIMASK, r3
}
 800886c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800886e:	2300      	movs	r3, #0
 8008870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008874:	e1c8      	b.n	8008c08 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8008876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800887c:	1e5a      	subs	r2, r3, #1
 800887e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008880:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8008884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008886:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800888e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8008896:	e019      	b.n	80088cc <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80088a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80088ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088b4:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80088b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d104      	bne.n	80088cc <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80088c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d110      	bne.n	80088f6 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10c      	bne.n	80088f6 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088e6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ea:	f383 8810 	msr	PRIMASK, r3
}
 80088ee:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80088f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	f040 8184 	bne.w	8008c08 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8008906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800890c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d155      	bne.n	80089c4 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008918:	4b5d      	ldr	r3, [pc, #372]	; (8008a90 <_tx_mutex_put+0x2c4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3301      	adds	r3, #1
 800891e:	4a5c      	ldr	r2, [pc, #368]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008926:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800892a:	f383 8810 	msr	PRIMASK, r3
}
 800892e:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008930:	2320      	movs	r3, #32
 8008932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8008936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800893c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8008940:	e01f      	b.n	8008982 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8008942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d10b      	bne.n	8008964 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800894c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008956:	429a      	cmp	r2, r3
 8008958:	d904      	bls.n	8008964 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800895a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8008964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800896e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008970:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008974:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008978:	429a      	cmp	r2, r3
 800897a:	d102      	bne.n	8008982 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8008982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1db      	bne.n	8008942 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800898a:	f3ef 8310 	mrs	r3, PRIMASK
 800898e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8008990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008994:	b672      	cpsid	i
    return(int_posture);
 8008996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008998:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800899c:	4b3c      	ldr	r3, [pc, #240]	; (8008a90 <_tx_mutex_put+0x2c4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	4a3b      	ldr	r2, [pc, #236]	; (8008a90 <_tx_mutex_put+0x2c4>)
 80089a4:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 80089a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 80089b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d203      	bcs.n	80089c4 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 80089bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d920      	bls.n	8008a0e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d11c      	bne.n	8008a0e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80089d4:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <_tx_mutex_put+0x2c4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	4a2d      	ldr	r2, [pc, #180]	; (8008a90 <_tx_mutex_put+0x2c4>)
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089e2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fd7d 	bl	80084ec <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089f2:	f3ef 8310 	mrs	r3, PRIMASK
 80089f6:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80089fc:	b672      	cpsid	i
    return(int_posture);
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8008a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8008a04:	4b22      	ldr	r3, [pc, #136]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	4a21      	ldr	r2, [pc, #132]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008a0c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d13e      	bne.n	8008a94 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008a16:	4b1e      	ldr	r3, [pc, #120]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	4a1c      	ldr	r2, [pc, #112]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	f383 8810 	msr	PRIMASK, r3
}
 8008a2c:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2220      	movs	r2, #32
 8008a32:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d006      	beq.n	8008a50 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fe00 	bl	8008650 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a50:	f3ef 8310 	mrs	r3, PRIMASK
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008a58:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a5a:	b672      	cpsid	i
    return(int_posture);
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8008a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <_tx_mutex_put+0x2c4>)
 8008a6a:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	f383 8810 	msr	PRIMASK, r3
}
 8008a7e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8008a80:	f001 f972 	bl	8009d68 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a8a:	e0bd      	b.n	8008c08 <_tx_mutex_put+0x43c>
 8008a8c:	200034fc 	.word	0x200034fc
 8008a90:	20003594 	.word	0x20003594
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d10a      	bne.n	8008ab8 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8008ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008abe:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8008ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8008ac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8008ada:	e016      	b.n	8008b0a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8008adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8008ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8008af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b08:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8008b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b1e:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	1e5a      	subs	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	619a      	str	r2, [r3, #24]
 8008b3c:	e00e      	b.n	8008b5c <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8008b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b42:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b48:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008b4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b4e:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b54:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8008b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b5a:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b5e:	2200      	movs	r2, #0
 8008b60:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008b6a:	4b2a      	ldr	r3, [pc, #168]	; (8008c14 <_tx_mutex_put+0x448>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	4a28      	ldr	r2, [pc, #160]	; (8008c14 <_tx_mutex_put+0x448>)
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f383 8810 	msr	PRIMASK, r3
}
 8008b80:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d12d      	bne.n	8008be6 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01c      	beq.n	8008bcc <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fcaa 	bl	80084ec <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b98:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008ba0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ba2:	b672      	cpsid	i
    return(int_posture);
 8008ba4:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8008ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8008bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8008bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8008bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bc2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f383 8810 	msr	PRIMASK, r3
}
 8008bca:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8008bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d005      	beq.n	8008be6 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8008bda:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008bde:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008be2:	f7ff fd35 	bl	8008650 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8008be6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008be8:	f001 f8f8 	bl	8009ddc <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bf2:	e009      	b.n	8008c08 <_tx_mutex_put+0x43c>
 8008bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bf8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f383 8810 	msr	PRIMASK, r3
}
 8008c00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8008c02:	231e      	movs	r3, #30
 8008c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8008c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3798      	adds	r7, #152	; 0x98
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20003594 	.word	0x20003594

08008c18 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08e      	sub	sp, #56	; 0x38
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c22:	f3ef 8310 	mrs	r3, PRIMASK
 8008c26:	623b      	str	r3, [r7, #32]
    return(posture);
 8008c28:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008c2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c2c:	b672      	cpsid	i
    return(int_posture);
 8008c2e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c36:	4a37      	ldr	r2, [pc, #220]	; (8008d14 <_tx_queue_cleanup+0xfc>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d161      	bne.n	8008d00 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d15b      	bne.n	8008d00 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d055      	beq.n	8008d00 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2f      	ldr	r2, [pc, #188]	; (8008d18 <_tx_queue_cleanup+0x100>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d150      	bne.n	8008d00 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d04c      	beq.n	8008d00 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	1e5a      	subs	r2, r3, #1
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	2200      	movs	r2, #0
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28
 8008c88:	e013      	b.n	8008cb2 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ca0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d102      	bne.n	8008cb2 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb0:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d122      	bne.n	8008d00 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d004      	beq.n	8008ccc <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	220b      	movs	r2, #11
 8008cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008cca:	e003      	b.n	8008cd4 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	220a      	movs	r2, #10
 8008cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <_tx_queue_cleanup+0x104>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	4a10      	ldr	r2, [pc, #64]	; (8008d1c <_tx_queue_cleanup+0x104>)
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f383 8810 	msr	PRIMASK, r3
}
 8008ce8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 f876 	bl	8009ddc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8008cf4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008cf6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008cf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008cfa:	b672      	cpsid	i
    return(int_posture);
 8008cfc:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f383 8810 	msr	PRIMASK, r3
}
 8008d0a:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008d0c:	bf00      	nop
 8008d0e:	3738      	adds	r7, #56	; 0x38
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	08008c19 	.word	0x08008c19
 8008d18:	51554555 	.word	0x51554555
 8008d1c:	20003594 	.word	0x20003594

08008d20 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08c      	sub	sp, #48	; 0x30
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8008d2e:	2238      	movs	r2, #56	; 0x38
 8008d30:	2100      	movs	r1, #0
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f007 f80a 	bl	800fd4c <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	441a      	add	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d7e:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d84:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d86:	f3ef 8310 	mrs	r3, PRIMASK
 8008d8a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008d8c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008d8e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d90:	b672      	cpsid	i
    return(int_posture);
 8008d92:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <_tx_queue_create+0xdc>)
 8008d9a:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8008d9c:	4b18      	ldr	r3, [pc, #96]	; (8008e00 <_tx_queue_create+0xe0>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d109      	bne.n	8008db8 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8008da4:	4a17      	ldr	r2, [pc, #92]	; (8008e04 <_tx_queue_create+0xe4>)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	635a      	str	r2, [r3, #52]	; 0x34
 8008db6:	e011      	b.n	8008ddc <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8008db8:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <_tx_queue_create+0xe4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a3a      	ldr	r2, [r7, #32]
 8008dda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8008ddc:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <_tx_queue_create+0xe0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3301      	adds	r3, #1
 8008de2:	4a07      	ldr	r2, [pc, #28]	; (8008e00 <_tx_queue_create+0xe0>)
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f383 8810 	msr	PRIMASK, r3
}
 8008df0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3730      	adds	r7, #48	; 0x30
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	51554555 	.word	0x51554555
 8008e00:	200034d0 	.word	0x200034d0
 8008e04:	200034cc 	.word	0x200034cc

08008e08 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b096      	sub	sp, #88	; 0x58
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008e14:	2300      	movs	r3, #0
 8008e16:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e18:	f3ef 8310 	mrs	r3, PRIMASK
 8008e1c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8008e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e22:	b672      	cpsid	i
    return(int_posture);
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8008e26:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8136 	beq.w	80090a4 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8008e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d13c      	bne.n	8008eb8 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008e4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e50:	1d13      	adds	r3, r2, #4
 8008e52:	657b      	str	r3, [r7, #84]	; 0x54
 8008e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e56:	1d19      	adds	r1, r3, #4
 8008e58:	6539      	str	r1, [r7, #80]	; 0x50
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d90e      	bls.n	8008e82 <_tx_queue_receive+0x7a>
 8008e64:	e007      	b.n	8008e76 <_tx_queue_receive+0x6e>
 8008e66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e68:	1d13      	adds	r3, r2, #4
 8008e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6e:	1d19      	adds	r1, r3, #4
 8008e70:	6539      	str	r1, [r7, #80]	; 0x50
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f1      	bne.n	8008e66 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d102      	bne.n	8008e92 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e96:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
 8008eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	f383 8810 	msr	PRIMASK, r3
}
 8008eb6:	e163      	b.n	8009180 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d153      	bne.n	8008f70 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8008ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ecc:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008eda:	1d13      	adds	r3, r2, #4
 8008edc:	657b      	str	r3, [r7, #84]	; 0x54
 8008ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee0:	1d19      	adds	r1, r3, #4
 8008ee2:	6539      	str	r1, [r7, #80]	; 0x50
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d90e      	bls.n	8008f0c <_tx_queue_receive+0x104>
 8008eee:	e007      	b.n	8008f00 <_tx_queue_receive+0xf8>
 8008ef0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ef2:	1d13      	adds	r3, r2, #4
 8008ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef8:	1d19      	adds	r1, r3, #4
 8008efa:	6539      	str	r1, [r7, #80]	; 0x50
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	3b01      	subs	r3, #1
 8008f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f1      	bne.n	8008ef0 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8008f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d103      	bne.n	8008f20 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
 8008f1e:	e00e      	b.n	8008f3e <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8008f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f24:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f2a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f36:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8008f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f46:	2200      	movs	r2, #0
 8008f48:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008f52:	4b8e      	ldr	r3, [pc, #568]	; (800918c <_tx_queue_receive+0x384>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	4a8c      	ldr	r2, [pc, #560]	; (800918c <_tx_queue_receive+0x384>)
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	f383 8810 	msr	PRIMASK, r3
}
 8008f66:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8008f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f6a:	f000 ff37 	bl	8009ddc <_tx_thread_system_resume>
 8008f6e:	e107      	b.n	8009180 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f82:	1d13      	adds	r3, r2, #4
 8008f84:	657b      	str	r3, [r7, #84]	; 0x54
 8008f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	6539      	str	r1, [r7, #80]	; 0x50
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d90e      	bls.n	8008fb4 <_tx_queue_receive+0x1ac>
 8008f96:	e007      	b.n	8008fa8 <_tx_queue_receive+0x1a0>
 8008f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f9a:	1d13      	adds	r3, r2, #4
 8008f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa0:	1d19      	adds	r1, r3, #4
 8008fa2:	6539      	str	r1, [r7, #80]	; 0x50
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008faa:	3b01      	subs	r3, #1
 8008fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f1      	bne.n	8008f98 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d102      	bne.n	8008fc4 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fc8:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8008fca:	4b70      	ldr	r3, [pc, #448]	; (800918c <_tx_queue_receive+0x384>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	4a6e      	ldr	r2, [pc, #440]	; (800918c <_tx_queue_receive+0x384>)
 8008fd2:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8008fd4:	4b6d      	ldr	r3, [pc, #436]	; (800918c <_tx_queue_receive+0x384>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	4a6c      	ldr	r2, [pc, #432]	; (800918c <_tx_queue_receive+0x384>)
 8008fdc:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe2:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ff2:	1d13      	adds	r3, r2, #4
 8008ff4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff8:	1d19      	adds	r1, r3, #4
 8008ffa:	6539      	str	r1, [r7, #80]	; 0x50
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	2b01      	cmp	r3, #1
 8009004:	d90e      	bls.n	8009024 <_tx_queue_receive+0x21c>
 8009006:	e007      	b.n	8009018 <_tx_queue_receive+0x210>
 8009008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800900a:	1d13      	adds	r3, r2, #4
 800900c:	657b      	str	r3, [r7, #84]	; 0x54
 800900e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009010:	1d19      	adds	r1, r3, #4
 8009012:	6539      	str	r1, [r7, #80]	; 0x50
 8009014:	6812      	ldr	r2, [r2, #0]
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901a:	3b01      	subs	r3, #1
 800901c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800901e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1f1      	bne.n	8009008 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800902a:	429a      	cmp	r2, r3
 800902c:	d102      	bne.n	8009034 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009038:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8009040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009042:	3b01      	subs	r3, #1
 8009044:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	629a      	str	r2, [r3, #40]	; 0x28
 8009052:	e00e      	b.n	8009072 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009058:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800905e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800906a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009070:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	2200      	movs	r2, #0
 800907c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800907e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009086:	4b41      	ldr	r3, [pc, #260]	; (800918c <_tx_queue_receive+0x384>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a3f      	ldr	r2, [pc, #252]	; (800918c <_tx_queue_receive+0x384>)
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009092:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f383 8810 	msr	PRIMASK, r3
}
 800909a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800909c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800909e:	f000 fe9d 	bl	8009ddc <_tx_thread_system_resume>
 80090a2:	e06d      	b.n	8009180 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d062      	beq.n	8009170 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80090aa:	4b38      	ldr	r3, [pc, #224]	; (800918c <_tx_queue_receive+0x384>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <_tx_queue_receive+0x2bc>
 80090b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	f383 8810 	msr	PRIMASK, r3
}
 80090bc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 80090be:	230a      	movs	r3, #10
 80090c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c2:	e05d      	b.n	8009180 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80090c4:	4b32      	ldr	r3, [pc, #200]	; (8009190 <_tx_queue_receive+0x388>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80090ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090cc:	4a31      	ldr	r2, [pc, #196]	; (8009194 <_tx_queue_receive+0x38c>)
 80090ce:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80090d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 80090d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80090f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090fc:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80090fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009102:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009108:	675a      	str	r2, [r3, #116]	; 0x74
 800910a:	e011      	b.n	8009130 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009110:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009116:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800911c:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800911e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009122:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009128:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800912e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8009130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913a:	2205      	movs	r2, #5
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800913e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009140:	2201      	movs	r2, #1
 8009142:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <_tx_queue_receive+0x384>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3301      	adds	r3, #1
 8009150:	4a0e      	ldr	r2, [pc, #56]	; (800918c <_tx_queue_receive+0x384>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009156:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f383 8810 	msr	PRIMASK, r3
}
 800915e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009160:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009162:	f000 ff3b 	bl	8009fdc <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916c:	64bb      	str	r3, [r7, #72]	; 0x48
 800916e:	e007      	b.n	8009180 <_tx_queue_receive+0x378>
 8009170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009172:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f383 8810 	msr	PRIMASK, r3
}
 800917a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800917c:	230a      	movs	r3, #10
 800917e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8009180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009182:	4618      	mov	r0, r3
 8009184:	3758      	adds	r7, #88	; 0x58
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20003594 	.word	0x20003594
 8009190:	200034fc 	.word	0x200034fc
 8009194:	08008c19 	.word	0x08008c19

08009198 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b094      	sub	sp, #80	; 0x50
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80091a4:	2300      	movs	r3, #0
 80091a6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091a8:	f3ef 8310 	mrs	r3, PRIMASK
 80091ac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80091b2:	b672      	cpsid	i
    return(int_posture);
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 809b 	beq.w	80092fe <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d13c      	bne.n	8009248 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80091f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091f4:	1d13      	adds	r3, r2, #4
 80091f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091fa:	1d19      	adds	r1, r3, #4
 80091fc:	64b9      	str	r1, [r7, #72]	; 0x48
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009204:	2b01      	cmp	r3, #1
 8009206:	d90e      	bls.n	8009226 <_tx_queue_send+0x8e>
 8009208:	e007      	b.n	800921a <_tx_queue_send+0x82>
 800920a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800920c:	1d13      	adds	r3, r2, #4
 800920e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009212:	1d19      	adds	r1, r3, #4
 8009214:	64b9      	str	r1, [r7, #72]	; 0x48
 8009216:	6812      	ldr	r2, [r2, #0]
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800921c:	3b01      	subs	r3, #1
 800921e:	647b      	str	r3, [r7, #68]	; 0x44
 8009220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1f1      	bne.n	800920a <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800922c:	429a      	cmp	r2, r3
 800922e:	d102      	bne.n	8009236 <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800923a:	625a      	str	r2, [r3, #36]	; 0x24
 800923c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	f383 8810 	msr	PRIMASK, r3
}
 8009246:	e0c8      	b.n	80093da <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924c:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	3b01      	subs	r3, #1
 8009252:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	2b00      	cmp	r3, #0
 8009258:	d103      	bne.n	8009262 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	629a      	str	r2, [r3, #40]	; 0x28
 8009260:	e012      	b.n	8009288 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009274:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009280:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009286:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800928c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	2200      	movs	r2, #0
 8009292:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929c:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80092a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a6:	1d13      	adds	r3, r2, #4
 80092a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ac:	1d19      	adds	r1, r3, #4
 80092ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80092b0:	6812      	ldr	r2, [r2, #0]
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d90e      	bls.n	80092d8 <_tx_queue_send+0x140>
 80092ba:	e007      	b.n	80092cc <_tx_queue_send+0x134>
 80092bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092be:	1d13      	adds	r3, r2, #4
 80092c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ce:	3b01      	subs	r3, #1
 80092d0:	647b      	str	r3, [r7, #68]	; 0x44
 80092d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1f1      	bne.n	80092bc <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	2200      	movs	r2, #0
 80092dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80092e0:	4b40      	ldr	r3, [pc, #256]	; (80093e4 <_tx_queue_send+0x24c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a3f      	ldr	r2, [pc, #252]	; (80093e4 <_tx_queue_send+0x24c>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	f383 8810 	msr	PRIMASK, r3
}
 80092f4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80092f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092f8:	f000 fd70 	bl	8009ddc <_tx_thread_system_resume>
 80092fc:	e06d      	b.n	80093da <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d062      	beq.n	80093ca <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009304:	4b37      	ldr	r3, [pc, #220]	; (80093e4 <_tx_queue_send+0x24c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <_tx_queue_send+0x186>
 800930c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f383 8810 	msr	PRIMASK, r3
}
 8009316:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8009318:	230b      	movs	r3, #11
 800931a:	643b      	str	r3, [r7, #64]	; 0x40
 800931c:	e05d      	b.n	80093da <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800931e:	4b32      	ldr	r3, [pc, #200]	; (80093e8 <_tx_queue_send+0x250>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	4a31      	ldr	r2, [pc, #196]	; (80093ec <_tx_queue_send+0x254>)
 8009328:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8009330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8009336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800933e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009356:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800935c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800935e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009362:	675a      	str	r2, [r3, #116]	; 0x74
 8009364:	e011      	b.n	800938a <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800936c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009370:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009382:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009388:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009394:	2205      	movs	r2, #5
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939a:	2201      	movs	r2, #1
 800939c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800939e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80093a4:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <_tx_queue_send+0x24c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	4a0e      	ldr	r2, [pc, #56]	; (80093e4 <_tx_queue_send+0x24c>)
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f383 8810 	msr	PRIMASK, r3
}
 80093b8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80093ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093bc:	f000 fe0e 	bl	8009fdc <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c6:	643b      	str	r3, [r7, #64]	; 0x40
 80093c8:	e007      	b.n	80093da <_tx_queue_send+0x242>
 80093ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f383 8810 	msr	PRIMASK, r3
}
 80093d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80093d6:	230b      	movs	r3, #11
 80093d8:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 80093da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3750      	adds	r7, #80	; 0x50
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20003594 	.word	0x20003594
 80093e8:	200034fc 	.word	0x200034fc
 80093ec:	08008c19 	.word	0x08008c19

080093f0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08e      	sub	sp, #56	; 0x38
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093fa:	f3ef 8310 	mrs	r3, PRIMASK
 80093fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8009400:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009402:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009404:	b672      	cpsid	i
    return(int_posture);
 8009406:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8009408:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940e:	4a33      	ldr	r2, [pc, #204]	; (80094dc <_tx_semaphore_cleanup+0xec>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d158      	bne.n	80094c6 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d152      	bne.n	80094c6 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009424:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	2b00      	cmp	r3, #0
 800942a:	d04c      	beq.n	80094c6 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a2b      	ldr	r2, [pc, #172]	; (80094e0 <_tx_semaphore_cleanup+0xf0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d147      	bne.n	80094c6 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d043      	beq.n	80094c6 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	1e5a      	subs	r2, r3, #1
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d103      	bne.n	8009462 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	2200      	movs	r2, #0
 800945e:	60da      	str	r2, [r3, #12]
 8009460:	e013      	b.n	800948a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009466:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009472:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009478:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d102      	bne.n	800948a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009488:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948e:	2b06      	cmp	r3, #6
 8009490:	d119      	bne.n	80094c6 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	220d      	movs	r2, #13
 8009496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800949a:	4b12      	ldr	r3, [pc, #72]	; (80094e4 <_tx_semaphore_cleanup+0xf4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	4a10      	ldr	r2, [pc, #64]	; (80094e4 <_tx_semaphore_cleanup+0xf4>)
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f383 8810 	msr	PRIMASK, r3
}
 80094ae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fc93 	bl	8009ddc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094b6:	f3ef 8310 	mrs	r3, PRIMASK
 80094ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 80094bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80094be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80094c0:	b672      	cpsid	i
    return(int_posture);
 80094c2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f383 8810 	msr	PRIMASK, r3
}
 80094d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80094d2:	bf00      	nop
 80094d4:	3738      	adds	r7, #56	; 0x38
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	080093f1 	.word	0x080093f1
 80094e0:	53454d41 	.word	0x53454d41
 80094e4:	20003594 	.word	0x20003594

080094e8 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	; 0x28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80094f4:	221c      	movs	r2, #28
 80094f6:	2100      	movs	r1, #0
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f006 fc27 	bl	800fd4c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800950a:	f3ef 8310 	mrs	r3, PRIMASK
 800950e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009510:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009512:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009514:	b672      	cpsid	i
    return(int_posture);
 8009516:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8009518:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a18      	ldr	r2, [pc, #96]	; (8009580 <_tx_semaphore_create+0x98>)
 800951e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009520:	4b18      	ldr	r3, [pc, #96]	; (8009584 <_tx_semaphore_create+0x9c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8009528:	4a17      	ldr	r2, [pc, #92]	; (8009588 <_tx_semaphore_create+0xa0>)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	619a      	str	r2, [r3, #24]
 800953a:	e011      	b.n	8009560 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800953c:	4b12      	ldr	r3, [pc, #72]	; (8009588 <_tx_semaphore_create+0xa0>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a3a      	ldr	r2, [r7, #32]
 800955e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8009560:	4b08      	ldr	r3, [pc, #32]	; (8009584 <_tx_semaphore_create+0x9c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a07      	ldr	r2, [pc, #28]	; (8009584 <_tx_semaphore_create+0x9c>)
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f383 8810 	msr	PRIMASK, r3
}
 8009574:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3728      	adds	r7, #40	; 0x28
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	53454d41 	.word	0x53454d41
 8009584:	200034c8 	.word	0x200034c8
 8009588:	200034c4 	.word	0x200034c4

0800958c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b092      	sub	sp, #72	; 0x48
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009594:	f3ef 8310 	mrs	r3, PRIMASK
 8009598:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800959c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800959e:	b672      	cpsid	i
    return(int_posture);
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80095aa:	4b3d      	ldr	r3, [pc, #244]	; (80096a0 <_tx_semaphore_delete+0x114>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	4a3b      	ldr	r2, [pc, #236]	; (80096a0 <_tx_semaphore_delete+0x114>)
 80095b2:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80095b4:	4b3a      	ldr	r3, [pc, #232]	; (80096a0 <_tx_semaphore_delete+0x114>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d103      	bne.n	80095c4 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80095bc:	4b39      	ldr	r3, [pc, #228]	; (80096a4 <_tx_semaphore_delete+0x118>)
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	e013      	b.n	80095ec <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80095d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095da:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80095dc:	4b31      	ldr	r3, [pc, #196]	; (80096a4 <_tx_semaphore_delete+0x118>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d102      	bne.n	80095ec <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80095e6:	4a2f      	ldr	r2, [pc, #188]	; (80096a4 <_tx_semaphore_delete+0x118>)
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80095ec:	4b2e      	ldr	r3, [pc, #184]	; (80096a8 <_tx_semaphore_delete+0x11c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3301      	adds	r3, #1
 80095f2:	4a2d      	ldr	r2, [pc, #180]	; (80096a8 <_tx_semaphore_delete+0x11c>)
 80095f4:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	611a      	str	r2, [r3, #16]
 800960e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	f383 8810 	msr	PRIMASK, r3
}
 8009618:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800961a:	e024      	b.n	8009666 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800961c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961e:	3b01      	subs	r3, #1
 8009620:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009622:	f3ef 8310 	mrs	r3, PRIMASK
 8009626:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009628:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800962a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800962c:	b672      	cpsid	i
    return(int_posture);
 800962e:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009634:	2200      	movs	r2, #0
 8009636:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8009638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800963a:	2201      	movs	r2, #1
 800963c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8009640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009644:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8009646:	4b18      	ldr	r3, [pc, #96]	; (80096a8 <_tx_semaphore_delete+0x11c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3301      	adds	r3, #1
 800964c:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <_tx_semaphore_delete+0x11c>)
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009652:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	f383 8810 	msr	PRIMASK, r3
}
 800965a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800965c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800965e:	f000 fbbd 	bl	8009ddc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8009666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1d7      	bne.n	800961c <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800966c:	f3ef 8310 	mrs	r3, PRIMASK
 8009670:	613b      	str	r3, [r7, #16]
    return(posture);
 8009672:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009674:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009676:	b672      	cpsid	i
    return(int_posture);
 8009678:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800967c:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <_tx_semaphore_delete+0x11c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3b01      	subs	r3, #1
 8009682:	4a09      	ldr	r2, [pc, #36]	; (80096a8 <_tx_semaphore_delete+0x11c>)
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009688:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f383 8810 	msr	PRIMASK, r3
}
 8009690:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009692:	f000 fb69 	bl	8009d68 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3748      	adds	r7, #72	; 0x48
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200034c8 	.word	0x200034c8
 80096a4:	200034c4 	.word	0x200034c4
 80096a8:	20003594 	.word	0x20003594

080096ac <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08e      	sub	sp, #56	; 0x38
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80096b6:	2300      	movs	r3, #0
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096ba:	f3ef 8310 	mrs	r3, PRIMASK
 80096be:	623b      	str	r3, [r7, #32]
    return(posture);
 80096c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80096c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80096c4:	b672      	cpsid	i
    return(int_posture);
 80096c6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80096c8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	1e5a      	subs	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	609a      	str	r2, [r3, #8]
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f383 8810 	msr	PRIMASK, r3
}
 80096e6:	e068      	b.n	80097ba <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d05d      	beq.n	80097aa <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80096ee:	4b35      	ldr	r3, [pc, #212]	; (80097c4 <_tx_semaphore_get+0x118>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <_tx_semaphore_get+0x5c>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f383 8810 	msr	PRIMASK, r3
}
 8009700:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8009702:	230d      	movs	r3, #13
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
 8009706:	e058      	b.n	80097ba <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009708:	4b2f      	ldr	r3, [pc, #188]	; (80097c8 <_tx_semaphore_get+0x11c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	4a2e      	ldr	r2, [pc, #184]	; (80097cc <_tx_semaphore_get+0x120>)
 8009712:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d109      	bne.n	8009744 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009734:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800973a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009740:	675a      	str	r2, [r3, #116]	; 0x74
 8009742:	e011      	b.n	8009768 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009760:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009766:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	2206      	movs	r2, #6
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	2201      	movs	r2, #1
 800977c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009784:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <_tx_semaphore_get+0x118>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	4a0e      	ldr	r2, [pc, #56]	; (80097c4 <_tx_semaphore_get+0x118>)
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f383 8810 	msr	PRIMASK, r3
}
 8009798:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800979a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800979c:	f000 fc1e 	bl	8009fdc <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
 80097a8:	e007      	b.n	80097ba <_tx_semaphore_get+0x10e>
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f383 8810 	msr	PRIMASK, r3
}
 80097b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80097b6:	230d      	movs	r3, #13
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3738      	adds	r7, #56	; 0x38
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20003594 	.word	0x20003594
 80097c8:	200034fc 	.word	0x200034fc
 80097cc:	080093f1 	.word	0x080093f1

080097d0 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097d8:	f3ef 8310 	mrs	r3, PRIMASK
 80097dc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80097de:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80097e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80097e2:	b672      	cpsid	i
    return(int_posture);
 80097e4:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80097e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	609a      	str	r2, [r3, #8]
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f383 8810 	msr	PRIMASK, r3
}
 8009808:	e033      	b.n	8009872 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	3b01      	subs	r3, #1
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	e00e      	b.n	8009842 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009828:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a3a      	ldr	r2, [r7, #32]
 800982e:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009834:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	6a3a      	ldr	r2, [r7, #32]
 8009840:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009846:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	2200      	movs	r2, #0
 800984c:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009856:	4b09      	ldr	r3, [pc, #36]	; (800987c <_tx_semaphore_put+0xac>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	4a07      	ldr	r2, [pc, #28]	; (800987c <_tx_semaphore_put+0xac>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f383 8810 	msr	PRIMASK, r3
}
 800986a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800986c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800986e:	f000 fab5 	bl	8009ddc <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3730      	adds	r7, #48	; 0x30
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20003594 	.word	0x20003594

08009880 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b092      	sub	sp, #72	; 0x48
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800988e:	2300      	movs	r3, #0
 8009890:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8009892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009894:	21ef      	movs	r1, #239	; 0xef
 8009896:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009898:	f006 fa58 	bl	800fd4c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800989c:	22b0      	movs	r2, #176	; 0xb0
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f006 fa53 	bl	800fd4c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098bc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098c2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098d6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098dc:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80098e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80098ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ec:	3b01      	subs	r3, #1
 80098ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098f0:	4413      	add	r3, r2
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098f8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80098fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098fe:	429a      	cmp	r2, r3
 8009900:	d007      	beq.n	8009912 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009910:	e006      	b.n	8009920 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009916:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800991c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2203      	movs	r2, #3
 8009924:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4a48      	ldr	r2, [pc, #288]	; (8009a4c <_tx_thread_create+0x1cc>)
 800992a:	655a      	str	r2, [r3, #84]	; 0x54
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8009932:	4947      	ldr	r1, [pc, #284]	; (8009a50 <_tx_thread_create+0x1d0>)
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f7f6 fd13 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800993a:	f3ef 8310 	mrs	r3, PRIMASK
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009942:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009944:	b672      	cpsid	i
    return(int_posture);
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4a41      	ldr	r2, [pc, #260]	; (8009a54 <_tx_thread_create+0x1d4>)
 800994e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009950:	4b41      	ldr	r3, [pc, #260]	; (8009a58 <_tx_thread_create+0x1d8>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10b      	bne.n	8009970 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8009958:	4a40      	ldr	r2, [pc, #256]	; (8009a5c <_tx_thread_create+0x1dc>)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800996e:	e016      	b.n	800999e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8009970:	4b3a      	ldr	r3, [pc, #232]	; (8009a5c <_tx_thread_create+0x1dc>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800999e:	4b2e      	ldr	r3, [pc, #184]	; (8009a58 <_tx_thread_create+0x1d8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	4a2c      	ldr	r2, [pc, #176]	; (8009a58 <_tx_thread_create+0x1d8>)
 80099a6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80099a8:	4b2d      	ldr	r3, [pc, #180]	; (8009a60 <_tx_thread_create+0x1e0>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3301      	adds	r3, #1
 80099ae:	4a2c      	ldr	r2, [pc, #176]	; (8009a60 <_tx_thread_create+0x1e0>)
 80099b0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80099b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d129      	bne.n	8009a0c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099b8:	f3ef 8305 	mrs	r3, IPSR
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80099be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80099c0:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <_tx_thread_create+0x1e4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80099ca:	d30d      	bcc.n	80099e8 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80099cc:	4b26      	ldr	r3, [pc, #152]	; (8009a68 <_tx_thread_create+0x1e8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80099d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d009      	beq.n	80099ec <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80099d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099dc:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80099de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80099e6:	e001      	b.n	80099ec <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	647b      	str	r3, [r7, #68]	; 0x44
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	f383 8810 	msr	PRIMASK, r3
}
 80099f6:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f9ef 	bl	8009ddc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80099fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01e      	beq.n	8009a42 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8009a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a08:	63da      	str	r2, [r3, #60]	; 0x3c
 8009a0a:	e01a      	b.n	8009a42 <_tx_thread_create+0x1c2>
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f383 8810 	msr	PRIMASK, r3
}
 8009a16:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a18:	f3ef 8310 	mrs	r3, PRIMASK
 8009a1c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009a1e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009a20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a22:	b672      	cpsid	i
    return(int_posture);
 8009a24:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8009a26:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009a28:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <_tx_thread_create+0x1e0>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <_tx_thread_create+0x1e0>)
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	f383 8810 	msr	PRIMASK, r3
}
 8009a3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009a3e:	f000 f993 	bl	8009d68 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3748      	adds	r7, #72	; 0x48
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	0800a2b1 	.word	0x0800a2b1
 8009a50:	08009bd1 	.word	0x08009bd1
 8009a54:	54485244 	.word	0x54485244
 8009a58:	20003508 	.word	0x20003508
 8009a5c:	20003504 	.word	0x20003504
 8009a60:	20003594 	.word	0x20003594
 8009a64:	2000000c 	.word	0x2000000c
 8009a68:	20003500 	.word	0x20003500

08009a6c <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a72:	f3ef 8310 	mrs	r3, PRIMASK
 8009a76:	60bb      	str	r3, [r7, #8]
    return(posture);
 8009a78:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8009a7a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a7c:	b672      	cpsid	i
    return(int_posture);
 8009a7e:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8009a80:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009a82:	4b08      	ldr	r3, [pc, #32]	; (8009aa4 <_tx_thread_identify+0x38>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f383 8810 	msr	PRIMASK, r3
}
 8009a92:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8009a94:	693b      	ldr	r3, [r7, #16]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	200034fc 	.word	0x200034fc

08009aa8 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b089      	sub	sp, #36	; 0x24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8009aba:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009abc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009abe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ac0:	b672      	cpsid	i
    return(int_posture);
 8009ac2:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009ac4:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d004      	beq.n	8009b00 <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8009b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2c:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f383 8810 	msr	PRIMASK, r3
}
 8009b46:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3724      	adds	r7, #36	; 0x24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
	...

08009b58 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8009b5c:	4b12      	ldr	r3, [pc, #72]	; (8009ba8 <_tx_thread_initialize+0x50>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8009b62:	4b12      	ldr	r3, [pc, #72]	; (8009bac <_tx_thread_initialize+0x54>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	4b11      	ldr	r3, [pc, #68]	; (8009bb0 <_tx_thread_initialize+0x58>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009b6e:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <_tx_thread_initialize+0x5c>)
 8009b70:	2220      	movs	r2, #32
 8009b72:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8009b74:	2280      	movs	r2, #128	; 0x80
 8009b76:	2100      	movs	r1, #0
 8009b78:	480f      	ldr	r0, [pc, #60]	; (8009bb8 <_tx_thread_initialize+0x60>)
 8009b7a:	f006 f8e7 	bl	800fd4c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <_tx_thread_initialize+0x64>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8009b84:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <_tx_thread_initialize+0x68>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <_tx_thread_initialize+0x6c>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8009b90:	4b0d      	ldr	r3, [pc, #52]	; (8009bc8 <_tx_thread_initialize+0x70>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <_tx_thread_initialize+0x74>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8009b9e:	4a0b      	ldr	r2, [pc, #44]	; (8009bcc <_tx_thread_initialize+0x74>)
 8009ba0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8009ba2:	bf00      	nop
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200034fc 	.word	0x200034fc
 8009bac:	20003500 	.word	0x20003500
 8009bb0:	2000350c 	.word	0x2000350c
 8009bb4:	20003510 	.word	0x20003510
 8009bb8:	20003514 	.word	0x20003514
 8009bbc:	20003504 	.word	0x20003504
 8009bc0:	20003508 	.word	0x20003508
 8009bc4:	20003594 	.word	0x20003594
 8009bc8:	20003598 	.word	0x20003598
 8009bcc:	2000359c 	.word	0x2000359c

08009bd0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009bd6:	4b21      	ldr	r3, [pc, #132]	; (8009c5c <_tx_thread_shell_entry+0x8c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009be4:	4610      	mov	r0, r2
 8009be6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009be8:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <_tx_thread_shell_entry+0x90>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8009bf0:	4b1b      	ldr	r3, [pc, #108]	; (8009c60 <_tx_thread_shell_entry+0x90>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	69f8      	ldr	r0, [r7, #28]
 8009bf6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8009bfc:	607b      	str	r3, [r7, #4]
    return(posture);
 8009bfe:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009c00:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c02:	b672      	cpsid	i
    return(int_posture);
 8009c04:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8009c06:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	2201      	movs	r2, #1
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	2200      	movs	r2, #0
 8009c18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <_tx_thread_shell_entry+0x94>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	4a10      	ldr	r2, [pc, #64]	; (8009c64 <_tx_thread_shell_entry+0x94>)
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8009c30:	f3ef 8314 	mrs	r3, CONTROL
 8009c34:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009c36:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009c38:	617b      	str	r3, [r7, #20]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f023 0304 	bic.w	r3, r3, #4
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f383 8814 	msr	CONTROL, r3
}
 8009c4c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8009c4e:	69f8      	ldr	r0, [r7, #28]
 8009c50:	f000 f9c4 	bl	8009fdc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009c54:	bf00      	nop
 8009c56:	3720      	adds	r7, #32
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	200034fc 	.word	0x200034fc
 8009c60:	20003598 	.word	0x20003598
 8009c64:	20003594 	.word	0x20003594

08009c68 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08e      	sub	sp, #56	; 0x38
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c70:	f3ef 8310 	mrs	r3, PRIMASK
 8009c74:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009c78:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c7a:	b672      	cpsid	i
    return(int_posture);
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009c7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009c80:	4b35      	ldr	r3, [pc, #212]	; (8009d58 <_tx_thread_sleep+0xf0>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d108      	bne.n	8009c9e <_tx_thread_sleep+0x36>
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	f383 8810 	msr	PRIMASK, r3
}
 8009c96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009c98:	2313      	movs	r3, #19
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c9c:	e056      	b.n	8009d4c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8009ca4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009ca6:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <_tx_thread_sleep+0xf4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d008      	beq.n	8009cc2 <_tx_thread_sleep+0x5a>
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f383 8810 	msr	PRIMASK, r3
}
 8009cba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009cbc:	2313      	movs	r3, #19
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc0:	e044      	b.n	8009d4c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	4a26      	ldr	r2, [pc, #152]	; (8009d60 <_tx_thread_sleep+0xf8>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d108      	bne.n	8009cdc <_tx_thread_sleep+0x74>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f383 8810 	msr	PRIMASK, r3
}
 8009cd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009cd6:	2313      	movs	r3, #19
 8009cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cda:	e037      	b.n	8009d4c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d108      	bne.n	8009cf4 <_tx_thread_sleep+0x8c>
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f383 8810 	msr	PRIMASK, r3
}
 8009cec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf2:	e02b      	b.n	8009d4c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009cf4:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <_tx_thread_sleep+0xfc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d008      	beq.n	8009d0e <_tx_thread_sleep+0xa6>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f383 8810 	msr	PRIMASK, r3
}
 8009d06:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8009d08:	2313      	movs	r3, #19
 8009d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d0c:	e01e      	b.n	8009d4c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	2204      	movs	r2, #4
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d16:	2201      	movs	r2, #1
 8009d18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009d28:	4b0e      	ldr	r3, [pc, #56]	; (8009d64 <_tx_thread_sleep+0xfc>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	4a0d      	ldr	r2, [pc, #52]	; (8009d64 <_tx_thread_sleep+0xfc>)
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f383 8810 	msr	PRIMASK, r3
}
 8009d3c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009d3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d40:	f000 f94c 	bl	8009fdc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8009d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3738      	adds	r7, #56	; 0x38
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200034fc 	.word	0x200034fc
 8009d5c:	2000000c 	.word	0x2000000c
 8009d60:	20003644 	.word	0x20003644
 8009d64:	20003594 	.word	0x20003594

08009d68 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b089      	sub	sp, #36	; 0x24
 8009d6c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009d6e:	4b17      	ldr	r3, [pc, #92]	; (8009dcc <_tx_thread_system_preempt_check+0x64>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d121      	bne.n	8009dbe <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8009d7a:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <_tx_thread_system_preempt_check+0x68>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <_tx_thread_system_preempt_check+0x6c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d017      	beq.n	8009dbe <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009d8e:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <_tx_thread_system_preempt_check+0x70>)
 8009d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d94:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009d96:	f3ef 8305 	mrs	r3, IPSR
 8009d9a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009d9c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10c      	bne.n	8009dbc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009da2:	f3ef 8310 	mrs	r3, PRIMASK
 8009da6:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009da8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8009daa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009dac:	b662      	cpsie	i
}
 8009dae:	bf00      	nop
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f383 8810 	msr	PRIMASK, r3
}
 8009dba:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8009dbc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8009dbe:	bf00      	nop
 8009dc0:	3724      	adds	r7, #36	; 0x24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	20003594 	.word	0x20003594
 8009dd0:	200034fc 	.word	0x200034fc
 8009dd4:	20003500 	.word	0x20003500
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b096      	sub	sp, #88	; 0x58
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009de4:	f3ef 8310 	mrs	r3, PRIMASK
 8009de8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8009dec:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8009dee:	b672      	cpsid	i
    return(int_posture);
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009df2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d005      	beq.n	8009e08 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	334c      	adds	r3, #76	; 0x4c
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fb91 	bl	800a528 <_tx_timer_system_deactivate>
 8009e06:	e002      	b.n	8009e0e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009e0e:	4b6c      	ldr	r3, [pc, #432]	; (8009fc0 <_tx_thread_system_resume+0x1e4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	4a6a      	ldr	r2, [pc, #424]	; (8009fc0 <_tx_thread_system_resume+0x1e4>)
 8009e16:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 8083 	bne.w	8009f28 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 8097 	beq.w	8009f5a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d172      	bne.n	8009f1a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8009e40:	4a60      	ldr	r2, [pc, #384]	; (8009fc4 <_tx_thread_system_resume+0x1e8>)
 8009e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e48:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8009e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d154      	bne.n	8009efa <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8009e50:	495c      	ldr	r1, [pc, #368]	; (8009fc4 <_tx_thread_system_resume+0x1e8>)
 8009e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8009e66:	2201      	movs	r2, #1
 8009e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8009e70:	4b55      	ldr	r3, [pc, #340]	; (8009fc8 <_tx_thread_system_resume+0x1ec>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e76:	4313      	orrs	r3, r2
 8009e78:	4a53      	ldr	r2, [pc, #332]	; (8009fc8 <_tx_thread_system_resume+0x1ec>)
 8009e7a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8009e7c:	4b53      	ldr	r3, [pc, #332]	; (8009fcc <_tx_thread_system_resume+0x1f0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d269      	bcs.n	8009f5a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8009e86:	4a51      	ldr	r2, [pc, #324]	; (8009fcc <_tx_thread_system_resume+0x1f0>)
 8009e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8009e8c:	4b50      	ldr	r3, [pc, #320]	; (8009fd0 <_tx_thread_system_resume+0x1f4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8009e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8009e98:	4a4d      	ldr	r2, [pc, #308]	; (8009fd0 <_tx_thread_system_resume+0x1f4>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e05c      	b.n	8009f5a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8009ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d257      	bcs.n	8009f5a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8009eaa:	4a49      	ldr	r2, [pc, #292]	; (8009fd0 <_tx_thread_system_resume+0x1f4>)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb6:	f383 8810 	msr	PRIMASK, r3
}
 8009eba:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009ebc:	4b40      	ldr	r3, [pc, #256]	; (8009fc0 <_tx_thread_system_resume+0x1e4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d174      	bne.n	8009fb2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009ec8:	4b42      	ldr	r3, [pc, #264]	; (8009fd4 <_tx_thread_system_resume+0x1f8>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ed0:	f3ef 8305 	mrs	r3, IPSR
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10c      	bne.n	8009ef6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009edc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8009ee4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009ee6:	b662      	cpsie	i
}
 8009ee8:	bf00      	nop
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	f383 8810 	msr	PRIMASK, r3
}
 8009ef4:	bf00      	nop
}
 8009ef6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8009ef8:	e05b      	b.n	8009fb2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8009efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8009f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8009f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f10:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f16:	621a      	str	r2, [r3, #32]
 8009f18:	e01f      	b.n	8009f5a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2203      	movs	r2, #3
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
 8009f26:	e018      	b.n	8009f5a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d014      	beq.n	8009f5a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d010      	beq.n	8009f5a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8009f4c:	e005      	b.n	8009f5a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2203      	movs	r2, #3
 8009f58:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009f5a:	4b1f      	ldr	r3, [pc, #124]	; (8009fd8 <_tx_thread_system_resume+0x1fc>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f62:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	f383 8810 	msr	PRIMASK, r3
}
 8009f6a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009f6c:	4b18      	ldr	r3, [pc, #96]	; (8009fd0 <_tx_thread_system_resume+0x1f4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d020      	beq.n	8009fb8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009f76:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <_tx_thread_system_resume+0x1e4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8009f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d11a      	bne.n	8009fb8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009f82:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <_tx_thread_system_resume+0x1f8>)
 8009f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f88:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009f8a:	f3ef 8305 	mrs	r3, IPSR
 8009f8e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009f90:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10f      	bne.n	8009fb6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f96:	f3ef 8310 	mrs	r3, PRIMASK
 8009f9a:	613b      	str	r3, [r7, #16]
    return(posture);
 8009f9c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8009f9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009fa0:	b662      	cpsie	i
}
 8009fa2:	bf00      	nop
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f383 8810 	msr	PRIMASK, r3
}
 8009fae:	bf00      	nop
}
 8009fb0:	e001      	b.n	8009fb6 <_tx_thread_system_resume+0x1da>
                                return;
 8009fb2:	bf00      	nop
 8009fb4:	e000      	b.n	8009fb8 <_tx_thread_system_resume+0x1dc>
 8009fb6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009fb8:	3758      	adds	r7, #88	; 0x58
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20003594 	.word	0x20003594
 8009fc4:	20003514 	.word	0x20003514
 8009fc8:	2000350c 	.word	0x2000350c
 8009fcc:	20003510 	.word	0x20003510
 8009fd0:	20003500 	.word	0x20003500
 8009fd4:	e000ed04 	.word	0xe000ed04
 8009fd8:	200034fc 	.word	0x200034fc

08009fdc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b09e      	sub	sp, #120	; 0x78
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009fe4:	4b81      	ldr	r3, [pc, #516]	; (800a1ec <_tx_thread_system_suspend+0x210>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009fea:	f3ef 8310 	mrs	r3, PRIMASK
 8009fee:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8009ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009ff2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ff4:	b672      	cpsid	i
    return(int_posture);
 8009ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009ff8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d112      	bne.n	800a028 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a006:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800a008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d008      	beq.n	800a020 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800a00e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d004      	beq.n	800a020 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	334c      	adds	r3, #76	; 0x4c
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fa22 	bl	800a464 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	4a72      	ldr	r2, [pc, #456]	; (800a1f0 <_tx_thread_system_suspend+0x214>)
 800a026:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a028:	4b72      	ldr	r3, [pc, #456]	; (800a1f4 <_tx_thread_system_suspend+0x218>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	4a71      	ldr	r2, [pc, #452]	; (800a1f4 <_tx_thread_system_suspend+0x218>)
 800a030:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a036:	2b01      	cmp	r3, #1
 800a038:	f040 80a6 	bne.w	800a188 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800a04e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d015      	beq.n	800a082 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800a05c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a05e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a060:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800a062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a064:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a066:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800a068:	4a63      	ldr	r2, [pc, #396]	; (800a1f8 <_tx_thread_system_suspend+0x21c>)
 800a06a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d157      	bne.n	800a126 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800a076:	4960      	ldr	r1, [pc, #384]	; (800a1f8 <_tx_thread_system_suspend+0x21c>)
 800a078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a07a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a07c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a080:	e051      	b.n	800a126 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800a082:	4a5d      	ldr	r2, [pc, #372]	; (800a1f8 <_tx_thread_system_suspend+0x21c>)
 800a084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a086:	2100      	movs	r1, #0
 800a088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800a08c:	2201      	movs	r2, #1
 800a08e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800a096:	4b59      	ldr	r3, [pc, #356]	; (800a1fc <_tx_thread_system_suspend+0x220>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a09c:	43db      	mvns	r3, r3
 800a09e:	4013      	ands	r3, r2
 800a0a0:	4a56      	ldr	r2, [pc, #344]	; (800a1fc <_tx_thread_system_suspend+0x220>)
 800a0a2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800a0a8:	4b54      	ldr	r3, [pc, #336]	; (800a1fc <_tx_thread_system_suspend+0x220>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800a0ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d12b      	bne.n	800a10c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a0b4:	4b52      	ldr	r3, [pc, #328]	; (800a200 <_tx_thread_system_suspend+0x224>)
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800a0ba:	4b52      	ldr	r3, [pc, #328]	; (800a204 <_tx_thread_system_suspend+0x228>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0c2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ca:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a0cc:	4b49      	ldr	r3, [pc, #292]	; (800a1f4 <_tx_thread_system_suspend+0x218>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800a0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f040 8081 	bne.w	800a1dc <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a0da:	4b4b      	ldr	r3, [pc, #300]	; (800a208 <_tx_thread_system_suspend+0x22c>)
 800a0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a0e2:	f3ef 8305 	mrs	r3, IPSR
 800a0e6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800a0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10c      	bne.n	800a108 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800a0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800a0f6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a0f8:	b662      	cpsie	i
}
 800a0fa:	bf00      	nop
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a102:	f383 8810 	msr	PRIMASK, r3
}
 800a106:	bf00      	nop
}
 800a108:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800a10a:	e067      	b.n	800a1dc <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800a10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a10e:	fa93 f3a3 	rbit	r3, r3
 800a112:	65bb      	str	r3, [r7, #88]	; 0x58
 800a114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a116:	fab3 f383 	clz	r3, r3
 800a11a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800a11c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a11e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a120:	4413      	add	r3, r2
 800a122:	4a37      	ldr	r2, [pc, #220]	; (800a200 <_tx_thread_system_suspend+0x224>)
 800a124:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800a126:	4b37      	ldr	r3, [pc, #220]	; (800a204 <_tx_thread_system_suspend+0x228>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d12b      	bne.n	800a188 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a130:	4b33      	ldr	r3, [pc, #204]	; (800a200 <_tx_thread_system_suspend+0x224>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a30      	ldr	r2, [pc, #192]	; (800a1f8 <_tx_thread_system_suspend+0x21c>)
 800a136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a13a:	4a32      	ldr	r2, [pc, #200]	; (800a204 <_tx_thread_system_suspend+0x228>)
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a140:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	f383 8810 	msr	PRIMASK, r3
}
 800a148:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a14a:	4b2a      	ldr	r3, [pc, #168]	; (800a1f4 <_tx_thread_system_suspend+0x218>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800a150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a152:	2b00      	cmp	r3, #0
 800a154:	d144      	bne.n	800a1e0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a156:	4b2c      	ldr	r3, [pc, #176]	; (800a208 <_tx_thread_system_suspend+0x22c>)
 800a158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a15c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10c      	bne.n	800a184 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a16a:	f3ef 8310 	mrs	r3, PRIMASK
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a174:	b662      	cpsie	i
}
 800a176:	bf00      	nop
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	f383 8810 	msr	PRIMASK, r3
}
 800a182:	bf00      	nop
}
 800a184:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800a186:	e02b      	b.n	800a1e0 <_tx_thread_system_suspend+0x204>
 800a188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a18a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	f383 8810 	msr	PRIMASK, r3
}
 800a192:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800a194:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <_tx_thread_system_suspend+0x228>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d022      	beq.n	800a1e4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a19e:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <_tx_thread_system_suspend+0x218>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800a1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d11c      	bne.n	800a1e4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a1aa:	4b17      	ldr	r3, [pc, #92]	; (800a208 <_tx_thread_system_suspend+0x22c>)
 800a1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a1b2:	f3ef 8305 	mrs	r3, IPSR
 800a1b6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a1b8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10c      	bne.n	800a1d8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1be:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c2:	617b      	str	r3, [r7, #20]
    return(posture);
 800a1c4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800a1c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a1c8:	b662      	cpsie	i
}
 800a1ca:	bf00      	nop
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f383 8810 	msr	PRIMASK, r3
}
 800a1d6:	bf00      	nop
}
 800a1d8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800a1da:	e003      	b.n	800a1e4 <_tx_thread_system_suspend+0x208>
                return;
 800a1dc:	bf00      	nop
 800a1de:	e002      	b.n	800a1e6 <_tx_thread_system_suspend+0x20a>
            return;
 800a1e0:	bf00      	nop
 800a1e2:	e000      	b.n	800a1e6 <_tx_thread_system_suspend+0x20a>
    return;
 800a1e4:	bf00      	nop
}
 800a1e6:	3778      	adds	r7, #120	; 0x78
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	200034fc 	.word	0x200034fc
 800a1f0:	20003b00 	.word	0x20003b00
 800a1f4:	20003594 	.word	0x20003594
 800a1f8:	20003514 	.word	0x20003514
 800a1fc:	2000350c 	.word	0x2000350c
 800a200:	20003510 	.word	0x20003510
 800a204:	20003500 	.word	0x20003500
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a212:	4b21      	ldr	r3, [pc, #132]	; (800a298 <_tx_thread_time_slice+0x8c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a218:	f3ef 8310 	mrs	r3, PRIMASK
 800a21c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a21e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a220:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a222:	b672      	cpsid	i
    return(int_posture);
 800a224:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800a226:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a228:	4b1c      	ldr	r3, [pc, #112]	; (800a29c <_tx_thread_time_slice+0x90>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d024      	beq.n	800a27e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d120      	bne.n	800a27e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	4a15      	ldr	r2, [pc, #84]	; (800a2a0 <_tx_thread_time_slice+0x94>)
 800a24a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	429a      	cmp	r2, r3
 800a254:	d013      	beq.n	800a27e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d10d      	bne.n	800a27e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	6a12      	ldr	r2, [r2, #32]
 800a26a:	490e      	ldr	r1, [pc, #56]	; (800a2a4 <_tx_thread_time_slice+0x98>)
 800a26c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <_tx_thread_time_slice+0x9c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a0b      	ldr	r2, [pc, #44]	; (800a2a4 <_tx_thread_time_slice+0x98>)
 800a276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a27a:	4a0c      	ldr	r2, [pc, #48]	; (800a2ac <_tx_thread_time_slice+0xa0>)
 800a27c:	6013      	str	r3, [r2, #0]
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f383 8810 	msr	PRIMASK, r3
}
 800a288:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800a28a:	bf00      	nop
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	200034fc 	.word	0x200034fc
 800a29c:	200035a4 	.word	0x200035a4
 800a2a0:	20003b00 	.word	0x20003b00
 800a2a4:	20003514 	.word	0x20003514
 800a2a8:	20003510 	.word	0x20003510
 800a2ac:	20003500 	.word	0x20003500

0800a2b0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a2c0:	617b      	str	r3, [r7, #20]
    return(posture);
 800a2c2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a2c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2c6:	b672      	cpsid	i
    return(int_posture);
 800a2c8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a2ca:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d10e      	bne.n	800a2f2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800a2d4:	4b13      	ldr	r3, [pc, #76]	; (800a324 <_tx_thread_timeout+0x74>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	4a12      	ldr	r2, [pc, #72]	; (800a324 <_tx_thread_timeout+0x74>)
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f383 8810 	msr	PRIMASK, r3
}
 800a2e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a2ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2ec:	f7ff fd76 	bl	8009ddc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800a2f0:	e013      	b.n	800a31a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2f6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2fe:	61bb      	str	r3, [r7, #24]
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f383 8810 	msr	PRIMASK, r3
}
 800a30a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	69b9      	ldr	r1, [r7, #24]
 800a316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a318:	4798      	blx	r3
}
 800a31a:	bf00      	nop
 800a31c:	3728      	adds	r7, #40	; 0x28
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20003594 	.word	0x20003594

0800a328 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a32e:	f3ef 8310 	mrs	r3, PRIMASK
 800a332:	607b      	str	r3, [r7, #4]
    return(posture);
 800a334:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800a336:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a338:	b672      	cpsid	i
    return(int_posture);
 800a33a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800a33c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800a33e:	4b09      	ldr	r3, [pc, #36]	; (800a364 <_tx_timer_expiration_process+0x3c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	4a07      	ldr	r2, [pc, #28]	; (800a364 <_tx_timer_expiration_process+0x3c>)
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f383 8810 	msr	PRIMASK, r3
}
 800a352:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800a354:	4804      	ldr	r0, [pc, #16]	; (800a368 <_tx_timer_expiration_process+0x40>)
 800a356:	f7ff fd41 	bl	8009ddc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20003594 	.word	0x20003594
 800a368:	20003644 	.word	0x20003644

0800a36c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b089      	sub	sp, #36	; 0x24
 800a370:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800a372:	4b28      	ldr	r3, [pc, #160]	; (800a414 <_tx_timer_initialize+0xa8>)
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800a378:	4b27      	ldr	r3, [pc, #156]	; (800a418 <_tx_timer_initialize+0xac>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800a37e:	4b27      	ldr	r3, [pc, #156]	; (800a41c <_tx_timer_initialize+0xb0>)
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800a384:	4b26      	ldr	r3, [pc, #152]	; (800a420 <_tx_timer_initialize+0xb4>)
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800a38a:	4b26      	ldr	r3, [pc, #152]	; (800a424 <_tx_timer_initialize+0xb8>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800a390:	2280      	movs	r2, #128	; 0x80
 800a392:	2100      	movs	r1, #0
 800a394:	4824      	ldr	r0, [pc, #144]	; (800a428 <_tx_timer_initialize+0xbc>)
 800a396:	f005 fcd9 	bl	800fd4c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800a39a:	4b24      	ldr	r3, [pc, #144]	; (800a42c <_tx_timer_initialize+0xc0>)
 800a39c:	4a22      	ldr	r2, [pc, #136]	; (800a428 <_tx_timer_initialize+0xbc>)
 800a39e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800a3a0:	4b23      	ldr	r3, [pc, #140]	; (800a430 <_tx_timer_initialize+0xc4>)
 800a3a2:	4a21      	ldr	r2, [pc, #132]	; (800a428 <_tx_timer_initialize+0xbc>)
 800a3a4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800a3a6:	4b23      	ldr	r3, [pc, #140]	; (800a434 <_tx_timer_initialize+0xc8>)
 800a3a8:	4a23      	ldr	r2, [pc, #140]	; (800a438 <_tx_timer_initialize+0xcc>)
 800a3aa:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800a3ac:	4b21      	ldr	r3, [pc, #132]	; (800a434 <_tx_timer_initialize+0xc8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4a20      	ldr	r2, [pc, #128]	; (800a434 <_tx_timer_initialize+0xc8>)
 800a3b4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800a3b6:	4b21      	ldr	r3, [pc, #132]	; (800a43c <_tx_timer_initialize+0xd0>)
 800a3b8:	4a21      	ldr	r2, [pc, #132]	; (800a440 <_tx_timer_initialize+0xd4>)
 800a3ba:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800a3bc:	4b21      	ldr	r3, [pc, #132]	; (800a444 <_tx_timer_initialize+0xd8>)
 800a3be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3c2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800a3c4:	4b20      	ldr	r3, [pc, #128]	; (800a448 <_tx_timer_initialize+0xdc>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800a3ca:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <_tx_timer_initialize+0xd0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a1d      	ldr	r2, [pc, #116]	; (800a444 <_tx_timer_initialize+0xd8>)
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	491d      	ldr	r1, [pc, #116]	; (800a448 <_tx_timer_initialize+0xdc>)
 800a3d4:	6809      	ldr	r1, [r1, #0]
 800a3d6:	481c      	ldr	r0, [pc, #112]	; (800a448 <_tx_timer_initialize+0xdc>)
 800a3d8:	6800      	ldr	r0, [r0, #0]
 800a3da:	2400      	movs	r4, #0
 800a3dc:	9405      	str	r4, [sp, #20]
 800a3de:	2400      	movs	r4, #0
 800a3e0:	9404      	str	r4, [sp, #16]
 800a3e2:	9003      	str	r0, [sp, #12]
 800a3e4:	9102      	str	r1, [sp, #8]
 800a3e6:	9201      	str	r2, [sp, #4]
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	4b18      	ldr	r3, [pc, #96]	; (800a44c <_tx_timer_initialize+0xe0>)
 800a3ec:	4a18      	ldr	r2, [pc, #96]	; (800a450 <_tx_timer_initialize+0xe4>)
 800a3ee:	4919      	ldr	r1, [pc, #100]	; (800a454 <_tx_timer_initialize+0xe8>)
 800a3f0:	4819      	ldr	r0, [pc, #100]	; (800a458 <_tx_timer_initialize+0xec>)
 800a3f2:	f7ff fa45 	bl	8009880 <_tx_thread_create>
 800a3f6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e5      	bne.n	800a3ca <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800a3fe:	4b17      	ldr	r3, [pc, #92]	; (800a45c <_tx_timer_initialize+0xf0>)
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <_tx_timer_initialize+0xf4>)
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd90      	pop	{r4, r7, pc}
 800a412:	bf00      	nop
 800a414:	200035a0 	.word	0x200035a0
 800a418:	20003b00 	.word	0x20003b00
 800a41c:	200035a4 	.word	0x200035a4
 800a420:	20003634 	.word	0x20003634
 800a424:	20003640 	.word	0x20003640
 800a428:	200035a8 	.word	0x200035a8
 800a42c:	20003628 	.word	0x20003628
 800a430:	20003630 	.word	0x20003630
 800a434:	2000362c 	.word	0x2000362c
 800a438:	20003624 	.word	0x20003624
 800a43c:	200036f4 	.word	0x200036f4
 800a440:	20003700 	.word	0x20003700
 800a444:	200036f8 	.word	0x200036f8
 800a448:	200036fc 	.word	0x200036fc
 800a44c:	4154494d 	.word	0x4154494d
 800a450:	0800a599 	.word	0x0800a599
 800a454:	0800fde4 	.word	0x0800fde4
 800a458:	20003644 	.word	0x20003644
 800a45c:	20003638 	.word	0x20003638
 800a460:	2000363c 	.word	0x2000363c

0800a464 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800a464:	b480      	push	{r7}
 800a466:	b089      	sub	sp, #36	; 0x24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d04a      	beq.n	800a50e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d046      	beq.n	800a50e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d142      	bne.n	800a50e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d902      	bls.n	800a494 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800a48e:	231f      	movs	r3, #31
 800a490:	61bb      	str	r3, [r7, #24]
 800a492:	e002      	b.n	800a49a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	3b01      	subs	r3, #1
 800a498:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800a49a:	4b20      	ldr	r3, [pc, #128]	; (800a51c <_tx_timer_system_activate+0xb8>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <_tx_timer_system_activate+0xbc>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d30b      	bcc.n	800a4c8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800a4b0:	4b1b      	ldr	r3, [pc, #108]	; (800a520 <_tx_timer_system_activate+0xbc>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	109b      	asrs	r3, r3, #2
 800a4ba:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800a4bc:	4b19      	ldr	r3, [pc, #100]	; (800a524 <_tx_timer_system_activate+0xc0>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	e011      	b.n	800a508 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800a50e:	bf00      	nop
 800a510:	3724      	adds	r7, #36	; 0x24
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20003630 	.word	0x20003630
 800a520:	2000362c 	.word	0x2000362c
 800a524:	20003628 	.word	0x20003628

0800a528 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d026      	beq.n	800a58a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	429a      	cmp	r2, r3
 800a548:	d108      	bne.n	800a55c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d117      	bne.n	800a584 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e013      	b.n	800a584 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d105      	bne.n	800a584 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	619a      	str	r2, [r3, #24]
    }
}
 800a58a:	bf00      	nop
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b098      	sub	sp, #96	; 0x60
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a73      	ldr	r2, [pc, #460]	; (800a774 <_tx_timer_thread_entry+0x1dc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	f040 80de 	bne.w	800a76a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800a5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5b8:	b672      	cpsid	i
    return(int_posture);
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800a5bc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800a5be:	4b6e      	ldr	r3, [pc, #440]	; (800a778 <_tx_timer_thread_entry+0x1e0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f107 020c 	add.w	r2, r7, #12
 800a5d2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800a5d4:	4b68      	ldr	r3, [pc, #416]	; (800a778 <_tx_timer_thread_entry+0x1e0>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800a5dc:	4b66      	ldr	r3, [pc, #408]	; (800a778 <_tx_timer_thread_entry+0x1e0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	4a65      	ldr	r2, [pc, #404]	; (800a778 <_tx_timer_thread_entry+0x1e0>)
 800a5e4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a5e6:	4b64      	ldr	r3, [pc, #400]	; (800a778 <_tx_timer_thread_entry+0x1e0>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	4b64      	ldr	r3, [pc, #400]	; (800a77c <_tx_timer_thread_entry+0x1e4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d103      	bne.n	800a5fa <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800a5f2:	4b63      	ldr	r3, [pc, #396]	; (800a780 <_tx_timer_thread_entry+0x1e8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a60      	ldr	r2, [pc, #384]	; (800a778 <_tx_timer_thread_entry+0x1e0>)
 800a5f8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800a5fa:	4b62      	ldr	r3, [pc, #392]	; (800a784 <_tx_timer_thread_entry+0x1ec>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a602:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	f383 8810 	msr	PRIMASK, r3
}
 800a60a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a60c:	f3ef 8310 	mrs	r3, PRIMASK
 800a610:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800a614:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a616:	b672      	cpsid	i
    return(int_posture);
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a61a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800a61c:	e07f      	b.n	800a71e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800a62c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a630:	429a      	cmp	r2, r3
 800a632:	d102      	bne.n	800a63a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e00e      	b.n	800a658 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800a63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a644:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a64a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800a64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a64e:	f107 020c 	add.w	r2, r7, #12
 800a652:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800a654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a656:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d911      	bls.n	800a684 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800a660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800a668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a672:	f107 0208 	add.w	r2, r7, #8
 800a676:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800a678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a67c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800a67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a680:	60bb      	str	r3, [r7, #8]
 800a682:	e01a      	b.n	800a6ba <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800a684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800a68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800a690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a696:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800a698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d009      	beq.n	800a6b4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a2:	f107 0208 	add.w	r2, r7, #8
 800a6a6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800a6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6ac:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800a6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b0:	60bb      	str	r3, [r7, #8]
 800a6b2:	e002      	b.n	800a6ba <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800a6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800a6ba:	4a33      	ldr	r2, [pc, #204]	; (800a788 <_tx_timer_thread_entry+0x1f0>)
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ca:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800a6cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800a6d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a6d6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6e2:	b672      	cpsid	i
    return(int_posture);
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a6e6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800a6e8:	4b27      	ldr	r3, [pc, #156]	; (800a788 <_tx_timer_thread_entry+0x1f0>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d105      	bne.n	800a702 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800a6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800a6fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a6fe:	f7ff feb1 	bl	800a464 <_tx_timer_system_activate>
 800a702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a704:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	f383 8810 	msr	PRIMASK, r3
}
 800a70c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a70e:	f3ef 8310 	mrs	r3, PRIMASK
 800a712:	623b      	str	r3, [r7, #32]
    return(posture);
 800a714:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a716:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a718:	b672      	cpsid	i
    return(int_posture);
 800a71a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a71c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f47f af7c 	bne.w	800a61e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a726:	4b17      	ldr	r3, [pc, #92]	; (800a784 <_tx_timer_thread_entry+0x1ec>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800a72e:	4b17      	ldr	r3, [pc, #92]	; (800a78c <_tx_timer_thread_entry+0x1f4>)
 800a730:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a734:	2203      	movs	r2, #3
 800a736:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73a:	2201      	movs	r2, #1
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a73e:	4b14      	ldr	r3, [pc, #80]	; (800a790 <_tx_timer_thread_entry+0x1f8>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3301      	adds	r3, #1
 800a744:	4a12      	ldr	r2, [pc, #72]	; (800a790 <_tx_timer_thread_entry+0x1f8>)
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a74a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f383 8810 	msr	PRIMASK, r3
}
 800a752:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a754:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a756:	f7ff fc41 	bl	8009fdc <_tx_thread_system_suspend>
 800a75a:	e728      	b.n	800a5ae <_tx_timer_thread_entry+0x16>
 800a75c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a75e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f383 8810 	msr	PRIMASK, r3
}
 800a766:	bf00      	nop
            TX_DISABLE
 800a768:	e721      	b.n	800a5ae <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800a76a:	bf00      	nop
 800a76c:	3760      	adds	r7, #96	; 0x60
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	4154494d 	.word	0x4154494d
 800a778:	20003630 	.word	0x20003630
 800a77c:	2000362c 	.word	0x2000362c
 800a780:	20003628 	.word	0x20003628
 800a784:	20003634 	.word	0x20003634
 800a788:	20003640 	.word	0x20003640
 800a78c:	20003644 	.word	0x20003644
 800a790:	20003594 	.word	0x20003594

0800a794 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b08a      	sub	sp, #40	; 0x28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b0:	e029      	b.n	800a806 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a2d      	ldr	r2, [pc, #180]	; (800a86c <_txe_byte_allocate+0xd8>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d002      	beq.n	800a7c2 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a7bc:	2302      	movs	r3, #2
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c0:	e021      	b.n	800a806 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a7cc:	e01b      	b.n	800a806 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a7d4:	2305      	movs	r3, #5
 800a7d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d8:	e015      	b.n	800a806 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d902      	bls.n	800a7ea <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a7e4:	2305      	movs	r3, #5
 800a7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e8:	e00d      	b.n	800a806 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7f0:	f3ef 8305 	mrs	r3, IPSR
 800a7f4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a7f6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a7f8:	4b1d      	ldr	r3, [pc, #116]	; (800a870 <_txe_byte_allocate+0xdc>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a802:	2304      	movs	r3, #4
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d108      	bne.n	800a81e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a80c:	4b19      	ldr	r3, [pc, #100]	; (800a874 <_txe_byte_allocate+0xe0>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	4a18      	ldr	r2, [pc, #96]	; (800a878 <_txe_byte_allocate+0xe4>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d101      	bne.n	800a81e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a81a:	2313      	movs	r3, #19
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d114      	bne.n	800a84e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a824:	f3ef 8305 	mrs	r3, IPSR
 800a828:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a82a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a82c:	4b10      	ldr	r3, [pc, #64]	; (800a870 <_txe_byte_allocate+0xdc>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4313      	orrs	r3, r2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00b      	beq.n	800a84e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a836:	f3ef 8305 	mrs	r3, IPSR
 800a83a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a83c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <_txe_byte_allocate+0xdc>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4313      	orrs	r3, r2
 800a844:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a848:	d201      	bcs.n	800a84e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a84a:	2313      	movs	r3, #19
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f7fd f826 	bl	80078ac <_tx_byte_allocate>
 800a860:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a864:	4618      	mov	r0, r3
 800a866:	3728      	adds	r7, #40	; 0x28
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	42595445 	.word	0x42595445
 800a870:	2000000c 	.word	0x2000000c
 800a874:	200034fc 	.word	0x200034fc
 800a878:	20003644 	.word	0x20003644

0800a87c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b092      	sub	sp, #72	; 0x48
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a88a:	2300      	movs	r3, #0
 800a88c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a894:	2302      	movs	r3, #2
 800a896:	647b      	str	r3, [r7, #68]	; 0x44
 800a898:	e075      	b.n	800a986 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a89c:	2b34      	cmp	r3, #52	; 0x34
 800a89e:	d002      	beq.n	800a8a6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8a4:	e06f      	b.n	800a986 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8b0:	b672      	cpsid	i
    return(int_posture);
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a8b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a8b6:	4b3b      	ldr	r3, [pc, #236]	; (800a9a4 <_txe_byte_pool_create+0x128>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	4a39      	ldr	r2, [pc, #228]	; (800a9a4 <_txe_byte_pool_create+0x128>)
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a8cc:	4b36      	ldr	r3, [pc, #216]	; (800a9a8 <_txe_byte_pool_create+0x12c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a8d6:	e009      	b.n	800a8ec <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d00b      	beq.n	800a8f8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ec:	4b2f      	ldr	r3, [pc, #188]	; (800a9ac <_txe_byte_pool_create+0x130>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d3f0      	bcc.n	800a8d8 <_txe_byte_pool_create+0x5c>
 800a8f6:	e000      	b.n	800a8fa <_txe_byte_pool_create+0x7e>
                break;
 800a8f8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fe:	623b      	str	r3, [r7, #32]
    return(posture);
 800a900:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a902:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a904:	b672      	cpsid	i
    return(int_posture);
 800a906:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a908:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a90a:	4b26      	ldr	r3, [pc, #152]	; (800a9a4 <_txe_byte_pool_create+0x128>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3b01      	subs	r3, #1
 800a910:	4a24      	ldr	r2, [pc, #144]	; (800a9a4 <_txe_byte_pool_create+0x128>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	f383 8810 	msr	PRIMASK, r3
}
 800a91e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a920:	f7ff fa22 	bl	8009d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a928:	429a      	cmp	r2, r3
 800a92a:	d102      	bne.n	800a932 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a92c:	2302      	movs	r3, #2
 800a92e:	647b      	str	r3, [r7, #68]	; 0x44
 800a930:	e029      	b.n	800a986 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a938:	2303      	movs	r3, #3
 800a93a:	647b      	str	r3, [r7, #68]	; 0x44
 800a93c:	e023      	b.n	800a986 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b63      	cmp	r3, #99	; 0x63
 800a942:	d802      	bhi.n	800a94a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a944:	2305      	movs	r3, #5
 800a946:	647b      	str	r3, [r7, #68]	; 0x44
 800a948:	e01d      	b.n	800a986 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a94a:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <_txe_byte_pool_create+0x134>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a952:	4a18      	ldr	r2, [pc, #96]	; (800a9b4 <_txe_byte_pool_create+0x138>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d101      	bne.n	800a95c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a958:	2313      	movs	r3, #19
 800a95a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a95c:	f3ef 8305 	mrs	r3, IPSR
 800a960:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a962:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a964:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <_txe_byte_pool_create+0x13c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4313      	orrs	r3, r2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a96e:	f3ef 8305 	mrs	r3, IPSR
 800a972:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a974:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <_txe_byte_pool_create+0x13c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a980:	d201      	bcs.n	800a986 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a982:	2313      	movs	r3, #19
 800a984:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7fd f8cc 	bl	8007b30 <_tx_byte_pool_create>
 800a998:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3748      	adds	r7, #72	; 0x48
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20003594 	.word	0x20003594
 800a9a8:	200034ec 	.word	0x200034ec
 800a9ac:	200034f0 	.word	0x200034f0
 800a9b0:	200034fc 	.word	0x200034fc
 800a9b4:	20003644 	.word	0x20003644
 800a9b8:	2000000c 	.word	0x2000000c

0800a9bc <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b092      	sub	sp, #72	; 0x48
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a9d4:	231c      	movs	r3, #28
 800a9d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a9d8:	e053      	b.n	800aa82 <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b34      	cmp	r3, #52	; 0x34
 800a9de:	d002      	beq.n	800a9e6 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a9e0:	231c      	movs	r3, #28
 800a9e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9e4:	e04d      	b.n	800aa82 <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9f0:	b672      	cpsid	i
    return(int_posture);
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a9f4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a9f6:	4b3a      	ldr	r3, [pc, #232]	; (800aae0 <_txe_mutex_create+0x124>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	4a38      	ldr	r2, [pc, #224]	; (800aae0 <_txe_mutex_create+0x124>)
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	f383 8810 	msr	PRIMASK, r3
}
 800aa0a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800aa0c:	4b35      	ldr	r3, [pc, #212]	; (800aae4 <_txe_mutex_create+0x128>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800aa12:	2300      	movs	r3, #0
 800aa14:	643b      	str	r3, [r7, #64]	; 0x40
 800aa16:	e009      	b.n	800aa2c <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d00b      	beq.n	800aa38 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800aa26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa28:	3301      	adds	r3, #1
 800aa2a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa2c:	4b2e      	ldr	r3, [pc, #184]	; (800aae8 <_txe_mutex_create+0x12c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d3f0      	bcc.n	800aa18 <_txe_mutex_create+0x5c>
 800aa36:	e000      	b.n	800aa3a <_txe_mutex_create+0x7e>
                break;
 800aa38:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa3a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa3e:	623b      	str	r3, [r7, #32]
    return(posture);
 800aa40:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aa42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa44:	b672      	cpsid	i
    return(int_posture);
 800aa46:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800aa48:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800aa4a:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <_txe_mutex_create+0x124>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	4a23      	ldr	r2, [pc, #140]	; (800aae0 <_txe_mutex_create+0x124>)
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	f383 8810 	msr	PRIMASK, r3
}
 800aa5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800aa60:	f7ff f982 	bl	8009d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d102      	bne.n	800aa72 <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800aa6c:	231c      	movs	r3, #28
 800aa6e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa70:	e007      	b.n	800aa82 <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d004      	beq.n	800aa82 <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800aa7e:	231f      	movs	r3, #31
 800aa80:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800aa82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d11d      	bne.n	800aac4 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800aa88:	4b18      	ldr	r3, [pc, #96]	; (800aaec <_txe_mutex_create+0x130>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa90:	4a17      	ldr	r2, [pc, #92]	; (800aaf0 <_txe_mutex_create+0x134>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d101      	bne.n	800aa9a <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800aa96:	2313      	movs	r3, #19
 800aa98:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa9a:	f3ef 8305 	mrs	r3, IPSR
 800aa9e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800aaa0:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800aaa2:	4b14      	ldr	r3, [pc, #80]	; (800aaf4 <_txe_mutex_create+0x138>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aaac:	f3ef 8305 	mrs	r3, IPSR
 800aab0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800aab2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800aab4:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <_txe_mutex_create+0x138>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aabe:	d201      	bcs.n	800aac4 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800aac0:	2313      	movs	r3, #19
 800aac2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800aac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fd fb00 	bl	80080d4 <_tx_mutex_create>
 800aad4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800aad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3748      	adds	r7, #72	; 0x48
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20003594 	.word	0x20003594
 800aae4:	200034dc 	.word	0x200034dc
 800aae8:	200034e0 	.word	0x200034e0
 800aaec:	200034fc 	.word	0x200034fc
 800aaf0:	20003644 	.word	0x20003644
 800aaf4:	2000000c 	.word	0x2000000c

0800aaf8 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d102      	bne.n	800ab10 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ab0a:	231c      	movs	r3, #28
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e023      	b.n	800ab58 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a13      	ldr	r2, [pc, #76]	; (800ab64 <_txe_mutex_delete+0x6c>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d002      	beq.n	800ab20 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ab1a:	231c      	movs	r3, #28
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	e01b      	b.n	800ab58 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ab20:	f3ef 8305 	mrs	r3, IPSR
 800ab24:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ab26:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ab28:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <_txe_mutex_delete+0x70>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d002      	beq.n	800ab38 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800ab32:	2313      	movs	r3, #19
 800ab34:	617b      	str	r3, [r7, #20]
 800ab36:	e00f      	b.n	800ab58 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ab38:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <_txe_mutex_delete+0x74>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	4a0b      	ldr	r2, [pc, #44]	; (800ab70 <_txe_mutex_delete+0x78>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d101      	bne.n	800ab4a <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800ab46:	2313      	movs	r3, #19
 800ab48:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d103      	bne.n	800ab58 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7fd fb19 	bl	8008188 <_tx_mutex_delete>
 800ab56:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800ab58:	697b      	ldr	r3, [r7, #20]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	4d555445 	.word	0x4d555445
 800ab68:	2000000c 	.word	0x2000000c
 800ab6c:	200034fc 	.word	0x200034fc
 800ab70:	20003644 	.word	0x20003644

0800ab74 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ab88:	231c      	movs	r3, #28
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	e01f      	b.n	800abce <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a21      	ldr	r2, [pc, #132]	; (800ac18 <_txe_mutex_get+0xa4>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d002      	beq.n	800ab9e <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ab98:	231c      	movs	r3, #28
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	e017      	b.n	800abce <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d014      	beq.n	800abce <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aba4:	f3ef 8305 	mrs	r3, IPSR
 800aba8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800abaa:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <_txe_mutex_get+0xa8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800abb6:	2304      	movs	r3, #4
 800abb8:	61fb      	str	r3, [r7, #28]
 800abba:	e008      	b.n	800abce <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800abbc:	4b18      	ldr	r3, [pc, #96]	; (800ac20 <_txe_mutex_get+0xac>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	4a17      	ldr	r2, [pc, #92]	; (800ac24 <_txe_mutex_get+0xb0>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d101      	bne.n	800abce <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800abca:	2304      	movs	r3, #4
 800abcc:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d114      	bne.n	800abfe <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abd4:	f3ef 8305 	mrs	r3, IPSR
 800abd8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800abda:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800abdc:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <_txe_mutex_get+0xa8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abe6:	f3ef 8305 	mrs	r3, IPSR
 800abea:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800abec:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800abee:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <_txe_mutex_get+0xa8>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800abf8:	d201      	bcs.n	800abfe <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800abfa:	2313      	movs	r3, #19
 800abfc:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fd fb68 	bl	80082dc <_tx_mutex_get>
 800ac0c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ac0e:	69fb      	ldr	r3, [r7, #28]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	4d555445 	.word	0x4d555445
 800ac1c:	2000000c 	.word	0x2000000c
 800ac20:	200034fc 	.word	0x200034fc
 800ac24:	20003644 	.word	0x20003644

0800ac28 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ac30:	2300      	movs	r3, #0
 800ac32:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d102      	bne.n	800ac40 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ac3a:	231c      	movs	r3, #28
 800ac3c:	617b      	str	r3, [r7, #20]
 800ac3e:	e01c      	b.n	800ac7a <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a13      	ldr	r2, [pc, #76]	; (800ac94 <_txe_mutex_put+0x6c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d002      	beq.n	800ac50 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800ac4a:	231c      	movs	r3, #28
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	e014      	b.n	800ac7a <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac50:	f3ef 8305 	mrs	r3, IPSR
 800ac54:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ac56:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ac58:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <_txe_mutex_put+0x70>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00b      	beq.n	800ac7a <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac62:	f3ef 8305 	mrs	r3, IPSR
 800ac66:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ac68:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ac6a:	4b0b      	ldr	r3, [pc, #44]	; (800ac98 <_txe_mutex_put+0x70>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ac74:	d201      	bcs.n	800ac7a <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ac76:	2313      	movs	r3, #19
 800ac78:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d103      	bne.n	800ac88 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7fd fda3 	bl	80087cc <_tx_mutex_put>
 800ac86:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800ac88:	697b      	ldr	r3, [r7, #20]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	4d555445 	.word	0x4d555445
 800ac98:	2000000c 	.word	0x2000000c

0800ac9c <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b094      	sub	sp, #80	; 0x50
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800acaa:	2300      	movs	r3, #0
 800acac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800acb4:	2309      	movs	r3, #9
 800acb6:	647b      	str	r3, [r7, #68]	; 0x44
 800acb8:	e083      	b.n	800adc2 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800acba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acbc:	2b38      	cmp	r3, #56	; 0x38
 800acbe:	d002      	beq.n	800acc6 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800acc0:	2309      	movs	r3, #9
 800acc2:	647b      	str	r3, [r7, #68]	; 0x44
 800acc4:	e07d      	b.n	800adc2 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acc6:	f3ef 8310 	mrs	r3, PRIMASK
 800acca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800accc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800acce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800acd0:	b672      	cpsid	i
    return(int_posture);
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800acd4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800acd6:	4b43      	ldr	r3, [pc, #268]	; (800ade4 <_txe_queue_create+0x148>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3301      	adds	r3, #1
 800acdc:	4a41      	ldr	r2, [pc, #260]	; (800ade4 <_txe_queue_create+0x148>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	f383 8810 	msr	PRIMASK, r3
}
 800acea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800acec:	4b3e      	ldr	r3, [pc, #248]	; (800ade8 <_txe_queue_create+0x14c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	643b      	str	r3, [r7, #64]	; 0x40
 800acf6:	e009      	b.n	800ad0c <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d00b      	beq.n	800ad18 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800ad00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800ad06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad08:	3301      	adds	r3, #1
 800ad0a:	643b      	str	r3, [r7, #64]	; 0x40
 800ad0c:	4b37      	ldr	r3, [pc, #220]	; (800adec <_txe_queue_create+0x150>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d3f0      	bcc.n	800acf8 <_txe_queue_create+0x5c>
 800ad16:	e000      	b.n	800ad1a <_txe_queue_create+0x7e>
                break;
 800ad18:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad1e:	623b      	str	r3, [r7, #32]
    return(posture);
 800ad20:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ad22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad24:	b672      	cpsid	i
    return(int_posture);
 800ad26:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ad28:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ad2a:	4b2e      	ldr	r3, [pc, #184]	; (800ade4 <_txe_queue_create+0x148>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	4a2c      	ldr	r2, [pc, #176]	; (800ade4 <_txe_queue_create+0x148>)
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	f383 8810 	msr	PRIMASK, r3
}
 800ad3e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ad40:	f7ff f812 	bl	8009d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d102      	bne.n	800ad52 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800ad4c:	2309      	movs	r3, #9
 800ad4e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad50:	e037      	b.n	800adc2 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad5c:	e031      	b.n	800adc2 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800ad64:	2305      	movs	r3, #5
 800ad66:	647b      	str	r3, [r7, #68]	; 0x44
 800ad68:	e02b      	b.n	800adc2 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d902      	bls.n	800ad76 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800ad70:	2305      	movs	r3, #5
 800ad72:	647b      	str	r3, [r7, #68]	; 0x44
 800ad74:	e025      	b.n	800adc2 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800ad76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad78:	089b      	lsrs	r3, r3, #2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d902      	bls.n	800ad86 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800ad80:	2305      	movs	r3, #5
 800ad82:	647b      	str	r3, [r7, #68]	; 0x44
 800ad84:	e01d      	b.n	800adc2 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ad86:	4b1a      	ldr	r3, [pc, #104]	; (800adf0 <_txe_queue_create+0x154>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	4a19      	ldr	r2, [pc, #100]	; (800adf4 <_txe_queue_create+0x158>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d101      	bne.n	800ad98 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ad94:	2313      	movs	r3, #19
 800ad96:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad98:	f3ef 8305 	mrs	r3, IPSR
 800ad9c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ad9e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ada0:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <_txe_queue_create+0x15c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00b      	beq.n	800adc2 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800adaa:	f3ef 8305 	mrs	r3, IPSR
 800adae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800adb0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800adb2:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <_txe_queue_create+0x15c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800adbc:	d201      	bcs.n	800adc2 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800adbe:	2313      	movs	r3, #19
 800adc0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800adc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d108      	bne.n	800adda <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800adc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f7fd ffa4 	bl	8008d20 <_tx_queue_create>
 800add8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800adda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800addc:	4618      	mov	r0, r3
 800adde:	3748      	adds	r7, #72	; 0x48
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20003594 	.word	0x20003594
 800ade8:	200034cc 	.word	0x200034cc
 800adec:	200034d0 	.word	0x200034d0
 800adf0:	200034fc 	.word	0x200034fc
 800adf4:	20003644 	.word	0x20003644
 800adf8:	2000000c 	.word	0x2000000c

0800adfc <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ae12:	2309      	movs	r3, #9
 800ae14:	61fb      	str	r3, [r7, #28]
 800ae16:	e025      	b.n	800ae64 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a18      	ldr	r2, [pc, #96]	; (800ae80 <_txe_queue_receive+0x84>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d002      	beq.n	800ae28 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ae22:	2309      	movs	r3, #9
 800ae24:	61fb      	str	r3, [r7, #28]
 800ae26:	e01d      	b.n	800ae64 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d102      	bne.n	800ae34 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	e017      	b.n	800ae64 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d014      	beq.n	800ae64 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ae3a:	f3ef 8305 	mrs	r3, IPSR
 800ae3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ae40:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ae42:	4b10      	ldr	r3, [pc, #64]	; (800ae84 <_txe_queue_receive+0x88>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	61fb      	str	r3, [r7, #28]
 800ae50:	e008      	b.n	800ae64 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ae52:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <_txe_queue_receive+0x8c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	4a0c      	ldr	r2, [pc, #48]	; (800ae8c <_txe_queue_receive+0x90>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d101      	bne.n	800ae64 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ae60:	2304      	movs	r3, #4
 800ae62:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d105      	bne.n	800ae76 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68b9      	ldr	r1, [r7, #8]
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f7fd ffca 	bl	8008e08 <_tx_queue_receive>
 800ae74:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ae76:	69fb      	ldr	r3, [r7, #28]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3720      	adds	r7, #32
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	51554555 	.word	0x51554555
 800ae84:	2000000c 	.word	0x2000000c
 800ae88:	200034fc 	.word	0x200034fc
 800ae8c:	20003644 	.word	0x20003644

0800ae90 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d102      	bne.n	800aeac <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800aea6:	2309      	movs	r3, #9
 800aea8:	61fb      	str	r3, [r7, #28]
 800aeaa:	e025      	b.n	800aef8 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a18      	ldr	r2, [pc, #96]	; (800af14 <_txe_queue_send+0x84>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d002      	beq.n	800aebc <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800aeb6:	2309      	movs	r3, #9
 800aeb8:	61fb      	str	r3, [r7, #28]
 800aeba:	e01d      	b.n	800aef8 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800aec2:	2303      	movs	r3, #3
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	e017      	b.n	800aef8 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d014      	beq.n	800aef8 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aece:	f3ef 8305 	mrs	r3, IPSR
 800aed2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800aed4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800aed6:	4b10      	ldr	r3, [pc, #64]	; (800af18 <_txe_queue_send+0x88>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800aee0:	2304      	movs	r3, #4
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	e008      	b.n	800aef8 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800aee6:	4b0d      	ldr	r3, [pc, #52]	; (800af1c <_txe_queue_send+0x8c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	4a0c      	ldr	r2, [pc, #48]	; (800af20 <_txe_queue_send+0x90>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d101      	bne.n	800aef8 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800aef4:	2304      	movs	r3, #4
 800aef6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d105      	bne.n	800af0a <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7fe f948 	bl	8009198 <_tx_queue_send>
 800af08:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800af0a:	69fb      	ldr	r3, [r7, #28]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3720      	adds	r7, #32
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	51554555 	.word	0x51554555
 800af18:	2000000c 	.word	0x2000000c
 800af1c:	200034fc 	.word	0x200034fc
 800af20:	20003644 	.word	0x20003644

0800af24 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b092      	sub	sp, #72	; 0x48
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800af32:	2300      	movs	r3, #0
 800af34:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800af3c:	230c      	movs	r3, #12
 800af3e:	647b      	str	r3, [r7, #68]	; 0x44
 800af40:	e054      	b.n	800afec <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b1c      	cmp	r3, #28
 800af46:	d002      	beq.n	800af4e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800af48:	230c      	movs	r3, #12
 800af4a:	647b      	str	r3, [r7, #68]	; 0x44
 800af4c:	e04e      	b.n	800afec <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af4e:	f3ef 8310 	mrs	r3, PRIMASK
 800af52:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800af56:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800af58:	b672      	cpsid	i
    return(int_posture);
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800af5c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800af5e:	4b36      	ldr	r3, [pc, #216]	; (800b038 <_txe_semaphore_create+0x114>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	4a34      	ldr	r2, [pc, #208]	; (800b038 <_txe_semaphore_create+0x114>)
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	f383 8810 	msr	PRIMASK, r3
}
 800af72:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800af74:	4b31      	ldr	r3, [pc, #196]	; (800b03c <_txe_semaphore_create+0x118>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800af7a:	2300      	movs	r3, #0
 800af7c:	643b      	str	r3, [r7, #64]	; 0x40
 800af7e:	e009      	b.n	800af94 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af84:	429a      	cmp	r2, r3
 800af86:	d00b      	beq.n	800afa0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800af88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800af8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af90:	3301      	adds	r3, #1
 800af92:	643b      	str	r3, [r7, #64]	; 0x40
 800af94:	4b2a      	ldr	r3, [pc, #168]	; (800b040 <_txe_semaphore_create+0x11c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d3f0      	bcc.n	800af80 <_txe_semaphore_create+0x5c>
 800af9e:	e000      	b.n	800afa2 <_txe_semaphore_create+0x7e>
                break;
 800afa0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afa2:	f3ef 8310 	mrs	r3, PRIMASK
 800afa6:	623b      	str	r3, [r7, #32]
    return(posture);
 800afa8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800afaa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afac:	b672      	cpsid	i
    return(int_posture);
 800afae:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800afb0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800afb2:	4b21      	ldr	r3, [pc, #132]	; (800b038 <_txe_semaphore_create+0x114>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	4a1f      	ldr	r2, [pc, #124]	; (800b038 <_txe_semaphore_create+0x114>)
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	f383 8810 	msr	PRIMASK, r3
}
 800afc6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800afc8:	f7fe fece 	bl	8009d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d102      	bne.n	800afda <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800afd4:	230c      	movs	r3, #12
 800afd6:	647b      	str	r3, [r7, #68]	; 0x44
 800afd8:	e008      	b.n	800afec <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800afda:	4b1a      	ldr	r3, [pc, #104]	; (800b044 <_txe_semaphore_create+0x120>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800afe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe2:	4a19      	ldr	r2, [pc, #100]	; (800b048 <_txe_semaphore_create+0x124>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d101      	bne.n	800afec <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800afe8:	2313      	movs	r3, #19
 800afea:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800afec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d114      	bne.n	800b01c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aff2:	f3ef 8305 	mrs	r3, IPSR
 800aff6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800aff8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800affa:	4b14      	ldr	r3, [pc, #80]	; (800b04c <_txe_semaphore_create+0x128>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4313      	orrs	r3, r2
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b004:	f3ef 8305 	mrs	r3, IPSR
 800b008:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b00a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b00c:	4b0f      	ldr	r3, [pc, #60]	; (800b04c <_txe_semaphore_create+0x128>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4313      	orrs	r3, r2
 800b012:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b016:	d201      	bcs.n	800b01c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b018:	2313      	movs	r3, #19
 800b01a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d105      	bne.n	800b02e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	68b9      	ldr	r1, [r7, #8]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7fe fa5e 	bl	80094e8 <_tx_semaphore_create>
 800b02c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800b02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b030:	4618      	mov	r0, r3
 800b032:	3748      	adds	r7, #72	; 0x48
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20003594 	.word	0x20003594
 800b03c:	200034c4 	.word	0x200034c4
 800b040:	200034c8 	.word	0x200034c8
 800b044:	200034fc 	.word	0x200034fc
 800b048:	20003644 	.word	0x20003644
 800b04c:	2000000c 	.word	0x2000000c

0800b050 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b058:	2300      	movs	r3, #0
 800b05a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b062:	230c      	movs	r3, #12
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e01c      	b.n	800b0a2 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a13      	ldr	r2, [pc, #76]	; (800b0bc <_txe_semaphore_delete+0x6c>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d002      	beq.n	800b078 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b072:	230c      	movs	r3, #12
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e014      	b.n	800b0a2 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b078:	f3ef 8305 	mrs	r3, IPSR
 800b07c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800b07e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b080:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <_txe_semaphore_delete+0x70>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4313      	orrs	r3, r2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800b08a:	2313      	movs	r3, #19
 800b08c:	617b      	str	r3, [r7, #20]
 800b08e:	e008      	b.n	800b0a2 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b090:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <_txe_semaphore_delete+0x74>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	4a0b      	ldr	r2, [pc, #44]	; (800b0c8 <_txe_semaphore_delete+0x78>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d101      	bne.n	800b0a2 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b09e:	2313      	movs	r3, #19
 800b0a0:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7fe fa6f 	bl	800958c <_tx_semaphore_delete>
 800b0ae:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800b0b0:	697b      	ldr	r3, [r7, #20]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	53454d41 	.word	0x53454d41
 800b0c0:	2000000c 	.word	0x2000000c
 800b0c4:	200034fc 	.word	0x200034fc
 800b0c8:	20003644 	.word	0x20003644

0800b0cc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e01f      	b.n	800b126 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a15      	ldr	r2, [pc, #84]	; (800b140 <_txe_semaphore_get+0x74>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d002      	beq.n	800b0f6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b0f0:	230c      	movs	r3, #12
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	e017      	b.n	800b126 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d014      	beq.n	800b126 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b0fc:	f3ef 8305 	mrs	r3, IPSR
 800b100:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800b102:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b104:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <_txe_semaphore_get+0x78>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4313      	orrs	r3, r2
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d002      	beq.n	800b114 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800b10e:	2304      	movs	r3, #4
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	e008      	b.n	800b126 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800b114:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <_txe_semaphore_get+0x7c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <_txe_semaphore_get+0x80>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d101      	bne.n	800b126 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800b122:	2304      	movs	r3, #4
 800b124:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d104      	bne.n	800b136 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7fe fabc 	bl	80096ac <_tx_semaphore_get>
 800b134:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800b136:	697b      	ldr	r3, [r7, #20]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	53454d41 	.word	0x53454d41
 800b144:	2000000c 	.word	0x2000000c
 800b148:	200034fc 	.word	0x200034fc
 800b14c:	20003644 	.word	0x20003644

0800b150 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b15e:	230c      	movs	r3, #12
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	e00b      	b.n	800b17c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a07      	ldr	r2, [pc, #28]	; (800b188 <_txe_semaphore_put+0x38>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d002      	beq.n	800b174 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b16e:	230c      	movs	r3, #12
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e003      	b.n	800b17c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7fe fb2b 	bl	80097d0 <_tx_semaphore_put>
 800b17a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800b17c:	68fb      	ldr	r3, [r7, #12]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	53454d41 	.word	0x53454d41

0800b18c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b09a      	sub	sp, #104	; 0x68
 800b190:	af06      	add	r7, sp, #24
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b19a:	2300      	movs	r3, #0
 800b19c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b1a4:	230e      	movs	r3, #14
 800b1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1a8:	e0bb      	b.n	800b322 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800b1aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1ac:	2bb0      	cmp	r3, #176	; 0xb0
 800b1ae:	d002      	beq.n	800b1b6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b1b0:	230e      	movs	r3, #14
 800b1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1b4:	e0b5      	b.n	800b322 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ba:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1c0:	b672      	cpsid	i
    return(int_posture);
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b1c6:	4b64      	ldr	r3, [pc, #400]	; (800b358 <_txe_thread_create+0x1cc>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	4a62      	ldr	r2, [pc, #392]	; (800b358 <_txe_thread_create+0x1cc>)
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d6:	f383 8810 	msr	PRIMASK, r3
}
 800b1da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800b1e0:	4b5e      	ldr	r3, [pc, #376]	; (800b35c <_txe_thread_create+0x1d0>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1e8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800b1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1f0:	4413      	add	r3, r2
 800b1f2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	647b      	str	r3, [r7, #68]	; 0x44
 800b1fc:	e02b      	b.n	800b256 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b202:	429a      	cmp	r2, r3
 800b204:	d101      	bne.n	800b20a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800b20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d028      	beq.n	800b262 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800b210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b216:	429a      	cmp	r2, r3
 800b218:	d308      	bcc.n	800b22c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800b21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b220:	429a      	cmp	r2, r3
 800b222:	d203      	bcs.n	800b22c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800b224:	2300      	movs	r3, #0
 800b226:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800b228:	2301      	movs	r3, #1
 800b22a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800b22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b232:	429a      	cmp	r2, r3
 800b234:	d308      	bcc.n	800b248 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800b236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d203      	bcs.n	800b248 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800b244:	2301      	movs	r3, #1
 800b246:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800b248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800b250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b252:	3301      	adds	r3, #1
 800b254:	647b      	str	r3, [r7, #68]	; 0x44
 800b256:	4b42      	ldr	r3, [pc, #264]	; (800b360 <_txe_thread_create+0x1d4>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d3ce      	bcc.n	800b1fe <_txe_thread_create+0x72>
 800b260:	e000      	b.n	800b264 <_txe_thread_create+0xd8>
                break;
 800b262:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b264:	f3ef 8310 	mrs	r3, PRIMASK
 800b268:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b26a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b26c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b26e:	b672      	cpsid	i
    return(int_posture);
 800b270:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b272:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b274:	4b38      	ldr	r3, [pc, #224]	; (800b358 <_txe_thread_create+0x1cc>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3b01      	subs	r3, #1
 800b27a:	4a37      	ldr	r2, [pc, #220]	; (800b358 <_txe_thread_create+0x1cc>)
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b280:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	f383 8810 	msr	PRIMASK, r3
}
 800b288:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b28a:	f7fe fd6d 	bl	8009d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b292:	429a      	cmp	r2, r3
 800b294:	d102      	bne.n	800b29c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800b296:	230e      	movs	r3, #14
 800b298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b29a:	e042      	b.n	800b322 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800b29c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d102      	bne.n	800b2a8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2a6:	e03c      	b.n	800b322 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d102      	bne.n	800b2b4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2b2:	e036      	b.n	800b322 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800b2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2b6:	2bc7      	cmp	r3, #199	; 0xc7
 800b2b8:	d802      	bhi.n	800b2c0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800b2ba:	2305      	movs	r3, #5
 800b2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2be:	e030      	b.n	800b322 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800b2c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2c2:	2b1f      	cmp	r3, #31
 800b2c4:	d902      	bls.n	800b2cc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800b2c6:	230f      	movs	r3, #15
 800b2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2ca:	e02a      	b.n	800b322 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800b2cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d902      	bls.n	800b2da <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800b2d4:	2318      	movs	r3, #24
 800b2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2d8:	e023      	b.n	800b322 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800b2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d902      	bls.n	800b2e6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2e4:	e01d      	b.n	800b322 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800b2e6:	4b1f      	ldr	r3, [pc, #124]	; (800b364 <_txe_thread_create+0x1d8>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <_txe_thread_create+0x1dc>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d101      	bne.n	800b2f8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b2f4:	2313      	movs	r3, #19
 800b2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2f8:	f3ef 8305 	mrs	r3, IPSR
 800b2fc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b2fe:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b300:	4b1a      	ldr	r3, [pc, #104]	; (800b36c <_txe_thread_create+0x1e0>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4313      	orrs	r3, r2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00b      	beq.n	800b322 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b30a:	f3ef 8305 	mrs	r3, IPSR
 800b30e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b310:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b312:	4b16      	ldr	r3, [pc, #88]	; (800b36c <_txe_thread_create+0x1e0>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4313      	orrs	r3, r2
 800b318:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b31c:	d201      	bcs.n	800b322 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800b31e:	2313      	movs	r3, #19
 800b320:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d112      	bne.n	800b34e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800b328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b332:	9303      	str	r3, [sp, #12]
 800b334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b336:	9302      	str	r3, [sp, #8]
 800b338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	68b9      	ldr	r1, [r7, #8]
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f7fe fa9a 	bl	8009880 <_tx_thread_create>
 800b34c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800b34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b350:	4618      	mov	r0, r3
 800b352:	3750      	adds	r7, #80	; 0x50
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	20003594 	.word	0x20003594
 800b35c:	20003504 	.word	0x20003504
 800b360:	20003508 	.word	0x20003508
 800b364:	200034fc 	.word	0x200034fc
 800b368:	20003644 	.word	0x20003644
 800b36c:	2000000c 	.word	0x2000000c

0800b370 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08c      	sub	sp, #48	; 0x30
 800b374:	af06      	add	r7, sp, #24
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b384:	230e      	movs	r3, #14
 800b386:	617b      	str	r3, [r7, #20]
 800b388:	e018      	b.n	800b3bc <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a0e      	ldr	r2, [pc, #56]	; (800b3c8 <_txe_thread_info_get+0x58>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d002      	beq.n	800b39a <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b394:	230e      	movs	r3, #14
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e010      	b.n	800b3bc <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	9303      	str	r3, [sp, #12]
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	9302      	str	r3, [sp, #8]
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7fe fb77 	bl	8009aa8 <_tx_thread_info_get>
 800b3ba:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800b3bc:	697b      	ldr	r3, [r7, #20]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	54485244 	.word	0x54485244

0800b3cc <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b3d4:	4b1b      	ldr	r3, [pc, #108]	; (800b444 <_ux_device_stack_alternate_setting_get+0x78>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3320      	adds	r3, #32
 800b3da:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d129      	bne.n	800b438 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3ea:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800b3ec:	e021      	b.n	800b432 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d119      	bne.n	800b42c <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	333c      	adds	r3, #60	; 0x3c
 800b3fc:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	3330      	adds	r3, #48	; 0x30
 800b402:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800b40c:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800b40e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	2201      	movs	r2, #1
 800b414:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2203      	movs	r2, #3
 800b41a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800b41c:	2201      	movs	r2, #1
 800b41e:	2101      	movs	r1, #1
 800b420:	6938      	ldr	r0, [r7, #16]
 800b422:	f001 fd49 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800b426:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	e006      	b.n	800b43a <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b430:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1da      	bne.n	800b3ee <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800b438:	23ff      	movs	r3, #255	; 0xff
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20003b04 	.word	0x20003b04

0800b448 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b0ae      	sub	sp, #184	; 0xb8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b452:	4bc0      	ldr	r3, [pc, #768]	; (800b754 <_ux_device_stack_alternate_setting_set+0x30c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3320      	adds	r3, #32
 800b458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800b45c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b03      	cmp	r3, #3
 800b464:	d001      	beq.n	800b46a <_ux_device_stack_alternate_setting_set+0x22>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800b466:	2354      	movs	r3, #84	; 0x54
 800b468:	e217      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800b46a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b46e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800b476:	e00a      	b.n	800b48e <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800b478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	429a      	cmp	r2, r3
 800b482:	d009      	beq.n	800b498 <_ux_device_stack_alternate_setting_set+0x50>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800b484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (interface_ptr != UX_NULL)
 800b48e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1f0      	bne.n	800b478 <_ux_device_stack_alternate_setting_set+0x30>
 800b496:	e000      	b.n	800b49a <_ux_device_stack_alternate_setting_set+0x52>
            break;
 800b498:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800b49a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d106      	bne.n	800b4b0 <_ux_device_stack_alternate_setting_set+0x68>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800b4a2:	2252      	movs	r2, #82	; 0x52
 800b4a4:	2107      	movs	r1, #7
 800b4a6:	2002      	movs	r0, #2
 800b4a8:	f001 fd90 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800b4ac:	2352      	movs	r3, #82	; 0x52
 800b4ae:	e1f4      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800b4b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d101      	bne.n	800b4c0 <_ux_device_stack_alternate_setting_set+0x78>
        return(UX_SUCCESS);       
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e1ec      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800b4c0:	4ba4      	ldr	r3, [pc, #656]	; (800b754 <_ux_device_stack_alternate_setting_set+0x30c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800b4c8:	4ba2      	ldr	r3, [pc, #648]	; (800b754 <_ux_device_stack_alternate_setting_set+0x30c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800b4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800b4d4:	4b9f      	ldr	r3, [pc, #636]	; (800b754 <_ux_device_stack_alternate_setting_set+0x30c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b4dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800b4e0:	e1d5      	b.n	800b88e <_ux_device_stack_alternate_setting_set+0x446>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800b4e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800b4ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4f0:	785b      	ldrb	r3, [r3, #1]
 800b4f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800b4f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	f040 81b9 	bne.w	800b872 <_ux_device_stack_alternate_setting_set+0x42a>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800b500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b504:	2208      	movs	r2, #8
 800b506:	4994      	ldr	r1, [pc, #592]	; (800b758 <_ux_device_stack_alternate_setting_set+0x310>)
 800b508:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b50c:	f001 fe4c 	bl	800d1a8 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800b510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b516:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b51a:	429a      	cmp	r2, r3
 800b51c:	f040 81a9 	bne.w	800b872 <_ux_device_stack_alternate_setting_set+0x42a>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800b520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800b526:	e19e      	b.n	800b866 <_ux_device_stack_alternate_setting_set+0x41e>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800b528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800b532:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800b53c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b540:	2b04      	cmp	r3, #4
 800b542:	f040 8182 	bne.w	800b84a <_ux_device_stack_alternate_setting_set+0x402>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800b546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b54a:	2209      	movs	r2, #9
 800b54c:	4983      	ldr	r1, [pc, #524]	; (800b75c <_ux_device_stack_alternate_setting_set+0x314>)
 800b54e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b552:	f001 fe29 	bl	800d1a8 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800b556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	f040 8175 	bne.w	800b84a <_ux_device_stack_alternate_setting_set+0x402>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800b560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	f040 8170 	bne.w	800b84a <_ux_device_stack_alternate_setting_set+0x402>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800b56a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800b574:	e028      	b.n	800b5c8 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800b576:	2126      	movs	r1, #38	; 0x26
 800b578:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b57c:	f001 fc8a 	bl	800ce94 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800b580:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b58a:	210f      	movs	r1, #15
 800b58c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800b590:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800b592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800b59a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800b5a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800b5aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800b5b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800b5ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5be:	2200      	movs	r2, #0
 800b5c0:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800b5c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800b5c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1d2      	bne.n	800b576 <_ux_device_stack_alternate_setting_set+0x12e>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800b5d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800b5d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                            device_framework +=  (ULONG) *device_framework;
 800b5ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800b5fc:	e0e7      	b.n	800b7ce <_ux_device_stack_alternate_setting_set+0x386>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800b5fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800b608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b60c:	785b      	ldrb	r3, [r3, #1]
 800b60e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800b612:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b616:	2b05      	cmp	r3, #5
 800b618:	d009      	beq.n	800b62e <_ux_device_stack_alternate_setting_set+0x1e6>
 800b61a:	2b05      	cmp	r3, #5
 800b61c:	f300 80c8 	bgt.w	800b7b0 <_ux_device_stack_alternate_setting_set+0x368>
 800b620:	2b02      	cmp	r3, #2
 800b622:	f000 80c0 	beq.w	800b7a6 <_ux_device_stack_alternate_setting_set+0x35e>
 800b626:	2b04      	cmp	r3, #4
 800b628:	f000 80bd 	beq.w	800b7a6 <_ux_device_stack_alternate_setting_set+0x35e>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800b62c:	e0c0      	b.n	800b7b0 <_ux_device_stack_alternate_setting_set+0x368>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800b62e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b632:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800b63a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b63e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 800b646:	e013      	b.n	800b670 <_ux_device_stack_alternate_setting_set+0x228>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800b648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d104      	bne.n	800b65c <_ux_device_stack_alternate_setting_set+0x214>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800b652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b656:	2201      	movs	r2, #1
 800b658:	601a      	str	r2, [r3, #0]
                                            break;
 800b65a:	e00d      	b.n	800b678 <_ux_device_stack_alternate_setting_set+0x230>
                                        endpoint++;
 800b65c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b660:	3390      	adds	r3, #144	; 0x90
 800b662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                       endpoints_pool_number--; 
 800b666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b66a:	3b01      	subs	r3, #1
 800b66c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 800b670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e7      	bne.n	800b648 <_ux_device_stack_alternate_setting_set+0x200>
                                    if (endpoints_pool_number == 0)
 800b678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <_ux_device_stack_alternate_setting_set+0x23c>
                                        return(UX_MEMORY_INSUFFICIENT);
 800b680:	2312      	movs	r3, #18
 800b682:	e10a      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800b684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b688:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800b68a:	2206      	movs	r2, #6
 800b68c:	4934      	ldr	r1, [pc, #208]	; (800b760 <_ux_device_stack_alternate_setting_set+0x318>)
 800b68e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b692:	f001 fd89 	bl	800d1a8 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b69a:	3330      	adds	r3, #48	; 0x30
 800b69c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800b6a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6a4:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 800b6a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800b6ae:	4b29      	ldr	r3, [pc, #164]	; (800b754 <_ux_device_stack_alternate_setting_set+0x30c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d11c      	bne.n	800b6f4 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800b6ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d015      	beq.n	800b6f4 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800b6c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800b6d2:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 800b6d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <_ux_device_stack_alternate_setting_set+0x2ac>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800b6da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6dc:	0adb      	lsrs	r3, r3, #11
 800b6de:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 800b6e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 800b6e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b6ec:	fb02 f303 	mul.w	r3, r2, r3
 800b6f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800b6f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b6fc:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800b6fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b706:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800b708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b70c:	f04f 32ff 	mov.w	r2, #4294967295
 800b710:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800b712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b71a:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 800b71c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b720:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b724:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800b726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b730:	210e      	movs	r1, #14
 800b732:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800b736:	4798      	blx	r3
 800b738:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                                    if (status != UX_SUCCESS)
 800b73c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00f      	beq.n	800b764 <_ux_device_stack_alternate_setting_set+0x31c>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800b744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
                                        return(status);
 800b74c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b750:	e0a3      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>
 800b752:	bf00      	nop
 800b754:	20003b04 	.word	0x20003b04
 800b758:	20000040 	.word	0x20000040
 800b75c:	20000048 	.word	0x20000048
 800b760:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800b764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d105      	bne.n	800b77a <_ux_device_stack_alternate_setting_set+0x332>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800b76e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b776:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 800b778:	e01b      	b.n	800b7b2 <_ux_device_stack_alternate_setting_set+0x36a>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800b77a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800b784:	e004      	b.n	800b790 <_ux_device_stack_alternate_setting_set+0x348>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800b786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800b790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1f5      	bne.n	800b786 <_ux_device_stack_alternate_setting_set+0x33e>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800b79a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b79e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7a2:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 800b7a4:	e005      	b.n	800b7b2 <_ux_device_stack_alternate_setting_set+0x36a>
                                    device_framework_length =  descriptor_length;
 800b7a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                    break;
 800b7ae:	e000      	b.n	800b7b2 <_ux_device_stack_alternate_setting_set+0x36a>
                                    break;
 800b7b0:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800b7b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b7b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800b7c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                            while (device_framework_length != 0)
 800b7ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f47f af13 	bne.w	800b5fe <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800b7d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7dc:	330c      	adds	r3, #12
 800b7de:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b7e2:	2224      	movs	r2, #36	; 0x24
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fe8a 	bl	800d4fe <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800b7ea:	4b2e      	ldr	r3, [pc, #184]	; (800b8a4 <_ux_device_stack_alternate_setting_set+0x45c>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	3356      	adds	r3, #86	; 0x56
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800b800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <_ux_device_stack_alternate_setting_set+0x3ca>
 800b808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <_ux_device_stack_alternate_setting_set+0x3ce>
                            {

                                return (UX_NO_CLASS_MATCH);
 800b812:	2357      	movs	r3, #87	; 0x57
 800b814:	e041      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800b816:	2306      	movs	r3, #6
 800b818:	60bb      	str	r3, [r7, #8]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800b81a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b81e:	613b      	str	r3, [r7, #16]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800b820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b824:	62bb      	str	r3, [r7, #40]	; 0x28
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800b826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b82a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b82e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800b832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b838:	f107 0208 	add.w	r2, r7, #8
 800b83c:	4610      	mov	r0, r2
 800b83e:	4798      	blx	r3
 800b840:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

                            /* We are done here.  */
                            return(status); 
 800b844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b848:	e027      	b.n	800b89a <_ux_device_stack_alternate_setting_set+0x452>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800b84a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b84e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800b858:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b85c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b860:	4413      	add	r3, r2
 800b862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                while (device_framework_length != 0)
 800b866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f47f ae5c 	bne.w	800b528 <_ux_device_stack_alternate_setting_set+0xe0>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800b870:	e012      	b.n	800b898 <_ux_device_stack_alternate_setting_set+0x450>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800b872:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800b880:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b888:	4413      	add	r3, r2
 800b88a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    while (device_framework_length != 0)
 800b88e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b892:	2b00      	cmp	r3, #0
 800b894:	f47f ae25 	bne.w	800b4e2 <_ux_device_stack_alternate_setting_set+0x9a>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800b898:	23ff      	movs	r3, #255	; 0xff
#endif
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	37b8      	adds	r7, #184	; 0xb8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20003b04 	.word	0x20003b04

0800b8a8 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b092      	sub	sp, #72	; 0x48
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800b8ba:	f107 0310 	add.w	r3, r7, #16
 800b8be:	223f      	movs	r2, #63	; 0x3f
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f001 ffff 	bl	800d8c6 <_ux_utility_string_length_check>
 800b8c8:	6478      	str	r0, [r7, #68]	; 0x44
    if (status)
 800b8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <_ux_device_stack_class_register+0x2c>
        return(status);
 800b8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d2:	e035      	b.n	800b940 <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800b8d4:	4b1c      	ldr	r3, [pc, #112]	; (800b948 <_ux_device_stack_class_register+0xa0>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b8dc:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800b8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d12b      	bne.n	800b93e <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800b8e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	68f9      	ldr	r1, [r7, #12]
 800b8f0:	f001 fe05 	bl	800d4fe <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800b8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800b8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800b902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800b90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800b912:	2305      	movs	r3, #5
 800b914:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 800b916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b918:	63bb      	str	r3, [r7, #56]	; 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800b91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800b91e:	f107 0214 	add.w	r2, r7, #20
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	4610      	mov	r0, r2
 800b926:	4798      	blx	r3
 800b928:	6478      	str	r0, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800b92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <_ux_device_stack_class_register+0x8c>
                return(status);
 800b930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b932:	e005      	b.n	800b940 <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800b934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b936:	2201      	movs	r2, #1
 800b938:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800b93a:	2300      	movs	r3, #0
 800b93c:	e000      	b.n	800b940 <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800b93e:	2312      	movs	r3, #18
}
 800b940:	4618      	mov	r0, r3
 800b942:	3748      	adds	r7, #72	; 0x48
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20003b04 	.word	0x20003b04

0800b94c <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b958:	4b2a      	ldr	r3, [pc, #168]	; (800ba04 <_ux_device_stack_clear_feature+0xb8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b95e:	4b29      	ldr	r3, [pc, #164]	; (800ba04 <_ux_device_stack_clear_feature+0xb8>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3320      	adds	r3, #32
 800b964:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	333c      	adds	r3, #60	; 0x3c
 800b96a:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f003 0303 	and.w	r3, r3, #3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <_ux_device_stack_clear_feature+0x30>
 800b976:	2b02      	cmp	r3, #2
 800b978:	d011      	beq.n	800b99e <_ux_device_stack_clear_feature+0x52>
 800b97a:	e035      	b.n	800b9e8 <_ux_device_stack_clear_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d13a      	bne.n	800b9f8 <_ux_device_stack_clear_feature+0xac>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800b982:	4b20      	ldr	r3, [pc, #128]	; (800ba04 <_ux_device_stack_clear_feature+0xb8>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d005      	beq.n	800b99a <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800b98e:	4b1d      	ldr	r3, [pc, #116]	; (800ba04 <_ux_device_stack_clear_feature+0xb8>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800b998:	e02e      	b.n	800b9f8 <_ux_device_stack_clear_feature+0xac>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800b99a:	2354      	movs	r3, #84	; 0x54
 800b99c:	e02e      	b.n	800b9fc <_ux_device_stack_clear_feature+0xb0>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800b9a6:	e01c      	b.n	800b9e2 <_ux_device_stack_clear_feature+0x96>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ac:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800b9ae:	e012      	b.n	800b9d6 <_ux_device_stack_clear_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d10a      	bne.n	800b9d0 <_ux_device_stack_clear_feature+0x84>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	6a3a      	ldr	r2, [r7, #32]
 800b9c0:	2110      	movs	r1, #16
 800b9c2:	69f8      	ldr	r0, [r7, #28]
 800b9c4:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e015      	b.n	800b9fc <_ux_device_stack_clear_feature+0xb0>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800b9d0:	6a3b      	ldr	r3, [r7, #32]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e9      	bne.n	800b9b0 <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1df      	bne.n	800b9a8 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	2114      	movs	r1, #20
 800b9f0:	69f8      	ldr	r0, [r7, #28]
 800b9f2:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e001      	b.n	800b9fc <_ux_device_stack_clear_feature+0xb0>
        break;
 800b9f8:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3728      	adds	r7, #40	; 0x28
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20003b04 	.word	0x20003b04

0800ba08 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ba0e:	4b0f      	ldr	r3, [pc, #60]	; (800ba4c <_ux_device_stack_configuration_get+0x44>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3320      	adds	r3, #32
 800ba14:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	333c      	adds	r3, #60	; 0x3c
 800ba1a:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	3330      	adds	r3, #48	; 0x30
 800ba20:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800ba2c:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ba2e:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2203      	movs	r2, #3
 800ba34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800ba36:	2201      	movs	r2, #1
 800ba38:	2101      	movs	r1, #1
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f001 fa3c 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800ba40:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 800ba42:	683b      	ldr	r3, [r7, #0]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20003b04 	.word	0x20003b04

0800ba50 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b0ac      	sub	sp, #176	; 0xb0
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800ba58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	2100      	movs	r1, #0
 800ba60:	4618      	mov	r0, r3
 800ba62:	f004 f973 	bl	800fd4c <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
ULONG                           iad_number_interfaces =  0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ba78:	4b9d      	ldr	r3, [pc, #628]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ba80:	4b9b      	ldr	r3, [pc, #620]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3320      	adds	r3, #32
 800ba86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800ba90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba94:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d101      	bne.n	800baa2 <_ux_device_stack_configuration_set+0x52>
        return(UX_SUCCESS);
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e175      	b.n	800bd8e <_ux_device_stack_configuration_set+0x33e>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800baa2:	4b93      	ldr	r3, [pc, #588]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800baaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800baae:	4b90      	ldr	r3, [pc, #576]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800baba:	e027      	b.n	800bb0c <_ux_device_stack_configuration_set+0xbc>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800babc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800bac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baca:	785b      	ldrb	r3, [r3, #1]
 800bacc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800bad0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d10b      	bne.n	800baf0 <_ux_device_stack_configuration_set+0xa0>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800bad8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800badc:	2208      	movs	r2, #8
 800bade:	4985      	ldr	r1, [pc, #532]	; (800bcf4 <_ux_device_stack_configuration_set+0x2a4>)
 800bae0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bae4:	f001 fb60 	bl	800d1a8 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800bae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d012      	beq.n	800bb16 <_ux_device_stack_configuration_set+0xc6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800baf0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800baf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800bafe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb06:	4413      	add	r3, r2
 800bb08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 800bb0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1d3      	bne.n	800babc <_ux_device_stack_configuration_set+0x6c>
 800bb14:	e000      	b.n	800bb18 <_ux_device_stack_configuration_set+0xc8>
                break;
 800bb16:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800bb18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <_ux_device_stack_configuration_set+0xda>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <_ux_device_stack_configuration_set+0xda>
        return(UX_ERROR);
 800bb26:	23ff      	movs	r3, #255	; 0xff
 800bb28:	e131      	b.n	800bd8e <_ux_device_stack_configuration_set+0x33e>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800bb2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d02d      	beq.n	800bb92 <_ux_device_stack_configuration_set+0x142>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800bb36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800bb42:	e022      	b.n	800bb8a <_ux_device_stack_configuration_set+0x13a>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800bb44:	2303      	movs	r3, #3
 800bb46:	60fb      	str	r3, [r7, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800bb48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb4c:	617b      	str	r3, [r7, #20]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800bb4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800bb58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb5c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800bb5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d006      	beq.n	800bb74 <_ux_device_stack_configuration_set+0x124>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800bb66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6c:	f107 020c 	add.w	r2, r7, #12
 800bb70:	4610      	mov	r0, r2
 800bb72:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800bb74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7a:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800bb7c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800bb80:	f000 ff46 	bl	800ca10 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800bb84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        while (interface_ptr != UX_NULL)
 800bb8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1d8      	bne.n	800bb44 <_ux_device_stack_configuration_set+0xf4>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800bb92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb96:	2200      	movs	r2, #0
 800bb98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800bb9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bba0:	2201      	movs	r2, #1
 800bba2:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800bba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	2113      	movs	r1, #19
 800bbae:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800bbb2:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <_ux_device_stack_configuration_set+0x16e>
        return(UX_SUCCESS);
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e0e7      	b.n	800bd8e <_ux_device_stack_configuration_set+0x33e>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800bbbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800bbc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbcc:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 800bbce:	2208      	movs	r2, #8
 800bbd0:	4948      	ldr	r1, [pc, #288]	; (800bcf4 <_ux_device_stack_configuration_set+0x2a4>)
 800bbd2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbd6:	f001 fae7 	bl	800d1a8 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800bbda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <_ux_device_stack_configuration_set+0x198>
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	e000      	b.n	800bbea <_ux_device_stack_configuration_set+0x19a>
 800bbe8:	2201      	movs	r2, #1
 800bbea:	4b41      	ldr	r3, [pc, #260]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800bbf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbf4:	095a      	lsrs	r2, r3, #5
 800bbf6:	4b3e      	ldr	r3, [pc, #248]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f002 0201 	and.w	r2, r2, #1
 800bbfe:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800bc02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800bc08:	e0af      	b.n	800bd6a <_ux_device_stack_configuration_set+0x31a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800bc0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800bc14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800bc1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bc22:	2b0b      	cmp	r3, #11
 800bc24:	d10e      	bne.n	800bc44 <_ux_device_stack_configuration_set+0x1f4>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800bc26:	2301      	movs	r3, #1
 800bc28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800bc2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc30:	3302      	adds	r3, #2
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800bc38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc3c:	3303      	adds	r3, #3
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800bc44:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	f040 8080 	bne.w	800bd4e <_ux_device_stack_configuration_set+0x2fe>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800bc4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bc52:	2209      	movs	r2, #9
 800bc54:	4928      	ldr	r1, [pc, #160]	; (800bcf8 <_ux_device_stack_configuration_set+0x2a8>)
 800bc56:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc5a:	f001 faa5 	bl	800d1a8 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800bc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d174      	bne.n	800bd4e <_ux_device_stack_configuration_set+0x2fe>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800bc64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d147      	bne.n	800bcfc <_ux_device_stack_configuration_set+0x2ac>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800bc6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d126      	bne.n	800bcc4 <_ux_device_stack_configuration_set+0x274>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800bc76:	4b1e      	ldr	r3, [pc, #120]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bc7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800bc82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d124      	bne.n	800bcd6 <_ux_device_stack_configuration_set+0x286>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800bc8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d11d      	bne.n	800bcd6 <_ux_device_stack_configuration_set+0x286>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800bc9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d116      	bne.n	800bcd6 <_ux_device_stack_configuration_set+0x286>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800bca8:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcae:	3356      	adds	r3, #86	; 0x56
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcb8:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800bcba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcc2:	e008      	b.n	800bcd6 <_ux_device_stack_configuration_set+0x286>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <_ux_device_stack_configuration_set+0x2a0>)
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcca:	3356      	adds	r3, #86	; 0x56
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bcd4:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800bcd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800bce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d12b      	bne.n	800bd40 <_ux_device_stack_configuration_set+0x2f0>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800bce8:	2300      	movs	r3, #0
 800bcea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcee:	e027      	b.n	800bd40 <_ux_device_stack_configuration_set+0x2f0>
 800bcf0:	20003b04 	.word	0x20003b04
 800bcf4:	20000040 	.word	0x20000040
 800bcf8:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800bcfc:	4b26      	ldr	r3, [pc, #152]	; (800bd98 <_ux_device_stack_configuration_set+0x348>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bd04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800bd08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d116      	bne.n	800bd40 <_ux_device_stack_configuration_set+0x2f0>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800bd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d10f      	bne.n	800bd40 <_ux_device_stack_configuration_set+0x2f0>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800bd20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd24:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d108      	bne.n	800bd40 <_ux_device_stack_configuration_set+0x2f0>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800bd2e:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <_ux_device_stack_configuration_set+0x348>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd34:	3356      	adds	r3, #86	; 0x56
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd3e:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800bd40:	2200      	movs	r2, #0
 800bd42:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800bd46:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bd4a:	f000 fea9 	bl	800caa0 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800bd4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800bd5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd64:	4413      	add	r3, r2
 800bd66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 800bd6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f47f af4b 	bne.w	800bc0a <_ux_device_stack_configuration_set+0x1ba>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800bd74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd78:	2203      	movs	r2, #3
 800bd7a:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800bd7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	2203      	movs	r2, #3
 800bd84:	2113      	movs	r1, #19
 800bd86:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800bd8a:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	37b0      	adds	r7, #176	; 0xb0
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20003b04 	.word	0x20003b04

0800bd9c <_ux_device_stack_control_request_process>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800bd9c:	b590      	push	{r4, r7, lr}
 800bd9e:	b09d      	sub	sp, #116	; 0x74
 800bda0:	af02      	add	r7, sp, #8
 800bda2:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800bda4:	23ff      	movs	r3, #255	; 0xff
 800bda6:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bda8:	4b9f      	ldr	r3, [pc, #636]	; (800c028 <_ux_device_stack_control_request_process+0x28c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800bdae:	4b9e      	ldr	r3, [pc, #632]	; (800c028 <_ux_device_stack_control_request_process+0x28c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3320      	adds	r3, #32
 800bdb4:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f040 812e 	bne.w	800c01c <_ux_device_stack_control_request_process+0x280>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bdc6:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bdce:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3354      	adds	r3, #84	; 0x54
 800bdd4:	3302      	adds	r3, #2
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 fd5d 	bl	800d896 <_ux_utility_short_get>
 800bddc:	64f8      	str	r0, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3354      	adds	r3, #84	; 0x54
 800bde2:	3304      	adds	r3, #4
 800bde4:	4618      	mov	r0, r3
 800bde6:	f001 fd56 	bl	800d896 <_ux_utility_short_get>
 800bdea:	64b8      	str	r0, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3354      	adds	r3, #84	; 0x54
 800bdf0:	3306      	adds	r3, #6
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 fd4f 	bl	800d896 <_ux_utility_short_get>
 800bdf8:	6478      	str	r0, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800bdfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdfc:	2b06      	cmp	r3, #6
 800bdfe:	d002      	beq.n	800be06 <_ux_device_stack_control_request_process+0x6a>
 800be00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be02:	2b07      	cmp	r3, #7
 800be04:	d10d      	bne.n	800be22 <_ux_device_stack_control_request_process+0x86>
 800be06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be08:	0a1b      	lsrs	r3, r3, #8
 800be0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d007      	beq.n	800be22 <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800be12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be14:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800be18:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800be1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be1c:	f043 0320 	orr.w	r3, r3, #32
 800be20:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800be22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be28:	2b40      	cmp	r3, #64	; 0x40
 800be2a:	d134      	bne.n	800be96 <_ux_device_stack_control_request_process+0xfa>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800be2c:	4b7e      	ldr	r3, [pc, #504]	; (800c028 <_ux_device_stack_control_request_process+0x28c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800be34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be36:	429a      	cmp	r2, r3
 800be38:	d12d      	bne.n	800be96 <_ux_device_stack_control_request_process+0xfa>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800be3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be3e:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800be40:	4b79      	ldr	r3, [pc, #484]	; (800c028 <_ux_device_stack_control_request_process+0x28c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f107 020c 	add.w	r2, r7, #12
 800be50:	9201      	str	r2, [sp, #4]
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800be5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800be5c:	47a0      	blx	r4
 800be5e:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800be60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be62:	2b00      	cmp	r3, #0
 800be64:	d110      	bne.n	800be88 <_ux_device_stack_control_request_process+0xec>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800be66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be68:	333c      	adds	r3, #60	; 0x3c
 800be6a:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800be6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be6e:	3330      	adds	r3, #48	; 0x30
 800be70:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2203      	movs	r2, #3
 800be76:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f001 f81a 	bl	800ceb8 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800be84:	2300      	movs	r3, #0
 800be86:	e0ca      	b.n	800c01e <_ux_device_stack_control_request_process+0x282>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800be88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be8a:	333c      	adds	r3, #60	; 0x3c
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fb5d 	bl	800c54c <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800be92:	2300      	movs	r3, #0
 800be94:	e0c3      	b.n	800c01e <_ux_device_stack_control_request_process+0x282>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800be96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be9c:	2b20      	cmp	r3, #32
 800be9e:	d004      	beq.n	800beaa <_ux_device_stack_control_request_process+0x10e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800bea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800bea6:	2b40      	cmp	r3, #64	; 0x40
 800bea8:	d14b      	bne.n	800bf42 <_ux_device_stack_control_request_process+0x1a6>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800beaa:	2304      	movs	r3, #4
 800beac:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800beae:	2300      	movs	r3, #0
 800beb0:	663b      	str	r3, [r7, #96]	; 0x60
 800beb2:	e037      	b.n	800bf24 <_ux_device_stack_control_request_process+0x188>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800beb4:	4b5c      	ldr	r3, [pc, #368]	; (800c028 <_ux_device_stack_control_request_process+0x28c>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beba:	3356      	adds	r3, #86	; 0x56
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800bec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d026      	beq.n	800bf18 <_ux_device_stack_control_request_process+0x17c>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800beca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800becc:	f003 0303 	and.w	r3, r3, #3
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d114      	bne.n	800befe <_ux_device_stack_control_request_process+0x162>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 800bed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beda:	429a      	cmp	r2, r3
 800bedc:	d11e      	bne.n	800bf1c <_ux_device_stack_control_request_process+0x180>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800bede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bee4:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 800bee6:	2b07      	cmp	r3, #7
 800bee8:	d109      	bne.n	800befe <_ux_device_stack_control_request_process+0x162>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800beea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beec:	2b00      	cmp	r3, #0
 800beee:	d106      	bne.n	800befe <_ux_device_stack_control_request_process+0x162>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bef6:	461a      	mov	r2, r3
                         (request == 0x00) &&
 800bef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800befa:	4293      	cmp	r3, r2
 800befc:	d10e      	bne.n	800bf1c <_ux_device_stack_control_request_process+0x180>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800befe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf00:	633b      	str	r3, [r7, #48]	; 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800bf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf06:	f107 0210 	add.w	r2, r7, #16
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	4798      	blx	r3
 800bf0e:	65f8      	str	r0, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800bf10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <_ux_device_stack_control_request_process+0x190>
 800bf16:	e002      	b.n	800bf1e <_ux_device_stack_control_request_process+0x182>
                    continue;
 800bf18:	bf00      	nop
 800bf1a:	e000      	b.n	800bf1e <_ux_device_stack_control_request_process+0x182>
                        continue;
 800bf1c:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800bf1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf20:	3301      	adds	r3, #1
 800bf22:	663b      	str	r3, [r7, #96]	; 0x60
 800bf24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf26:	2b0f      	cmp	r3, #15
 800bf28:	d9c4      	bls.n	800beb4 <_ux_device_stack_control_request_process+0x118>
 800bf2a:	e000      	b.n	800bf2e <_ux_device_stack_control_request_process+0x192>

                    /* We are done, break the loop!  */
                    break;
 800bf2c:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800bf2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d004      	beq.n	800bf3e <_ux_device_stack_control_request_process+0x1a2>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800bf34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf36:	333c      	adds	r3, #60	; 0x3c
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fb07 	bl	800c54c <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800bf3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf40:	e06d      	b.n	800c01e <_ux_device_stack_control_request_process+0x282>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800bf42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf44:	2b0c      	cmp	r3, #12
 800bf46:	d85e      	bhi.n	800c006 <_ux_device_stack_control_request_process+0x26a>
 800bf48:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <_ux_device_stack_control_request_process+0x1b4>)
 800bf4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4e:	bf00      	nop
 800bf50:	0800bf85 	.word	0x0800bf85
 800bf54:	0800bf93 	.word	0x0800bf93
 800bf58:	0800c007 	.word	0x0800c007
 800bf5c:	0800bfa1 	.word	0x0800bfa1
 800bf60:	0800c007 	.word	0x0800c007
 800bf64:	0800bfaf 	.word	0x0800bfaf
 800bf68:	0800bfc5 	.word	0x0800bfc5
 800bf6c:	0800bfd3 	.word	0x0800bfd3
 800bf70:	0800bfd9 	.word	0x0800bfd9
 800bf74:	0800bfe1 	.word	0x0800bfe1
 800bf78:	0800bfeb 	.word	0x0800bfeb
 800bf7c:	0800bff5 	.word	0x0800bff5
 800bf80:	0800c001 	.word	0x0800c001
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800bf84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf88:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf8a:	f000 fb17 	bl	800c5bc <_ux_device_stack_get_status>
 800bf8e:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bf90:	e03c      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800bf92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf96:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf98:	f7ff fcd8 	bl	800b94c <_ux_device_stack_clear_feature>
 800bf9c:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bf9e:	e035      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800bfa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfa2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bfa4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bfa6:	f000 fedf 	bl	800cd68 <_ux_device_stack_set_feature>
 800bfaa:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bfac:	e02e      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800bfae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfb2:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800bfb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfba:	2111      	movs	r1, #17
 800bfbc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bfbe:	4798      	blx	r3
 800bfc0:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bfc2:	e023      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800bfc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bfc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bfca:	f000 f82f 	bl	800c02c <_ux_device_stack_descriptor_send>
 800bfce:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bfd0:	e01c      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800bfd2:	2354      	movs	r3, #84	; 0x54
 800bfd4:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800bfd6:	e019      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800bfd8:	f7ff fd16 	bl	800ba08 <_ux_device_stack_configuration_get>
 800bfdc:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bfde:	e015      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800bfe0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bfe2:	f7ff fd35 	bl	800ba50 <_ux_device_stack_configuration_set>
 800bfe6:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bfe8:	e010      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800bfea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bfec:	f7ff f9ee 	bl	800b3cc <_ux_device_stack_alternate_setting_get>
 800bff0:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bff2:	e00b      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800bff4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bff6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bff8:	f7ff fa26 	bl	800b448 <_ux_device_stack_alternate_setting_set>
 800bffc:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800bffe:	e005      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800c000:	2300      	movs	r3, #0
 800c002:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800c004:	e002      	b.n	800c00c <_ux_device_stack_control_request_process+0x270>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800c006:	2354      	movs	r3, #84	; 0x54
 800c008:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800c00a:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800c00c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d004      	beq.n	800c01c <_ux_device_stack_control_request_process+0x280>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800c012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c014:	333c      	adds	r3, #60	; 0x3c
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fa98 	bl	800c54c <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800c01c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800c01e:	4618      	mov	r0, r3
 800c020:	376c      	adds	r7, #108	; 0x6c
 800c022:	46bd      	mov	sp, r7
 800c024:	bd90      	pop	{r4, r7, pc}
 800c026:	bf00      	nop
 800c028:	20003b04 	.word	0x20003b04

0800c02c <_ux_device_stack_descriptor_send>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b0a2      	sub	sp, #136	; 0x88
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	677b      	str	r3, [r7, #116]	; 0x74
UINT                            status =  UX_ERROR;
 800c03c:	23ff      	movs	r3, #255	; 0xff
 800c03e:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c040:	4ba4      	ldr	r3, [pc, #656]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c046:	4ba3      	ldr	r3, [pc, #652]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3320      	adds	r3, #32
 800c04c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c04e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c050:	333c      	adds	r3, #60	; 0x3c
 800c052:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c056:	3330      	adds	r3, #48	; 0x30
 800c058:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c05c:	2203      	movs	r2, #3
 800c05e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800c066:	2300      	movs	r3, #0
 800c068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	0a1b      	lsrs	r3, r3, #8
 800c070:	b2db      	uxtb	r3, r3
 800c072:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	2b0e      	cmp	r3, #14
 800c07e:	f200 81f8 	bhi.w	800c472 <_ux_device_stack_descriptor_send+0x446>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <_ux_device_stack_descriptor_send+0x5c>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c0c5 	.word	0x0800c0c5
 800c08c:	0800c169 	.word	0x0800c169
 800c090:	0800c2a5 	.word	0x0800c2a5
 800c094:	0800c473 	.word	0x0800c473
 800c098:	0800c473 	.word	0x0800c473
 800c09c:	0800c0cf 	.word	0x0800c0cf
 800c0a0:	0800c169 	.word	0x0800c169
 800c0a4:	0800c473 	.word	0x0800c473
 800c0a8:	0800c0df 	.word	0x0800c0df
 800c0ac:	0800c473 	.word	0x0800c473
 800c0b0:	0800c473 	.word	0x0800c473
 800c0b4:	0800c473 	.word	0x0800c473
 800c0b8:	0800c473 	.word	0x0800c473
 800c0bc:	0800c473 	.word	0x0800c473
 800c0c0:	0800c169 	.word	0x0800c169
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b12      	cmp	r3, #18
 800c0c8:	d901      	bls.n	800c0ce <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800c0ca:	2312      	movs	r3, #18
 800c0cc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b06      	cmp	r3, #6
 800c0d2:	d104      	bne.n	800c0de <_ux_device_stack_descriptor_send+0xb2>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b0a      	cmp	r3, #10
 800c0d8:	d901      	bls.n	800c0de <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800c0da:	230a      	movs	r3, #10
 800c0dc:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b09      	cmp	r3, #9
 800c0e2:	d104      	bne.n	800c0ee <_ux_device_stack_descriptor_send+0xc2>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b05      	cmp	r3, #5
 800c0e8:	d901      	bls.n	800c0ee <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800c0ea:	2305      	movs	r3, #5
 800c0ec:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c0ee:	4b79      	ldr	r3, [pc, #484]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c0f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c0fa:	4b76      	ldr	r3, [pc, #472]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c102:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 800c104:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c10a:	4413      	add	r3, r2
 800c10c:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800c10e:	e025      	b.n	800c15c <_ux_device_stack_descriptor_send+0x130>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800c110:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800c118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c11c:	3301      	adds	r3, #1
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	4293      	cmp	r3, r2
 800c126:	d10f      	bne.n	800c148 <_ux_device_stack_descriptor_send+0x11c>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800c128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c12e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c132:	4618      	mov	r0, r3
 800c134:	f001 f9e3 	bl	800d4fe <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c13c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c13e:	f000 febb 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800c142:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800c144:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800c146:	e19f      	b.n	800c488 <_ux_device_stack_descriptor_send+0x45c>
            device_framework_length -=  descriptor_length;
 800c148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c14a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 800c150:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c156:	4413      	add	r3, r2
 800c158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 800c15c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c162:	429a      	cmp	r2, r3
 800c164:	d3d4      	bcc.n	800c110 <_ux_device_stack_descriptor_send+0xe4>
        break;
 800c166:	e18f      	b.n	800c488 <_ux_device_stack_descriptor_send+0x45c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b07      	cmp	r3, #7
 800c16c:	d110      	bne.n	800c190 <_ux_device_stack_descriptor_send+0x164>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800c16e:	4b59      	ldr	r3, [pc, #356]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800c17a:	4b56      	ldr	r3, [pc, #344]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c182:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 800c184:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c18a:	4413      	add	r3, r2
 800c18c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c18e:	e051      	b.n	800c234 <_ux_device_stack_descriptor_send+0x208>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c190:	4b50      	ldr	r3, [pc, #320]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c19c:	4b4d      	ldr	r3, [pc, #308]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c1a4:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 800c1a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ac:	4413      	add	r3, r2
 800c1ae:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800c1b0:	e040      	b.n	800c234 <_ux_device_stack_descriptor_send+0x208>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800c1b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	d112      	bne.n	800c1e6 <_ux_device_stack_descriptor_send+0x1ba>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800c1c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b0f      	cmp	r3, #15
 800c1ca:	d129      	bne.n	800c220 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	2204      	movs	r2, #4
 800c1d2:	4941      	ldr	r1, [pc, #260]	; (800c2d8 <_ux_device_stack_descriptor_send+0x2ac>)
 800c1d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c1d8:	f000 ffe6 	bl	800d1a8 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 800c1e4:	e02b      	b.n	800c23e <_ux_device_stack_descriptor_send+0x212>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800c1e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d116      	bne.n	800c220 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800c1f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d10c      	bne.n	800c216 <_ux_device_stack_descriptor_send+0x1ea>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800c1fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c200:	2208      	movs	r2, #8
 800c202:	4936      	ldr	r1, [pc, #216]	; (800c2dc <_ux_device_stack_descriptor_send+0x2b0>)
 800c204:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c208:	f000 ffce 	bl	800d1a8 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800c210:	2300      	movs	r3, #0
 800c212:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 800c214:	e013      	b.n	800c23e <_ux_device_stack_descriptor_send+0x212>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800c216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c21a:	3301      	adds	r3, #1
 800c21c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800c220:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800c228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c22e:	4413      	add	r3, r2
 800c230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 800c234:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d3b9      	bcc.n	800c1b2 <_ux_device_stack_descriptor_send+0x186>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800c23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c240:	2b00      	cmp	r3, #0
 800c242:	f040 811e 	bne.w	800c482 <_ux_device_stack_descriptor_send+0x456>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800c246:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d202      	bcs.n	800c254 <_ux_device_stack_descriptor_send+0x228>
                length =  target_descriptor_length;
 800c24e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c250:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c252:	e001      	b.n	800c258 <_ux_device_stack_descriptor_send+0x22c>
            else
                length =  host_length;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800c258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c25e:	d90c      	bls.n	800c27a <_ux_device_stack_descriptor_send+0x24e>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800c260:	2212      	movs	r2, #18
 800c262:	2109      	movs	r1, #9
 800c264:	2002      	movs	r0, #2
 800c266:	f000 feb1 	bl	800cfcc <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c270:	2114      	movs	r1, #20
 800c272:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c274:	4798      	blx	r3
 800c276:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800c278:	e106      	b.n	800c488 <_ux_device_stack_descriptor_send+0x45c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800c27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c280:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c284:	4618      	mov	r0, r3
 800c286:	f001 f93a 	bl	800d4fe <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800c28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c29a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c29c:	f000 fe0c 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800c2a0:	6738      	str	r0, [r7, #112]	; 0x70
        }
        break;
 800c2a2:	e0ee      	b.n	800c482 <_ux_device_stack_descriptor_send+0x456>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800c2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d14f      	bne.n	800c34a <_ux_device_stack_descriptor_send+0x31e>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <_ux_device_stack_descriptor_send+0x2a8>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c2b2:	3302      	adds	r3, #2
 800c2b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2b8:	d912      	bls.n	800c2e0 <_ux_device_stack_descriptor_send+0x2b4>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800c2ba:	2212      	movs	r2, #18
 800c2bc:	2109      	movs	r1, #9
 800c2be:	2002      	movs	r0, #2
 800c2c0:	f000 fe84 	bl	800cfcc <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2ca:	2114      	movs	r1, #20
 800c2cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c2ce:	4798      	blx	r3
 800c2d0:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800c2d2:	e0d9      	b.n	800c488 <_ux_device_stack_descriptor_send+0x45c>
 800c2d4:	20003b04 	.word	0x20003b04
 800c2d8:	20000054 	.word	0x20000054
 800c2dc:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800c2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800c2e6:	4b6b      	ldr	r3, [pc, #428]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2f6:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800c2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800c300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c302:	1c98      	adds	r0, r3, #2
 800c304:	4b63      	ldr	r3, [pc, #396]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800c30c:	4b61      	ldr	r3, [pc, #388]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c30e:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800c310:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c314:	461a      	mov	r2, r3
 800c316:	f001 f8f2 	bl	800d4fe <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800c31a:	4b5e      	ldr	r3, [pc, #376]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c322:	3302      	adds	r3, #2
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d906      	bls.n	800c338 <_ux_device_stack_descriptor_send+0x30c>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800c32a:	4b5a      	ldr	r3, [pc, #360]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c332:	3302      	adds	r3, #2
 800c334:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c336:	e001      	b.n	800c33c <_ux_device_stack_descriptor_send+0x310>
            else
                length =  host_length;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c340:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c342:	f000 fdb9 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800c346:	6738      	str	r0, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800c348:	e09d      	b.n	800c486 <_ux_device_stack_descriptor_send+0x45a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800c34a:	4b52      	ldr	r3, [pc, #328]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c352:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800c354:	4b4f      	ldr	r3, [pc, #316]	; (800c494 <_ux_device_stack_descriptor_send+0x468>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c35c:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 800c35e:	e07a      	b.n	800c456 <_ux_device_stack_descriptor_send+0x42a>
                if (_ux_utility_short_get(string_framework) == request_index)
 800c360:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c362:	f001 fa98 	bl	800d896 <_ux_utility_short_get>
 800c366:	4602      	mov	r2, r0
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d164      	bne.n	800c438 <_ux_device_stack_descriptor_send+0x40c>
                    if (*(string_framework + 2) == descriptor_index)
 800c36e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c370:	3302      	adds	r3, #2
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	461a      	mov	r2, r3
 800c376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c378:	4293      	cmp	r3, r2
 800c37a:	d15d      	bne.n	800c438 <_ux_device_stack_descriptor_send+0x40c>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800c37c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c37e:	3303      	adds	r3, #3
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c38a:	dd0c      	ble.n	800c3a6 <_ux_device_stack_descriptor_send+0x37a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800c38c:	2212      	movs	r2, #18
 800c38e:	2109      	movs	r1, #9
 800c390:	2002      	movs	r0, #2
 800c392:	f000 fe1b 	bl	800cfcc <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c39c:	2114      	movs	r1, #20
 800c39e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c3a0:	4798      	blx	r3
 800c3a2:	6738      	str	r0, [r7, #112]	; 0x70
                            break;
 800c3a4:	e05a      	b.n	800c45c <_ux_device_stack_descriptor_send+0x430>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800c3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800c3ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3ae:	3303      	adds	r3, #3
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3bc:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800c3be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	2203      	movs	r2, #3
 800c3c4:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	663b      	str	r3, [r7, #96]	; 0x60
 800c3ca:	e015      	b.n	800c3f8 <_ux_device_stack_descriptor_send+0x3cc>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800c3cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3d2:	441a      	add	r2, r3
 800c3d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c3dc:	440b      	add	r3, r1
 800c3de:	7812      	ldrb	r2, [r2, #0]
 800c3e0:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800c3e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3ec:	4413      	add	r3, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800c3f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	663b      	str	r3, [r7, #96]	; 0x60
 800c3f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3fa:	3303      	adds	r3, #3
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c402:	4293      	cmp	r3, r2
 800c404:	d3e2      	bcc.n	800c3cc <_ux_device_stack_descriptor_send+0x3a0>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800c406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c408:	3303      	adds	r3, #3
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	3301      	adds	r3, #1
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	461a      	mov	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4293      	cmp	r3, r2
 800c416:	d906      	bls.n	800c426 <_ux_device_stack_descriptor_send+0x3fa>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800c418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c41a:	3303      	adds	r3, #3
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	3301      	adds	r3, #1
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c424:	e001      	b.n	800c42a <_ux_device_stack_descriptor_send+0x3fe>
                            length =  host_length;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c42e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c430:	f000 fd42 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800c434:	6738      	str	r0, [r7, #112]	; 0x70
                        break;
 800c436:	e011      	b.n	800c45c <_ux_device_stack_descriptor_send+0x430>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800c438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c43a:	3303      	adds	r3, #3
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	3b04      	subs	r3, #4
 800c446:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800c448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c44a:	3303      	adds	r3, #3
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	3304      	adds	r3, #4
 800c450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c452:	4413      	add	r3, r2
 800c454:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 800c456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d181      	bne.n	800c360 <_ux_device_stack_descriptor_send+0x334>
            if (string_framework_length == 0)
 800c45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d111      	bne.n	800c486 <_ux_device_stack_descriptor_send+0x45a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c468:	2114      	movs	r1, #20
 800c46a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c46c:	4798      	blx	r3
                return(UX_ERROR);
 800c46e:	23ff      	movs	r3, #255	; 0xff
 800c470:	e00b      	b.n	800c48a <_ux_device_stack_descriptor_send+0x45e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c478:	2114      	movs	r1, #20
 800c47a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c47c:	4798      	blx	r3
        return(UX_ERROR);
 800c47e:	23ff      	movs	r3, #255	; 0xff
 800c480:	e003      	b.n	800c48a <_ux_device_stack_descriptor_send+0x45e>
        break;
 800c482:	bf00      	nop
 800c484:	e000      	b.n	800c488 <_ux_device_stack_descriptor_send+0x45c>
        break;
 800c486:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800c488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3788      	adds	r7, #136	; 0x88
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20003b04 	.word	0x20003b04

0800c498 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b092      	sub	sp, #72	; 0x48
 800c49c:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800c49e:	23ff      	movs	r3, #255	; 0xff
 800c4a0:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c4a2:	4b29      	ldr	r3, [pc, #164]	; (800c548 <_ux_device_stack_disconnect+0xb0>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <_ux_device_stack_disconnect+0xb0>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3320      	adds	r3, #32
 800c4ae:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d123      	bne.n	800c500 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4be:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800c4c0:	e018      	b.n	800c4f4 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800c4c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c8:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800c4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800c4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d004      	beq.n	800c4e4 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4de:	1d3a      	adds	r2, r7, #4
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800c4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800c4ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c4ec:	f000 fa90 	bl	800ca10 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface_ptr != UX_NULL)
 800c4f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e3      	bne.n	800c4c2 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d107      	bne.n	800c518 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800c508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50a:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800c50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c50e:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800c510:	210f      	movs	r1, #15
 800c512:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c514:	4798      	blx	r3
 800c516:	6438      	str	r0, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800c518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51a:	2200      	movs	r2, #0
 800c51c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c526:	4b08      	ldr	r3, [pc, #32]	; (800c548 <_ux_device_stack_disconnect+0xb0>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d005      	beq.n	800c53e <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800c532:	4b05      	ldr	r3, [pc, #20]	; (800c548 <_ux_device_stack_disconnect+0xb0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800c53a:	200a      	movs	r0, #10
 800c53c:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800c53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800c540:	4618      	mov	r0, r3
 800c542:	3748      	adds	r7, #72	; 0x48
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	20003b04 	.word	0x20003b04

0800c54c <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c554:	4b18      	ldr	r3, [pc, #96]	; (800c5b8 <_ux_device_stack_endpoint_stall+0x6c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800c55a:	23ff      	movs	r3, #255	; 0xff
 800c55c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c55e:	f3ef 8310 	mrs	r3, PRIMASK
 800c562:	613b      	str	r3, [r7, #16]
    return(posture);
 800c564:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c566:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c568:	b672      	cpsid	i
    return(int_posture);
 800c56a:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800c56c:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800c56e:	4b12      	ldr	r3, [pc, #72]	; (800c5b8 <_ux_device_stack_endpoint_stall+0x6c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6a1b      	ldr	r3, [r3, #32]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d013      	beq.n	800c5a0 <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d00f      	beq.n	800c5a0 <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	2114      	movs	r1, #20
 800c588:	69b8      	ldr	r0, [r7, #24]
 800c58a:	4798      	blx	r3
 800c58c:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	f003 0303 	and.w	r3, r3, #3
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2202      	movs	r2, #2
 800c59e:	605a      	str	r2, [r3, #4]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f383 8810 	msr	PRIMASK, r3
}
 800c5aa:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800c5ac:	69fb      	ldr	r3, [r7, #28]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3720      	adds	r7, #32
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20003b04 	.word	0x20003b04

0800c5bc <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	; 0x28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c5c8:	4b39      	ldr	r3, [pc, #228]	; (800c6b0 <_ux_device_stack_get_status+0xf4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c5ce:	4b38      	ldr	r3, [pc, #224]	; (800c6b0 <_ux_device_stack_get_status+0xf4>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3320      	adds	r3, #32
 800c5d4:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	333c      	adds	r3, #60	; 0x3c
 800c5da:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	3330      	adds	r3, #48	; 0x30
 800c5e0:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d002      	beq.n	800c608 <_ux_device_stack_get_status+0x4c>
 800c602:	2b02      	cmp	r3, #2
 800c604:	d021      	beq.n	800c64a <_ux_device_stack_get_status+0x8e>
 800c606:	e03a      	b.n	800c67e <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800c60e:	d102      	bne.n	800c616 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800c610:	2301      	movs	r3, #1
 800c612:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800c614:	e03b      	b.n	800c68e <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800c616:	4b26      	ldr	r3, [pc, #152]	; (800c6b0 <_ux_device_stack_get_status+0xf4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d103      	bne.n	800c62a <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	2201      	movs	r2, #1
 800c628:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800c62a:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <_ux_device_stack_get_status+0xf4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c632:	2b00      	cmp	r3, #0
 800c634:	d02b      	beq.n	800c68e <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	781a      	ldrb	r2, [r3, #0]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	f042 0202 	orr.w	r2, r2, #2
 800c644:	b2d2      	uxtb	r2, r2
 800c646:	701a      	strb	r2, [r3, #0]
        break;
 800c648:	e021      	b.n	800c68e <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	2115      	movs	r1, #21
 800c652:	6a38      	ldr	r0, [r7, #32]
 800c654:	4798      	blx	r3
 800c656:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	2bff      	cmp	r3, #255	; 0xff
 800c65c:	d007      	beq.n	800c66e <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d116      	bne.n	800c692 <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	2201      	movs	r2, #1
 800c66a:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800c66c:	e011      	b.n	800c692 <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	69ba      	ldr	r2, [r7, #24]
 800c674:	2114      	movs	r1, #20
 800c676:	6a38      	ldr	r0, [r7, #32]
 800c678:	4798      	blx	r3
            return(UX_SUCCESS);            
 800c67a:	2300      	movs	r3, #0
 800c67c:	e014      	b.n	800c6a8 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	2114      	movs	r1, #20
 800c686:	6a38      	ldr	r0, [r7, #32]
 800c688:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800c68a:	2300      	movs	r3, #0
 800c68c:	e00c      	b.n	800c6a8 <_ux_device_stack_get_status+0xec>
        break;
 800c68e:	bf00      	nop
 800c690:	e000      	b.n	800c694 <_ux_device_stack_get_status+0xd8>
        break;
 800c692:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	2203      	movs	r2, #3
 800c698:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800c69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c69e:	6978      	ldr	r0, [r7, #20]
 800c6a0:	f000 fc0a 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800c6a4:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800c6a6:	693b      	ldr	r3, [r7, #16]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3728      	adds	r7, #40	; 0x28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20003b04 	.word	0x20003b04

0800c6b4 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b094      	sub	sp, #80	; 0x50
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c6c2:	4b9a      	ldr	r3, [pc, #616]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	3320      	adds	r3, #32
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800c6ca:	4b98      	ldr	r3, [pc, #608]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800c6d4:	4b95      	ldr	r3, [pc, #596]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800c6de:	4b93      	ldr	r3, [pc, #588]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800c6e8:	4b90      	ldr	r3, [pc, #576]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800c6f2:	4b8e      	ldr	r3, [pc, #568]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6f8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800c6fc:	4b8b      	ldr	r3, [pc, #556]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c702:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800c706:	4b89      	ldr	r3, [pc, #548]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c70c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800c710:	4b86      	ldr	r3, [pc, #536]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c716:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800c71a:	4b84      	ldr	r3, [pc, #528]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c720:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800c724:	f44f 728a 	mov.w	r2, #276	; 0x114
 800c728:	2100      	movs	r1, #0
 800c72a:	2000      	movs	r0, #0
 800c72c:	f000 fdbe 	bl	800d2ac <_ux_utility_memory_allocate>
 800c730:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 800c738:	2312      	movs	r3, #18
 800c73a:	e160      	b.n	800c9fe <_ux_device_stack_initialize+0x34a>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800c73c:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6a3a      	ldr	r2, [r7, #32]
 800c742:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	336c      	adds	r3, #108	; 0x6c
 800c74a:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800c74c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c750:	2101      	movs	r1, #1
 800c752:	2000      	movs	r0, #0
 800c754:	f000 fdaa 	bl	800d2ac <_ux_utility_memory_allocate>
 800c758:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 800c766:	2312      	movs	r3, #18
 800c768:	64bb      	str	r3, [r7, #72]	; 0x48
 800c76a:	e001      	b.n	800c770 <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 800c76c:	2300      	movs	r3, #0
 800c76e:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800c770:	2300      	movs	r3, #0
 800c772:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 800c774:	2300      	movs	r3, #0
 800c776:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 800c778:	2300      	movs	r3, #0
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800c77c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f040 8090 	bne.w	800c8a4 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800c784:	4b69      	ldr	r3, [pc, #420]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800c78e:	4b67      	ldr	r3, [pc, #412]	; (800c92c <_ux_device_stack_initialize+0x278>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c796:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800c798:	2300      	movs	r3, #0
 800c79a:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800c7a4:	e054      	b.n	800c850 <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	785b      	ldrb	r3, [r3, #1]
 800c7b0:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800c7b2:	7dfb      	ldrb	r3, [r7, #23]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d029      	beq.n	800c80c <_ux_device_stack_initialize+0x158>
 800c7b8:	2b04      	cmp	r3, #4
 800c7ba:	d13e      	bne.n	800c83a <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	3303      	adds	r3, #3
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10b      	bne.n	800c7de <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800c7c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	4413      	add	r3, r2
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	3301      	adds	r3, #1
 800c7da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7dc:	e00a      	b.n	800c7f4 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d203      	bcs.n	800c7f4 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	3302      	adds	r3, #2
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d21d      	bcs.n	800c83e <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	3302      	adds	r3, #2
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 800c80a:	e018      	b.n	800c83e <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800c80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c810:	429a      	cmp	r2, r3
 800c812:	d901      	bls.n	800c818 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800c818:	2300      	movs	r3, #0
 800c81a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800c81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	4413      	add	r3, r2
 800c822:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800c824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c828:	429a      	cmp	r2, r3
 800c82a:	d901      	bls.n	800c830 <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800c82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82e:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800c830:	2300      	movs	r3, #0
 800c832:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 800c834:	2300      	movs	r3, #0
 800c836:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 800c838:	e002      	b.n	800c840 <_ux_device_stack_initialize+0x18c>

            default:
                break;
 800c83a:	bf00      	nop
 800c83c:	e000      	b.n	800c840 <_ux_device_stack_initialize+0x18c>
                break;
 800c83e:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800c840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800c848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	4413      	add	r3, r2
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 800c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1a7      	bne.n	800c7a6 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800c856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	4413      	add	r3, r2
 800c85c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800c85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c862:	429a      	cmp	r2, r3
 800c864:	d901      	bls.n	800c86a <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800c866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c868:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800c86a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c86e:	429a      	cmp	r2, r3
 800c870:	d901      	bls.n	800c876 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800c876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800c87c:	2242      	movs	r2, #66	; 0x42
 800c87e:	2103      	movs	r1, #3
 800c880:	2002      	movs	r0, #2
 800c882:	f000 fba3 	bl	800cfcc <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800c886:	2342      	movs	r3, #66	; 0x42
 800c888:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800c88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d109      	bne.n	800c8a4 <_ux_device_stack_initialize+0x1f0>
 800c890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c892:	2b0f      	cmp	r3, #15
 800c894:	d906      	bls.n	800c8a4 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800c896:	2212      	movs	r2, #18
 800c898:	2103      	movs	r1, #3
 800c89a:	2002      	movs	r0, #2
 800c89c:	f000 fb96 	bl	800cfcc <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800c8a0:	2312      	movs	r3, #18
 800c8a2:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800c8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d118      	bne.n	800c8dc <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8ae:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800c8ba:	2338      	movs	r3, #56	; 0x38
 800c8bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8be:	2100      	movs	r1, #0
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	f000 fdf7 	bl	800d4b4 <_ux_utility_memory_allocate_mulc_safe>
 800c8c6:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 800c8ce:	2312      	movs	r3, #18
 800c8d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8d2:	e003      	b.n	800c8dc <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800c8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d045      	beq.n	800c96e <_ux_device_stack_initialize+0x2ba>
 800c8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d142      	bne.n	800c96e <_ux_device_stack_initialize+0x2ba>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800c8e8:	2390      	movs	r3, #144	; 0x90
 800c8ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	f000 fde0 	bl	800d4b4 <_ux_utility_memory_allocate_mulc_safe>
 800c8f4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 800c8fc:	2312      	movs	r3, #18
 800c8fe:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 800c900:	e037      	b.n	800c972 <_ux_device_stack_initialize+0x2be>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c906:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800c90a:	e022      	b.n	800c952 <_ux_device_stack_initialize+0x29e>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800c90c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c910:	2101      	movs	r1, #1
 800c912:	2000      	movs	r0, #0
 800c914:	f000 fcca 	bl	800d2ac <_ux_utility_memory_allocate>
 800c918:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800c91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c91c:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800c91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c922:	2b00      	cmp	r3, #0
 800c924:	d104      	bne.n	800c930 <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800c926:	2312      	movs	r3, #18
 800c928:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 800c92a:	e01f      	b.n	800c96c <_ux_device_stack_initialize+0x2b8>
 800c92c:	20003b04 	.word	0x20003b04
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800c930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c932:	3360      	adds	r3, #96	; 0x60
 800c934:	2200      	movs	r2, #0
 800c936:	4934      	ldr	r1, [pc, #208]	; (800ca08 <_ux_device_stack_initialize+0x354>)
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 ff3f 	bl	800d7bc <_ux_utility_semaphore_create>
 800c93e:	64b8      	str	r0, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800c940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 800c946:	2315      	movs	r3, #21
 800c948:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 800c94a:	e00f      	b.n	800c96c <_ux_device_stack_initialize+0x2b8>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800c94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c94e:	3390      	adds	r3, #144	; 0x90
 800c950:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 800c958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c95a:	4613      	mov	r3, r2
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	4413      	add	r3, r2
 800c960:	011b      	lsls	r3, r3, #4
 800c962:	440b      	add	r3, r1
 800c964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c966:	429a      	cmp	r2, r3
 800c968:	d3d0      	bcc.n	800c90c <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 800c96a:	e002      	b.n	800c972 <_ux_device_stack_initialize+0x2be>
 800c96c:	e001      	b.n	800c972 <_ux_device_stack_initialize+0x2be>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800c96e:	2300      	movs	r3, #0
 800c970:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800c972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <_ux_device_stack_initialize+0x2c8>
        return(UX_SUCCESS);
 800c978:	2300      	movs	r3, #0
 800c97a:	e040      	b.n	800c9fe <_ux_device_stack_initialize+0x34a>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800c97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d021      	beq.n	800c9c6 <_ux_device_stack_initialize+0x312>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800c982:	e014      	b.n	800c9ae <_ux_device_stack_initialize+0x2fa>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800c984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <_ux_device_stack_initialize+0x2e2>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800c98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c98e:	3360      	adds	r3, #96	; 0x60
 800c990:	4618      	mov	r0, r3
 800c992:	f000 ff2d 	bl	800d7f0 <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800c996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <_ux_device_stack_initialize+0x2f4>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800c99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fdca 	bl	800d53c <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800c9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9aa:	3b90      	subs	r3, #144	; 0x90
 800c9ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c9b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d2e4      	bcs.n	800c984 <_ux_device_stack_initialize+0x2d0>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fdbb 	bl	800d53c <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <_ux_device_stack_initialize+0x328>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 fdb0 	bl	800d53c <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d004      	beq.n	800c9ee <_ux_device_stack_initialize+0x33a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 fda7 	bl	800d53c <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800c9ee:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <_ux_device_stack_initialize+0x358>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fda0 	bl	800d53c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800c9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3750      	adds	r7, #80	; 0x50
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	0800fdf8 	.word	0x0800fdf8
 800ca0c:	20003b04 	.word	0x20003b04

0800ca10 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ca18:	4b20      	ldr	r3, [pc, #128]	; (800ca9c <_ux_device_stack_interface_delete+0x8c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3320      	adds	r3, #32
 800ca1e:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca24:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800ca26:	e01c      	b.n	800ca62 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca30:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800ca32:	4b1a      	ldr	r3, [pc, #104]	; (800ca9c <_ux_device_stack_interface_delete+0x8c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	210f      	movs	r1, #15
 800ca40:	68b8      	ldr	r0, [r7, #8]
 800ca42:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1df      	bne.n	800ca28 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	631a      	str	r2, [r3, #48]	; 0x30
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	635a      	str	r2, [r3, #52]	; 0x34
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	20003b04 	.word	0x20003b04

0800caa0 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b092      	sub	sp, #72	; 0x48
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800caac:	4b82      	ldr	r3, [pc, #520]	; (800ccb8 <_ux_device_stack_interface_set+0x218>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cab2:	4b81      	ldr	r3, [pc, #516]	; (800ccb8 <_ux_device_stack_interface_set+0x218>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3320      	adds	r3, #32
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cac0:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 800caca:	e009      	b.n	800cae0 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800cacc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d009      	beq.n	800cae8 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800cad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cad6:	3338      	adds	r3, #56	; 0x38
 800cad8:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800cada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cadc:	3b01      	subs	r3, #1
 800cade:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 800cae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1f2      	bne.n	800cacc <_ux_device_stack_interface_set+0x2c>
 800cae6:	e000      	b.n	800caea <_ux_device_stack_interface_set+0x4a>
            break;
 800cae8:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800caea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d101      	bne.n	800caf4 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800caf0:	2312      	movs	r3, #18
 800caf2:	e0dd      	b.n	800ccb0 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800caf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caf6:	2201      	movs	r2, #1
 800caf8:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800cafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cafc:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800cafe:	2209      	movs	r2, #9
 800cb00:	496e      	ldr	r1, [pc, #440]	; (800ccbc <_ux_device_stack_interface_set+0x21c>)
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 fb50 	bl	800d1a8 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d104      	bne.n	800cb1c <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb16:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800cb1a:	e00e      	b.n	800cb3a <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb22:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800cb24:	e002      	b.n	800cb2c <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800cb26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2a:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800cb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1f8      	bne.n	800cb26 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800cb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb38:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	4413      	add	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800cb52:	e0a4      	b.n	800cc9e <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800cb60:	7efb      	ldrb	r3, [r7, #27]
 800cb62:	2b05      	cmp	r3, #5
 800cb64:	d009      	beq.n	800cb7a <_ux_device_stack_interface_set+0xda>
 800cb66:	2b05      	cmp	r3, #5
 800cb68:	f300 8090 	bgt.w	800cc8c <_ux_device_stack_interface_set+0x1ec>
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	f000 8087 	beq.w	800cc80 <_ux_device_stack_interface_set+0x1e0>
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	f000 8084 	beq.w	800cc80 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800cb78:	e088      	b.n	800cc8c <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800cb80:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cb88:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 800cb8a:	e00d      	b.n	800cba8 <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d103      	bne.n	800cb9c <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	2201      	movs	r2, #1
 800cb98:	601a      	str	r2, [r3, #0]
                    break;
 800cb9a:	e008      	b.n	800cbae <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	3390      	adds	r3, #144	; 0x90
 800cba0:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	3b01      	subs	r3, #1
 800cba6:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1ee      	bne.n	800cb8c <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800cbb4:	2312      	movs	r3, #18
 800cbb6:	e07b      	b.n	800ccb0 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800cbbc:	2206      	movs	r2, #6
 800cbbe:	4940      	ldr	r1, [pc, #256]	; (800ccc0 <_ux_device_stack_interface_set+0x220>)
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 faf1 	bl	800d1a8 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	3330      	adds	r3, #48	; 0x30
 800cbca:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 800cbd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800cbd6:	4b38      	ldr	r3, [pc, #224]	; (800ccb8 <_ux_device_stack_interface_set+0x218>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d118      	bne.n	800cc14 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d012      	beq.n	800cc14 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	69db      	ldr	r3, [r3, #28]
 800cbf2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800cbf6:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00a      	beq.n	800cc14 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	0adb      	lsrs	r3, r3, #11
 800cc02:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	3301      	adds	r3, #1
 800cc08:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	693a      	ldr	r2, [r7, #16]
 800cc0e:	fb02 f303 	mul.w	r3, r2, r3
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc18:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc1e:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f04f 32ff 	mov.w	r2, #4294967295
 800cc26:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc2c:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc32:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc3a:	210e      	movs	r1, #14
 800cc3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc3e:	4798      	blx	r3
 800cc40:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800cc42:	6a3b      	ldr	r3, [r7, #32]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]
                return(status);
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	e02e      	b.n	800ccb0 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800cc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d103      	bne.n	800cc62 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800cc5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc5e:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 800cc60:	e015      	b.n	800cc8e <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800cc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc66:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800cc68:	e002      	b.n	800cc70 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6e:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800cc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1f8      	bne.n	800cc6a <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800cc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc7c:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800cc7e:	e006      	b.n	800cc8e <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800cc80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cc82:	f000 f81f 	bl	800ccc4 <_ux_device_stack_interface_start>
 800cc86:	6238      	str	r0, [r7, #32]
            return(status);
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	e011      	b.n	800ccb0 <_ux_device_stack_interface_set+0x210>
            break;
 800cc8c:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f47f af57 	bne.w	800cb54 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800cca6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cca8:	f000 f80c 	bl	800ccc4 <_ux_device_stack_interface_start>
 800ccac:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800ccae:	6a3b      	ldr	r3, [r7, #32]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3748      	adds	r7, #72	; 0x48
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20003b04 	.word	0x20003b04
 800ccbc:	20000048 	.word	0x20000048
 800ccc0:	20000028 	.word	0x20000028

0800ccc4 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b090      	sub	sp, #64	; 0x40
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800cccc:	4b25      	ldr	r3, [pc, #148]	; (800cd64 <_ux_device_stack_interface_start+0xa0>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	3356      	adds	r3, #86	; 0x56
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800ccde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800cce4:	2357      	movs	r3, #87	; 0x57
 800cce6:	e038      	b.n	800cd5a <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cce8:	4b1e      	ldr	r3, [pc, #120]	; (800cd64 <_ux_device_stack_interface_start+0xa0>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3320      	adds	r3, #32
 800ccee:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a1b      	ldr	r3, [r3, #32]
 800ccfc:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd02:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd08:	627b      	str	r3, [r7, #36]	; 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800cd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800cd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd22:	f107 0208 	add.w	r2, r7, #8
 800cd26:	4610      	mov	r0, r2
 800cd28:	4798      	blx	r3
 800cd2a:	6378      	str	r0, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800cd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d112      	bne.n	800cd58 <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800cd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd34:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800cd36:	2302      	movs	r3, #2
 800cd38:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800cd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd3e:	f107 0208 	add.w	r2, r7, #8
 800cd42:	4610      	mov	r0, r2
 800cd44:	4798      	blx	r3
 800cd46:	6378      	str	r0, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d102      	bne.n	800cd54 <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd52:	605a      	str	r2, [r3, #4]

        return(status); 
 800cd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd56:	e000      	b.n	800cd5a <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800cd58:	2357      	movs	r3, #87	; 0x57
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3740      	adds	r7, #64	; 0x40
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20003b04 	.word	0x20003b04

0800cd68 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08a      	sub	sp, #40	; 0x28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cd74:	4b29      	ldr	r3, [pc, #164]	; (800ce1c <_ux_device_stack_set_feature+0xb4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cd7a:	4b28      	ldr	r3, [pc, #160]	; (800ce1c <_ux_device_stack_set_feature+0xb4>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3320      	adds	r3, #32
 800cd80:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	333c      	adds	r3, #60	; 0x3c
 800cd86:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f003 0303 	and.w	r3, r3, #3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <_ux_device_stack_set_feature+0x30>
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d014      	beq.n	800cdc0 <_ux_device_stack_set_feature+0x58>
 800cd96:	e035      	b.n	800ce04 <_ux_device_stack_set_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d10e      	bne.n	800cdbc <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800cd9e:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <_ux_device_stack_set_feature+0xb4>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d006      	beq.n	800cdb8 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800cdaa:	4b1c      	ldr	r3, [pc, #112]	; (800ce1c <_ux_device_stack_set_feature+0xb4>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

                /* OK. */
                return (UX_SUCCESS);
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	e02c      	b.n	800ce12 <_ux_device_stack_set_feature+0xaa>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800cdb8:	2354      	movs	r3, #84	; 0x54
 800cdba:	e02a      	b.n	800ce12 <_ux_device_stack_set_feature+0xaa>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800cdbc:	2354      	movs	r3, #84	; 0x54
 800cdbe:	e028      	b.n	800ce12 <_ux_device_stack_set_feature+0xaa>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cdc6:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800cdc8:	e019      	b.n	800cdfe <_ux_device_stack_set_feature+0x96>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdce:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800cdd0:	e00f      	b.n	800cdf2 <_ux_device_stack_set_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d107      	bne.n	800cdec <_ux_device_stack_set_feature+0x84>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	6a3a      	ldr	r2, [r7, #32]
 800cde2:	2114      	movs	r1, #20
 800cde4:	69f8      	ldr	r0, [r7, #28]
 800cde6:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800cde8:	2300      	movs	r3, #0
 800cdea:	e012      	b.n	800ce12 <_ux_device_stack_set_feature+0xaa>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800cdec:	6a3b      	ldr	r3, [r7, #32]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1ec      	bne.n	800cdd2 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1e2      	bne.n	800cdca <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	2114      	movs	r1, #20
 800ce0c:	69f8      	ldr	r0, [r7, #28]
 800ce0e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ce10:	2300      	movs	r3, #0
    }
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3728      	adds	r7, #40	; 0x28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20003b04 	.word	0x20003b04

0800ce20 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ce2a:	4b19      	ldr	r3, [pc, #100]	; (800ce90 <_ux_device_stack_transfer_abort+0x70>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce36:	f3ef 8310 	mrs	r3, PRIMASK
 800ce3a:	617b      	str	r3, [r7, #20]
    return(posture);
 800ce3c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ce3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce40:	b672      	cpsid	i
    return(int_posture);
 800ce42:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800ce44:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d114      	bne.n	800ce78 <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	699b      	ldr	r3, [r3, #24]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	210d      	movs	r1, #13
 800ce56:	69f8      	ldr	r0, [r7, #28]
 800ce58:	4798      	blx	r3
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f383 8810 	msr	PRIMASK, r3
}
 800ce64:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2204      	movs	r2, #4
 800ce6a:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	3330      	adds	r3, #48	; 0x30
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fd03 	bl	800d87c <_ux_utility_semaphore_put>
 800ce76:	e005      	b.n	800ce84 <_ux_device_stack_transfer_abort+0x64>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	f383 8810 	msr	PRIMASK, r3
}
 800ce82:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20003b04 	.word	0x20003b04

0800ce94 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3330      	adds	r3, #48	; 0x30
 800cea2:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f7ff ffba 	bl	800ce20 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
	...

0800ceb8 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08e      	sub	sp, #56	; 0x38
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d101      	bne.n	800ced0 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800cecc:	2300      	movs	r3, #0
 800cece:	e077      	b.n	800cfc0 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ced0:	f3ef 8310 	mrs	r3, PRIMASK
 800ced4:	623b      	str	r3, [r7, #32]
    return(posture);
 800ced6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ced8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceda:	b672      	cpsid	i
    return(int_posture);
 800cedc:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800cede:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800cee0:	4b39      	ldr	r3, [pc, #228]	; (800cfc8 <_ux_device_stack_transfer_request+0x110>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	633b      	str	r3, [r7, #48]	; 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d005      	beq.n	800cefa <_ux_device_stack_transfer_request+0x42>
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d002      	beq.n	800cefa <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d115      	bne.n	800cf26 <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2201      	movs	r2, #1
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	f383 8810 	msr	PRIMASK, r3
}
 800cf0a:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cf0c:	4b2e      	ldr	r3, [pc, #184]	; (800cfc8 <_ux_device_stack_transfer_request+0x110>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	f003 0303 	and.w	r3, r3, #3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10b      	bne.n	800cf3c <_ux_device_stack_transfer_request+0x84>
 800cf24:	e01b      	b.n	800cf5e <_ux_device_stack_transfer_request+0xa6>
 800cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf28:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f383 8810 	msr	PRIMASK, r3
}
 800cf30:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800cf32:	2325      	movs	r3, #37	; 0x25
 800cf34:	e044      	b.n	800cfc0 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800cf36:	2064      	movs	r0, #100	; 0x64
 800cf38:	f000 f91c 	bl	800d174 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d0f8      	beq.n	800cf36 <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d003      	beq.n	800cf58 <_ux_device_stack_transfer_request+0xa0>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2203      	movs	r2, #3
 800cf54:	629a      	str	r2, [r3, #40]	; 0x28
 800cf56:	e002      	b.n	800cf5e <_ux_device_stack_transfer_request+0xa6>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	d114      	bne.n	800cf90 <_ux_device_stack_transfer_request+0xd8>
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d011      	beq.n	800cf90 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d00d      	beq.n	800cf90 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	69da      	ldr	r2, [r3, #28]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf7e:	fb01 f202 	mul.w	r2, r1, r2
 800cf82:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d103      	bne.n	800cf90 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	651a      	str	r2, [r3, #80]	; 0x50
 800cf8e:	e002      	b.n	800cf96 <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	210c      	movs	r1, #12
 800cfb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfba:	4798      	blx	r3
 800cfbc:	6278      	str	r0, [r7, #36]	; 0x24

    /* And return the status.  */
    return(status);
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

#endif
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3738      	adds	r7, #56	; 0x38
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20003b04 	.word	0x20003b04

0800cfcc <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800cfd8:	4b0c      	ldr	r3, [pc, #48]	; (800d00c <_ux_system_error_handler+0x40>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <_ux_system_error_handler+0x40>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfe6:	3201      	adds	r2, #1
 800cfe8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800cfea:	4b08      	ldr	r3, [pc, #32]	; (800d00c <_ux_system_error_handler+0x40>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d006      	beq.n	800d002 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800cff4:	4b05      	ldr	r3, [pc, #20]	; (800d00c <_ux_system_error_handler+0x40>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	4798      	blx	r3
    }
}
 800d002:	bf00      	nop
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20003b08 	.word	0x20003b08

0800d010 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	; 0x28
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	2100      	movs	r1, #0
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f000 fb68 	bl	800d6f8 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800d028:	4a4f      	ldr	r2, [pc, #316]	; (800d168 <_ux_system_initialize+0x158>)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800d02e:	235c      	movs	r3, #92	; 0x5c
 800d030:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d036:	4413      	add	r3, r2
 800d038:	4a4c      	ldr	r2, [pc, #304]	; (800d16c <_ux_system_initialize+0x15c>)
 800d03a:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 800d044:	4b48      	ldr	r3, [pc, #288]	; (800d168 <_ux_system_initialize+0x158>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04c:	440a      	add	r2, r1
 800d04e:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 800d050:	4b45      	ldr	r3, [pc, #276]	; (800d168 <_ux_system_initialize+0x158>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	330f      	adds	r3, #15
 800d05c:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	f023 030f 	bic.w	r3, r3, #15
 800d064:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	4413      	add	r3, r2
 800d06c:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	6a3a      	ldr	r2, [r7, #32]
 800d072:	429a      	cmp	r2, r3
 800d074:	d301      	bcc.n	800d07a <_ux_system_initialize+0x6a>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800d076:	2312      	movs	r3, #18
 800d078:	e071      	b.n	800d15e <_ux_system_initialize+0x14e>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800d07a:	69f9      	ldr	r1, [r7, #28]
 800d07c:	4b3a      	ldr	r3, [pc, #232]	; (800d168 <_ux_system_initialize+0x158>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6a3a      	ldr	r2, [r7, #32]
 800d082:	1a8a      	subs	r2, r1, r2
 800d084:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 800d086:	4b38      	ldr	r3, [pc, #224]	; (800d168 <_ux_system_initialize+0x158>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	4b37      	ldr	r3, [pc, #220]	; (800d168 <_ux_system_initialize+0x158>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6852      	ldr	r2, [r2, #4]
 800d090:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800d092:	4b35      	ldr	r3, [pc, #212]	; (800d168 <_ux_system_initialize+0x158>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6a3a      	ldr	r2, [r7, #32]
 800d098:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 800d09a:	4b33      	ldr	r3, [pc, #204]	; (800d168 <_ux_system_initialize+0x158>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d0a2:	4b31      	ldr	r3, [pc, #196]	; (800d168 <_ux_system_initialize+0x158>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	f1a3 0210 	sub.w	r2, r3, #16
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d112      	bne.n	800d0e2 <_ux_system_initialize+0xd2>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 800d0bc:	4b2a      	ldr	r3, [pc, #168]	; (800d168 <_ux_system_initialize+0x158>)
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	4b29      	ldr	r3, [pc, #164]	; (800d168 <_ux_system_initialize+0x158>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6852      	ldr	r2, [r2, #4]
 800d0c6:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 800d0c8:	4b27      	ldr	r3, [pc, #156]	; (800d168 <_ux_system_initialize+0x158>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	4b26      	ldr	r3, [pc, #152]	; (800d168 <_ux_system_initialize+0x158>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	6892      	ldr	r2, [r2, #8]
 800d0d2:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 800d0d4:	4b24      	ldr	r3, [pc, #144]	; (800d168 <_ux_system_initialize+0x158>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	4b23      	ldr	r3, [pc, #140]	; (800d168 <_ux_system_initialize+0x158>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6812      	ldr	r2, [r2, #0]
 800d0de:	60da      	str	r2, [r3, #12]
 800d0e0:	e02f      	b.n	800d142 <_ux_system_initialize+0x132>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	330f      	adds	r3, #15
 800d0ea:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	f023 030f 	bic.w	r3, r3, #15
 800d0f2:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 800d0f4:	4b1c      	ldr	r3, [pc, #112]	; (800d168 <_ux_system_initialize+0x158>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	3a0f      	subs	r2, #15
 800d0fc:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <_ux_system_initialize+0x158>)
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	4b19      	ldr	r3, [pc, #100]	; (800d168 <_ux_system_initialize+0x158>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6912      	ldr	r2, [r2, #16]
 800d108:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800d10a:	4b17      	ldr	r3, [pc, #92]	; (800d168 <_ux_system_initialize+0x158>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6a3a      	ldr	r2, [r7, #32]
 800d110:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 800d112:	4b15      	ldr	r3, [pc, #84]	; (800d168 <_ux_system_initialize+0x158>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68d8      	ldr	r0, [r3, #12]
 800d118:	4b13      	ldr	r3, [pc, #76]	; (800d168 <_ux_system_initialize+0x158>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	461a      	mov	r2, r3
 800d120:	2100      	movs	r1, #0
 800d122:	f000 fae9 	bl	800d6f8 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 800d126:	4b10      	ldr	r3, [pc, #64]	; (800d168 <_ux_system_initialize+0x158>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d12e:	4b0e      	ldr	r3, [pc, #56]	; (800d168 <_ux_system_initialize+0x158>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	f1a3 0210 	sub.w	r2, r3, #16
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	2200      	movs	r2, #0
 800d140:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <_ux_system_initialize+0x158>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	331c      	adds	r3, #28
 800d148:	4909      	ldr	r1, [pc, #36]	; (800d170 <_ux_system_initialize+0x160>)
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 faee 	bl	800d72c <_ux_utility_mutex_create>
 800d150:	6178      	str	r0, [r7, #20]
    if(status != UX_SUCCESS)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <_ux_system_initialize+0x14c>
        return(UX_MUTEX_ERROR);
 800d158:	2317      	movs	r3, #23
 800d15a:	e000      	b.n	800d15e <_ux_system_initialize+0x14e>
#endif

    return(UX_SUCCESS);
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3728      	adds	r7, #40	; 0x28
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20003b08 	.word	0x20003b08
 800d16c:	20003b04 	.word	0x20003b04
 800d170:	0800fe18 	.word	0x0800fe18

0800d174 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2264      	movs	r2, #100	; 0x64
 800d180:	fb02 f303 	mul.w	r3, r2, r3
 800d184:	4a07      	ldr	r2, [pc, #28]	; (800d1a4 <_ux_utility_delay_ms+0x30>)
 800d186:	fba2 2303 	umull	r2, r3, r2, r3
 800d18a:	099b      	lsrs	r3, r3, #6
 800d18c:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3301      	adds	r3, #1
 800d192:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7fc fd67 	bl	8009c68 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800d19a:	bf00      	nop
}
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	10624dd3 	.word	0x10624dd3

0800d1a8 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800d1b6:	e026      	b.n	800d206 <_ux_utility_descriptor_parse+0x5e>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	60ba      	str	r2, [r7, #8]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d00b      	beq.n	800d1dc <_ux_utility_descriptor_parse+0x34>
 800d1c4:	2b04      	cmp	r3, #4
 800d1c6:	d113      	bne.n	800d1f0 <_ux_utility_descriptor_parse+0x48>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 f825 	bl	800d218 <_ux_utility_long_get>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	60fb      	str	r3, [r7, #12]
            break;                   
 800d1da:	e011      	b.n	800d200 <_ux_utility_descriptor_parse+0x58>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 fb5a 	bl	800d896 <_ux_utility_short_get>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	3302      	adds	r3, #2
 800d1ec:	60fb      	str	r3, [r7, #12]
            break;                   
 800d1ee:	e007      	b.n	800d200 <_ux_utility_descriptor_parse+0x58>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	3304      	adds	r3, #4
 800d204:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	1e5a      	subs	r2, r3, #1
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1d3      	bne.n	800d1b8 <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 800d210:	bf00      	nop
}
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	607a      	str	r2, [r7, #4]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	1c5a      	adds	r2, r3, #1
 800d22e:	607a      	str	r2, [r7, #4]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	021b      	lsls	r3, r3, #8
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	4313      	orrs	r3, r2
 800d238:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	041b      	lsls	r3, r3, #16
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	4313      	orrs	r3, r2
 800d248:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	061b      	lsls	r3, r3, #24
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	4313      	orrs	r3, r2
 800d254:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800d256:	68fb      	ldr	r3, [r7, #12]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3714      	adds	r7, #20
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	0a19      	lsrs	r1, r3, #8
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	b2ca      	uxtb	r2, r1
 800d286:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	0c19      	lsrs	r1, r3, #16
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	607a      	str	r2, [r7, #4]
 800d292:	b2ca      	uxtb	r2, r1
 800d294:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	0e1b      	lsrs	r3, r3, #24
 800d29a:	b2da      	uxtb	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800d2a0:	bf00      	nop
}
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08c      	sub	sp, #48	; 0x30
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800d2b8:	4b7d      	ldr	r3, [pc, #500]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	331c      	adds	r3, #28
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 fa65 	bl	800d78e <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ca:	d101      	bne.n	800d2d0 <_ux_utility_memory_allocate+0x24>
        memory_alignment = UX_NO_ALIGN;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2b0e      	cmp	r3, #14
 800d2d4:	d801      	bhi.n	800d2da <_ux_utility_memory_allocate+0x2e>
        memory_alignment =  UX_ALIGN_MIN;
 800d2d6:	230f      	movs	r3, #15
 800d2d8:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	330f      	adds	r3, #15
 800d2e8:	f023 030f 	bic.w	r3, r3, #15
 800d2ec:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	4413      	add	r3, r2
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	68b8      	ldr	r0, [r7, #8]
 800d2fa:	f000 f9bb 	bl	800d674 <_ux_utility_memory_free_block_best_get>
 800d2fe:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10c      	bne.n	800d320 <_ux_utility_memory_allocate+0x74>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800d306:	4b6a      	ldr	r3, [pc, #424]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	331c      	adds	r3, #28
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 fa33 	bl	800d778 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800d312:	2212      	movs	r2, #18
 800d314:	2108      	movs	r1, #8
 800d316:	2002      	movs	r0, #2
 800d318:	f7ff fe58 	bl	800cfcc <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 800d31c:	2300      	movs	r3, #0
 800d31e:	e0c3      	b.n	800d4a8 <_ux_utility_memory_allocate+0x1fc>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	3310      	adds	r3, #16
 800d324:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	1e5a      	subs	r2, r3, #1
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	4013      	ands	r3, r2
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d126      	bne.n	800d380 <_ux_utility_memory_allocate+0xd4>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	3310      	adds	r3, #16
 800d336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d338:	4413      	add	r3, r2
 800d33a:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	689a      	ldr	r2, [r3, #8]
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d348:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	f1a3 0210 	sub.w	r2, r3, #16
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	2200      	movs	r2, #0
 800d35e:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	69fa      	ldr	r2, [r7, #28]
 800d36a:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3310      	adds	r3, #16
 800d37c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d37e:	e05e      	b.n	800d43e <_ux_utility_memory_allocate+0x192>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d380:	6a3b      	ldr	r3, [r7, #32]
 800d382:	3310      	adds	r3, #16
 800d384:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	4413      	add	r3, r2
 800d38c:	3b01      	subs	r3, #1
 800d38e:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	425b      	negs	r3, r3
 800d394:	6a3a      	ldr	r2, [r7, #32]
 800d396:	4013      	ands	r3, r2
 800d398:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	3b10      	subs	r3, #16
 800d39e:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3a4:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	689a      	ldr	r2, [r3, #8]
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	3310      	adds	r3, #16
 800d3c4:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	69fa      	ldr	r2, [r7, #28]
 800d3ca:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 800d3cc:	69fa      	ldr	r2, [r7, #28]
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	1ad2      	subs	r2, r2, r3
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	f1a3 0210 	sub.w	r2, r3, #16
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	2b10      	cmp	r3, #16
 800d3f6:	d91c      	bls.n	800d432 <_ux_utility_memory_allocate+0x186>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 800d3f8:	69fa      	ldr	r2, [r7, #28]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	3310      	adds	r3, #16
 800d400:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	689a      	ldr	r2, [r3, #8]
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	69fa      	ldr	r2, [r7, #28]
 800d40e:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	f1a3 0210 	sub.w	r2, r3, #16
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2200      	movs	r2, #0
 800d41e:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	1ad2      	subs	r2, r2, r3
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3310      	adds	r3, #16
 800d438:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	3310      	adds	r3, #16
 800d442:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	2100      	movs	r1, #0
 800d448:	6938      	ldr	r0, [r7, #16]
 800d44a:	f000 f955 	bl	800d6f8 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800d44e:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68da      	ldr	r2, [r3, #12]
 800d454:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d108      	bne.n	800d470 <_ux_utility_memory_allocate+0x1c4>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800d45e:	4b14      	ldr	r3, [pc, #80]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6899      	ldr	r1, [r3, #8]
 800d464:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d46a:	1a8a      	subs	r2, r1, r2
 800d46c:	609a      	str	r2, [r3, #8]
 800d46e:	e014      	b.n	800d49a <_ux_utility_memory_allocate+0x1ee>
    }
    else
    {

       switch (memory_cache_flag)
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d108      	bne.n	800d488 <_ux_utility_memory_allocate+0x1dc>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 800d476:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6959      	ldr	r1, [r3, #20]
 800d47c:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d482:	1a8a      	subs	r2, r1, r2
 800d484:	615a      	str	r2, [r3, #20]

            break;
 800d486:	e008      	b.n	800d49a <_ux_utility_memory_allocate+0x1ee>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	6899      	ldr	r1, [r3, #8]
 800d48e:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d494:	1a8a      	subs	r2, r1, r2
 800d496:	609a      	str	r2, [r3, #8]
            break;
 800d498:	bf00      	nop
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800d49a:	4b05      	ldr	r3, [pc, #20]	; (800d4b0 <_ux_utility_memory_allocate+0x204>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	331c      	adds	r3, #28
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 f969 	bl	800d778 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 800d4a6:	693b      	ldr	r3, [r7, #16]
}                                
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3730      	adds	r7, #48	; 0x30
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20003b08 	.word	0x20003b08

0800d4b4 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
 800d4c0:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00a      	beq.n	800d4de <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	fba3 2302 	umull	r2, r3, r3, r2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d000      	beq.n	800d4d8 <_ux_utility_memory_allocate_mulc_safe+0x24>
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	460b      	mov	r3, r1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10a      	bne.n	800d4f4 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	683a      	ldr	r2, [r7, #0]
 800d4e2:	fb02 f303 	mul.w	r3, r2, r3
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff fede 	bl	800d2ac <_ux_utility_memory_allocate>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	e000      	b.n	800d4f6 <_ux_utility_memory_allocate_mulc_safe+0x42>
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b087      	sub	sp, #28
 800d502:	af00      	add	r7, sp, #0
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	60b9      	str	r1, [r7, #8]
 800d508:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800d512:	e007      	b.n	800d524 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	1c53      	adds	r3, r2, #1
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	1c59      	adds	r1, r3, #1
 800d51e:	6139      	str	r1, [r7, #16]
 800d520:	7812      	ldrb	r2, [r2, #0]
 800d522:	701a      	strb	r2, [r3, #0]
    while(length--)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	1e5a      	subs	r2, r3, #1
 800d528:	607a      	str	r2, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1f2      	bne.n	800d514 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800d52e:	bf00      	nop
}
 800d530:	371c      	adds	r7, #28
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
	...

0800d53c <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800d544:	4b49      	ldr	r3, [pc, #292]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	331c      	adds	r3, #28
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 f91f 	bl	800d78e <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	3b10      	subs	r3, #16
 800d554:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3310      	adds	r3, #16
 800d55c:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d566:	d010      	beq.n	800d58a <_ux_utility_memory_free+0x4e>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800d56c:	4a40      	ldr	r2, [pc, #256]	; (800d670 <_ux_utility_memory_free+0x134>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d00b      	beq.n	800d58a <_ux_utility_memory_free+0x4e>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800d572:	4b3e      	ldr	r3, [pc, #248]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	331c      	adds	r3, #28
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 f8fd 	bl	800d778 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 800d57e:	2219      	movs	r2, #25
 800d580:	2108      	movs	r1, #8
 800d582:	2002      	movs	r0, #2
 800d584:	f7ff fd22 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 800d588:	e06c      	b.n	800d664 <_ux_utility_memory_free+0x128>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	2200      	movs	r2, #0
 800d58e:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800d590:	e007      	b.n	800d5a2 <_ux_utility_memory_free+0x66>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d107      	bne.n	800d5ac <_ux_utility_memory_free+0x70>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1f3      	bne.n	800d592 <_ux_utility_memory_free+0x56>
 800d5aa:	e000      	b.n	800d5ae <_ux_utility_memory_free+0x72>

        else

            /* The previous memory block is not free.  */
            break;
 800d5ac:	bf00      	nop
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800d5b4:	e01a      	b.n	800d5ec <_ux_utility_memory_free+0xb0>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d006      	beq.n	800d5cc <_ux_utility_memory_free+0x90>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	60da      	str	r2, [r3, #12]
            break;
 800d5ca:	e012      	b.n	800d5f2 <_ux_utility_memory_free+0xb6>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	689a      	ldr	r2, [r3, #8]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f103 0210 	add.w	r2, r3, #16
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1e1      	bne.n	800d5b6 <_ux_utility_memory_free+0x7a>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800d5f2:	4b1e      	ldr	r3, [pc, #120]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68da      	ldr	r2, [r3, #12]
 800d5f8:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d108      	bne.n	800d614 <_ux_utility_memory_free+0xd8>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800d602:	4b1a      	ldr	r3, [pc, #104]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6899      	ldr	r1, [r3, #8]
 800d608:	4b18      	ldr	r3, [pc, #96]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	440a      	add	r2, r1
 800d610:	609a      	str	r2, [r3, #8]
 800d612:	e020      	b.n	800d656 <_ux_utility_memory_free+0x11a>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 800d614:	4b15      	ldr	r3, [pc, #84]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	429a      	cmp	r2, r3
 800d622:	d310      	bcc.n	800d646 <_ux_utility_memory_free+0x10a>
 800d624:	4b11      	ldr	r3, [pc, #68]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	429a      	cmp	r2, r3
 800d632:	d208      	bcs.n	800d646 <_ux_utility_memory_free+0x10a>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800d634:	4b0d      	ldr	r3, [pc, #52]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6899      	ldr	r1, [r3, #8]
 800d63a:	4b0c      	ldr	r3, [pc, #48]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	440a      	add	r2, r1
 800d642:	609a      	str	r2, [r3, #8]
 800d644:	e007      	b.n	800d656 <_ux_utility_memory_free+0x11a>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 800d646:	4b09      	ldr	r3, [pc, #36]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6959      	ldr	r1, [r3, #20]
 800d64c:	4b07      	ldr	r3, [pc, #28]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	440a      	add	r2, r1
 800d654:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800d656:	4b05      	ldr	r3, [pc, #20]	; (800d66c <_ux_utility_memory_free+0x130>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	331c      	adds	r3, #28
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 f88b 	bl	800d778 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800d662:	bf00      	nop
}
 800d664:	3718      	adds	r7, #24
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	20003b08 	.word	0x20003b08
 800d670:	80000001 	.word	0x80000001

0800d674 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d003      	beq.n	800d690 <_ux_utility_memory_free_block_best_get+0x1c>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d005      	beq.n	800d69a <_ux_utility_memory_free_block_best_get+0x26>
 800d68e:	e009      	b.n	800d6a4 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 800d690:	4b18      	ldr	r3, [pc, #96]	; (800d6f4 <_ux_utility_memory_free_block_best_get+0x80>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	60fb      	str	r3, [r7, #12]
            break;
 800d698:	e006      	b.n	800d6a8 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 800d69a:	4b16      	ldr	r3, [pc, #88]	; (800d6f4 <_ux_utility_memory_free_block_best_get+0x80>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	60fb      	str	r3, [r7, #12]
            break;
 800d6a2:	e001      	b.n	800d6a8 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	e01e      	b.n	800d6e6 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 800d6a8:	e019      	b.n	800d6de <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d112      	bne.n	800d6d8 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d20d      	bcs.n	800d6d8 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d102      	bne.n	800d6c8 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	60bb      	str	r3, [r7, #8]
 800d6c6:	e007      	b.n	800d6d8 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d201      	bcs.n	800d6d8 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e2      	bne.n	800d6aa <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 800d6e4:	68bb      	ldr	r3, [r7, #8]
}                                
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3714      	adds	r7, #20
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	20003b08 	.word	0x20003b08

0800d6f8 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b087      	sub	sp, #28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	460b      	mov	r3, r1
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800d70a:	e004      	b.n	800d716 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	1c5a      	adds	r2, r3, #1
 800d710:	617a      	str	r2, [r7, #20]
 800d712:	7afa      	ldrb	r2, [r7, #11]
 800d714:	701a      	strb	r2, [r3, #0]
    while(length--)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	1e5a      	subs	r2, r3, #1
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f5      	bne.n	800d70c <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800d720:	bf00      	nop
}
 800d722:	371c      	adds	r7, #28
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800d736:	2334      	movs	r3, #52	; 0x34
 800d738:	2200      	movs	r2, #0
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7fd f93d 	bl	800a9bc <_txe_mutex_create>
 800d742:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d004      	beq.n	800d754 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	2108      	movs	r1, #8
 800d74e:	2002      	movs	r0, #2
 800d750:	f7ff fc3c 	bl	800cfcc <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800d754:	68fb      	ldr	r3, [r7, #12]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7fd f9c6 	bl	800aaf8 <_txe_mutex_delete>
 800d76c:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d76e:	68fb      	ldr	r3, [r7, #12]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7fd fa51 	bl	800ac28 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800d786:	bf00      	nop
}
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b084      	sub	sp, #16
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800d796:	f04f 31ff 	mov.w	r1, #4294967295
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7fd f9ea 	bl	800ab74 <_txe_mutex_get>
 800d7a0:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d005      	beq.n	800d7b4 <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	2108      	movs	r1, #8
 800d7ac:	2002      	movs	r0, #2
 800d7ae:	f7ff fc0d 	bl	800cfcc <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
}
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800d7c8:	231c      	movs	r3, #28
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	68b9      	ldr	r1, [r7, #8]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7fd fba8 	bl	800af24 <_txe_semaphore_create>
 800d7d4:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d004      	beq.n	800d7e6 <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	2108      	movs	r1, #8
 800d7e0:	2002      	movs	r0, #2
 800d7e2:	f7ff fbf3 	bl	800cfcc <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800d7e6:	697b      	ldr	r3, [r7, #20]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7fd fc29 	bl	800b050 <_txe_semaphore_delete>
 800d7fe:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d800:	68fb      	ldr	r3, [r7, #12]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b092      	sub	sp, #72	; 0x48
 800d810:	af06      	add	r7, sp, #24
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 800d816:	f7fc f929 	bl	8009a6c <_tx_thread_identify>
 800d81a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 800d81c:	f107 001c 	add.w	r0, r7, #28
 800d820:	f107 0220 	add.w	r2, r7, #32
 800d824:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d828:	f107 0308 	add.w	r3, r7, #8
 800d82c:	9304      	str	r3, [sp, #16]
 800d82e:	f107 030c 	add.w	r3, r7, #12
 800d832:	9303      	str	r3, [sp, #12]
 800d834:	f107 0310 	add.w	r3, r7, #16
 800d838:	9302      	str	r3, [sp, #8]
 800d83a:	f107 0314 	add.w	r3, r7, #20
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	f107 0318 	add.w	r3, r7, #24
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	4603      	mov	r3, r0
 800d848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d84a:	f7fd fd91 	bl	800b370 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 800d84e:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <_ux_utility_semaphore_get+0x6c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	699a      	ldr	r2, [r3, #24]
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	429a      	cmp	r2, r3
 800d858:	d203      	bcs.n	800d862 <_ux_utility_semaphore_get+0x56>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 800d85a:	4b07      	ldr	r3, [pc, #28]	; (800d878 <_ux_utility_semaphore_get+0x6c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7fd fc31 	bl	800b0cc <_txe_semaphore_get>
 800d86a:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3730      	adds	r7, #48	; 0x30
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	20003b08 	.word	0x20003b08

0800d87c <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7fd fc63 	bl	800b150 <_txe_semaphore_put>
 800d88a:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d88c:	68fb      	ldr	r3, [r7, #12]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800d896:	b480      	push	{r7}
 800d898:	b085      	sub	sp, #20
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	021b      	lsls	r3, r3, #8
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	89fb      	ldrh	r3, [r7, #14]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800d8b8:	89fb      	ldrh	r3, [r7, #14]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b086      	sub	sp, #24
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800d8d8:	23ff      	movs	r3, #255	; 0xff
 800d8da:	e01d      	b.n	800d918 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00d      	beq.n	800d908 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d9f2      	bls.n	800d8e0 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800d8fa:	22ff      	movs	r2, #255	; 0xff
 800d8fc:	2108      	movs	r1, #8
 800d8fe:	2002      	movs	r0, #2
 800d900:	f7ff fb64 	bl	800cfcc <_ux_system_error_handler>

            return(UX_ERROR);
 800d904:	23ff      	movs	r3, #255	; 0xff
 800d906:	e007      	b.n	800d918 <_ux_utility_string_length_check+0x52>
            break;
 800d908:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3718      	adds	r7, #24
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a1b      	ldr	r3, [r3, #32]
 800d92c:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d932:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	6938      	ldr	r0, [r7, #16]
 800d954:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b08a      	sub	sp, #40	; 0x28
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a1b      	ldr	r3, [r3, #32]
 800d96c:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d972:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d974:	4b51      	ldr	r3, [pc, #324]	; (800dabc <_ux_device_class_cdc_acm_control_request+0x15c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	3320      	adds	r3, #32
 800d97a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	336c      	adds	r3, #108	; 0x6c
 800d980:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d988:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	3354      	adds	r3, #84	; 0x54
 800d98e:	3302      	adds	r3, #2
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff ff80 	bl	800d896 <_ux_utility_short_get>
 800d996:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	3354      	adds	r3, #84	; 0x54
 800d99c:	3306      	adds	r3, #6
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff ff79 	bl	800d896 <_ux_utility_short_get>
 800d9a4:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b22      	cmp	r3, #34	; 0x22
 800d9ae:	d009      	beq.n	800d9c4 <_ux_device_class_cdc_acm_control_request+0x64>
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	2b22      	cmp	r3, #34	; 0x22
 800d9b4:	d877      	bhi.n	800daa6 <_ux_device_class_cdc_acm_control_request+0x146>
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	2b20      	cmp	r3, #32
 800d9ba:	d051      	beq.n	800da60 <_ux_device_class_cdc_acm_control_request+0x100>
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	2b21      	cmp	r3, #33	; 0x21
 800d9c0:	d023      	beq.n	800da0a <_ux_device_class_cdc_acm_control_request+0xaa>
 800d9c2:	e070      	b.n	800daa6 <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d003      	beq.n	800d9e6 <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f003 0302 	and.w	r3, r3, #2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d054      	beq.n	800daaa <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	69f8      	ldr	r0, [r7, #28]
 800da06:	4798      	blx	r3
            }

            break ;
 800da08:	e04f      	b.n	800daaa <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	2b07      	cmp	r3, #7
 800da0e:	d901      	bls.n	800da14 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800da10:	2307      	movs	r3, #7
 800da12:	627b      	str	r3, [r7, #36]	; 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	68da      	ldr	r2, [r3, #12]
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da1c:	4619      	mov	r1, r3
 800da1e:	4610      	mov	r0, r2
 800da20:	f7ff fc20 	bl	800d264 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	3304      	adds	r3, #4
 800da2a:	69fa      	ldr	r2, [r7, #28]
 800da2c:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800da30:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	3305      	adds	r3, #5
 800da38:	69fa      	ldr	r2, [r7, #28]
 800da3a:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800da3e:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	3306      	adds	r3, #6
 800da46:	69fa      	ldr	r2, [r7, #28]
 800da48:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800da4c:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	2203      	movs	r2, #3
 800da52:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da58:	6978      	ldr	r0, [r7, #20]
 800da5a:	f7ff fa2d 	bl	800ceb8 <_ux_device_stack_transfer_request>
            break; 
 800da5e:	e027      	b.n	800dab0 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	4618      	mov	r0, r3
 800da66:	f7ff fbd7 	bl	800d218 <_ux_utility_long_get>
 800da6a:	4602      	mov	r2, r0
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	791a      	ldrb	r2, [r3, #4]
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	795a      	ldrb	r2, [r3, #5]
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	799a      	ldrb	r2, [r3, #6]
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d008      	beq.n	800daae <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	69f8      	ldr	r0, [r7, #28]
 800daa2:	4798      	blx	r3
            }

            break ;
 800daa4:	e003      	b.n	800daae <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800daa6:	23ff      	movs	r3, #255	; 0xff
 800daa8:	e003      	b.n	800dab2 <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800daaa:	bf00      	nop
 800daac:	e000      	b.n	800dab0 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800daae:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3728      	adds	r7, #40	; 0x28
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	20003b04 	.word	0x20003b04

0800dac0 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a1b      	ldr	r3, [r3, #32]
 800dacc:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dad2:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dade:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	695b      	ldr	r3, [r3, #20]
 800dae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d105      	bne.n	800daf8 <_ux_device_class_cdc_acm_deactivate+0x38>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf4:	61fb      	str	r3, [r7, #28]
 800daf6:	e002      	b.n	800dafe <_ux_device_class_cdc_acm_deactivate+0x3e>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafc:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800dafe:	2126      	movs	r1, #38	; 0x26
 800db00:	69f8      	ldr	r0, [r7, #28]
 800db02:	f7ff f9c7 	bl	800ce94 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800db06:	2126      	movs	r1, #38	; 0x26
 800db08:	69b8      	ldr	r0, [r7, #24]
 800db0a:	f7ff f9c3 	bl	800ce94 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800db0e:	2200      	movs	r2, #0
 800db10:	2107      	movs	r1, #7
 800db12:	6938      	ldr	r0, [r7, #16]
 800db14:	f000 f8bc 	bl	800dc90 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <_ux_device_class_cdc_acm_deactivate+0x68>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	6938      	ldr	r0, [r7, #16]
 800db26:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3720      	adds	r7, #32
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
	...

0800db44 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3b01      	subs	r3, #1
 800db52:	2b06      	cmp	r3, #6
 800db54:	d836      	bhi.n	800dbc4 <_ux_device_class_cdc_acm_entry+0x80>
 800db56:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <_ux_device_class_cdc_acm_entry+0x18>)
 800db58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5c:	0800db91 	.word	0x0800db91
 800db60:	0800dba1 	.word	0x0800dba1
 800db64:	0800dbad 	.word	0x0800dbad
 800db68:	0800dbb9 	.word	0x0800dbb9
 800db6c:	0800db79 	.word	0x0800db79
 800db70:	0800dbc5 	.word	0x0800dbc5
 800db74:	0800db85 	.word	0x0800db85
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f829 	bl	800dbd0 <_ux_device_class_cdc_acm_initialize>
 800db7e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	e020      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f9e1 	bl	800df4c <_ux_device_class_cdc_acm_uninitialize>
 800db8a:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	e01a      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	695b      	ldr	r3, [r3, #20]
 800db94:	2b0a      	cmp	r3, #10
 800db96:	d101      	bne.n	800db9c <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800db98:	2300      	movs	r3, #0
 800db9a:	e014      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800db9c:	2357      	movs	r3, #87	; 0x57
 800db9e:	e012      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff febd 	bl	800d920 <_ux_device_class_cdc_acm_activate>
 800dba6:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	e00c      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff ff87 	bl	800dac0 <_ux_device_class_cdc_acm_deactivate>
 800dbb2:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	e006      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff fed1 	bl	800d960 <_ux_device_class_cdc_acm_control_request>
 800dbbe:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	e000      	b.n	800dbc6 <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800dbc4:	2354      	movs	r3, #84	; 0x54
    }   
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop

0800dbd0 <_ux_device_class_cdc_acm_initialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a1b      	ldr	r3, [r3, #32]
 800dbdc:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800dbde:	2284      	movs	r2, #132	; 0x84
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	f7ff fb62 	bl	800d2ac <_ux_utility_memory_allocate>
 800dbe8:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d101      	bne.n	800dbf4 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800dbf0:	2312      	movs	r3, #18
 800dbf2:	e045      	b.n	800dc80 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	693a      	ldr	r2, [r7, #16]
 800dbf8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfe:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	689a      	ldr	r2, [r3, #8]
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	60da      	str	r2, [r3, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	3310      	adds	r3, #16
 800dc1c:	491a      	ldr	r1, [pc, #104]	; (800dc88 <_ux_device_class_cdc_acm_initialize+0xb8>)
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff fd84 	bl	800d72c <_ux_utility_mutex_create>
 800dc24:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d004      	beq.n	800dc36 <_ux_device_class_cdc_acm_initialize+0x66>
    {

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800dc2c:	6938      	ldr	r0, [r7, #16]
 800dc2e:	f7ff fc85 	bl	800d53c <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800dc32:	2317      	movs	r3, #23
 800dc34:	e024      	b.n	800dc80 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	3344      	adds	r3, #68	; 0x44
 800dc3a:	4914      	ldr	r1, [pc, #80]	; (800dc8c <_ux_device_class_cdc_acm_initialize+0xbc>)
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff fd75 	bl	800d72c <_ux_utility_mutex_create>
 800dc42:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d009      	beq.n	800dc5e <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	3310      	adds	r3, #16
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fd85 	bl	800d75e <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800dc54:	6938      	ldr	r0, [r7, #16]
 800dc56:	f7ff fc71 	bl	800d53c <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800dc5a:	2317      	movs	r3, #23
 800dc5c:	e010      	b.n	800dc80 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dc64:	679a      	str	r2, [r3, #120]	; 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2208      	movs	r2, #8
 800dc7a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	0800fe28 	.word	0x0800fe28
 800dc8c:	0800fe48 	.word	0x0800fe48

0800dc90 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08a      	sub	sp, #40	; 0x28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	2b08      	cmp	r3, #8
 800dca6:	f200 80b0 	bhi.w	800de0a <_ux_device_class_cdc_acm_ioctl+0x17a>
 800dcaa:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800dcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb0:	0800dcd5 	.word	0x0800dcd5
 800dcb4:	0800dd01 	.word	0x0800dd01
 800dcb8:	0800dd2d 	.word	0x0800dd2d
 800dcbc:	0800dd61 	.word	0x0800dd61
 800dcc0:	0800dd47 	.word	0x0800dd47
 800dcc4:	0800de0b 	.word	0x0800de0b
 800dcc8:	0800de0b 	.word	0x0800de0b
 800dccc:	0800ddc5 	.word	0x0800ddc5
 800dcd0:	0800ddc5 	.word	0x0800ddc5
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	791a      	ldrb	r2, [r3, #4]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	795a      	ldrb	r2, [r3, #5]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	799a      	ldrb	r2, [r3, #6]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            
            break;
 800dcfe:	e08d      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	719a      	strb	r2, [r3, #6]
            
            break;
 800dd2a:	e077      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	705a      	strb	r2, [r3, #1]
            
            break;
 800dd44:	e06a      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	781a      	ldrb	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	785a      	ldrb	r2, [r3, #1]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            
            break;
 800dd5e:	e05d      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6a:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d002      	beq.n	800dd78 <_ux_device_class_cdc_acm_ioctl+0xe8>
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	d00a      	beq.n	800dd8c <_ux_device_class_cdc_acm_ioctl+0xfc>
 800dd76:	e013      	b.n	800dda0 <_ux_device_class_cdc_acm_ioctl+0x110>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d110      	bne.n	800dda6 <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd88:	623b      	str	r3, [r7, #32]
                }
                break;
 800dd8a:	e00c      	b.n	800dda6 <_ux_device_class_cdc_acm_ioctl+0x116>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d008      	beq.n	800ddaa <_ux_device_class_cdc_acm_ioctl+0x11a>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800dd98:	6a3b      	ldr	r3, [r7, #32]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9c:	623b      	str	r3, [r7, #32]
                }
                break;
 800dd9e:	e004      	b.n	800ddaa <_ux_device_class_cdc_acm_ioctl+0x11a>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800dda0:	2353      	movs	r3, #83	; 0x53
 800dda2:	627b      	str	r3, [r7, #36]	; 0x24
 800dda4:	e002      	b.n	800ddac <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 800dda6:	bf00      	nop
 800dda8:	e000      	b.n	800ddac <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 800ddaa:	bf00      	nop
            }
        
            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	3330      	adds	r3, #48	; 0x30
 800ddb0:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d12f      	bne.n	800de1a <_ux_device_class_cdc_acm_ioctl+0x18a>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800ddba:	21f9      	movs	r1, #249	; 0xf9
 800ddbc:	69b8      	ldr	r0, [r7, #24]
 800ddbe:	f7ff f82f 	bl	800ce20 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800ddc2:	e02a      	b.n	800de1a <_ux_device_class_cdc_acm_ioctl+0x18a>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	2a08      	cmp	r2, #8
 800dddc:	d101      	bne.n	800dde2 <_ux_device_class_cdc_acm_ioctl+0x152>
 800ddde:	2200      	movs	r2, #0
 800dde0:	e000      	b.n	800dde4 <_ux_device_class_cdc_acm_ioctl+0x154>
 800dde2:	2280      	movs	r2, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d002      	beq.n	800ddee <_ux_device_class_cdc_acm_ioctl+0x15e>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800dde8:	6a3b      	ldr	r3, [r7, #32]
 800ddea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddec:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	3330      	adds	r3, #48	; 0x30
 800ddf2:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d102      	bne.n	800de02 <_ux_device_class_cdc_acm_ioctl+0x172>
                status = UX_ERROR;
 800ddfc:	23ff      	movs	r3, #255	; 0xff
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800de00:	e00c      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 800de08:	e008      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800de0a:	2254      	movs	r2, #84	; 0x54
 800de0c:	2107      	movs	r1, #7
 800de0e:	2002      	movs	r0, #2
 800de10:	f7ff f8dc 	bl	800cfcc <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800de14:	2354      	movs	r3, #84	; 0x54
 800de16:	627b      	str	r3, [r7, #36]	; 0x24
 800de18:	e000      	b.n	800de1c <_ux_device_class_cdc_acm_ioctl+0x18c>
            break;
 800de1a:	bf00      	nop
    }   

    /* Return status to caller.  */
    return(status);
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
          
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3728      	adds	r7, #40	; 0x28
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop

0800de28 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08a      	sub	sp, #40	; 0x28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 800de36:	2300      	movs	r3, #0
 800de38:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800de3a:	4b43      	ldr	r3, [pc, #268]	; (800df48 <_ux_device_class_cdc_acm_read+0x120>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3320      	adds	r3, #32
 800de40:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b03      	cmp	r3, #3
 800de48:	d006      	beq.n	800de58 <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800de4a:	2251      	movs	r2, #81	; 0x51
 800de4c:	2107      	movs	r1, #7
 800de4e:	2002      	movs	r0, #2
 800de50:	f7ff f8bc 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800de54:	2351      	movs	r3, #81	; 0x51
 800de56:	e073      	b.n	800df40 <_ux_device_class_cdc_acm_read+0x118>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de62:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <_ux_device_class_cdc_acm_read+0x4e>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de74:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3344      	adds	r3, #68	; 0x44
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff fc87 	bl	800d78e <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	3330      	adds	r3, #48	; 0x30
 800de84:	613b      	str	r3, [r7, #16]
    
    /* Reset the actual length.  */
    *actual_length =  0;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800de8c:	e040      	b.n	800df10 <_ux_device_class_cdc_acm_read+0xe8>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	69db      	ldr	r3, [r3, #28]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	d903      	bls.n	800dea0 <_ux_device_class_cdc_acm_read+0x78>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	e001      	b.n	800dea4 <_ux_device_class_cdc_acm_read+0x7c>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 800dea4:	69fa      	ldr	r2, [r7, #28]
 800dea6:	69f9      	ldr	r1, [r7, #28]
 800dea8:	6938      	ldr	r0, [r7, #16]
 800deaa:	f7ff f805 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800deae:	6238      	str	r0, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d125      	bne.n	800df02 <_ux_device_class_cdc_acm_read+0xda>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	68d9      	ldr	r1, [r3, #12]
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	461a      	mov	r2, r3
 800dec0:	68b8      	ldr	r0, [r7, #8]
 800dec2:	f7ff fb1c 	bl	800d4fe <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	699b      	ldr	r3, [r3, #24]
 800deca:	68ba      	ldr	r2, [r7, #8]
 800decc:	4413      	add	r3, r2
 800dece:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	441a      	add	r2, r3
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	1ad3      	subs	r3, r2, r3
 800dee6:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	699a      	ldr	r2, [r3, #24]
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	429a      	cmp	r2, r3
 800def2:	d20d      	bcs.n	800df10 <_ux_device_class_cdc_acm_read+0xe8>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3344      	adds	r3, #68	; 0x44
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff fc3d 	bl	800d778 <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 800defe:	2300      	movs	r3, #0
 800df00:	e01e      	b.n	800df40 <_ux_device_class_cdc_acm_read+0x118>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3344      	adds	r3, #68	; 0x44
 800df06:	4618      	mov	r0, r3
 800df08:	f7ff fc36 	bl	800d778 <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	e017      	b.n	800df40 <_ux_device_class_cdc_acm_read+0x118>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b03      	cmp	r3, #3
 800df16:	d102      	bne.n	800df1e <_ux_device_class_cdc_acm_read+0xf6>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1b7      	bne.n	800de8e <_ux_device_class_cdc_acm_read+0x66>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3344      	adds	r3, #68	; 0x44
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff fc28 	bl	800d778 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d006      	beq.n	800df3e <_ux_device_class_cdc_acm_read+0x116>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 800df30:	2222      	movs	r2, #34	; 0x22
 800df32:	2107      	movs	r1, #7
 800df34:	2002      	movs	r0, #2
 800df36:	f7ff f849 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 800df3a:	2322      	movs	r3, #34	; 0x22
 800df3c:	e000      	b.n	800df40 <_ux_device_class_cdc_acm_read+0x118>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 800df3e:	6a3b      	ldr	r3, [r7, #32]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3728      	adds	r7, #40	; 0x28
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20003b04 	.word	0x20003b04

0800df4c <_ux_device_class_cdc_acm_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a1b      	ldr	r3, [r3, #32]
 800df58:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df5e:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00c      	beq.n	800df80 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3310      	adds	r3, #16
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff fbf7 	bl	800d75e <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	3344      	adds	r3, #68	; 0x44
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff fbf2 	bl	800d75e <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800df7a:	68b8      	ldr	r0, [r7, #8]
 800df7c:	f7ff fade 	bl	800d53c <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
	...

0800df8c <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b08c      	sub	sp, #48	; 0x30
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	603b      	str	r3, [r7, #0]
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
ULONG                       local_host_length;
UINT                        status = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800df9e:	4b49      	ldr	r3, [pc, #292]	; (800e0c4 <_ux_device_class_cdc_acm_write+0x138>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3320      	adds	r3, #32
 800dfa4:	61fb      	str	r3, [r7, #28]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b03      	cmp	r3, #3
 800dfac:	d006      	beq.n	800dfbc <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800dfae:	2251      	movs	r2, #81	; 0x51
 800dfb0:	2107      	movs	r1, #7
 800dfb2:	2002      	movs	r0, #2
 800dfb4:	f7ff f80a 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800dfb8:	2351      	movs	r3, #81	; 0x51
 800dfba:	e07f      	b.n	800e0bc <_ux_device_class_cdc_acm_write+0x130>
    }
        
    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	61bb      	str	r3, [r7, #24]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800dfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d102      	bne.n	800dfda <_ux_device_class_cdc_acm_write+0x4e>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800dfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3310      	adds	r3, #16
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff fbd5 	bl	800d78e <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800dfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe6:	3330      	adds	r3, #48	; 0x30
 800dfe8:	617b      	str	r3, [r7, #20]

    /* Reset the actual length.  */
    *actual_length =  0;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2200      	movs	r2, #0
 800dfee:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d10f      	bne.n	800e018 <_ux_device_class_cdc_acm_write+0x8c>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10c      	bne.n	800e018 <_ux_device_class_cdc_acm_write+0x8c>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 800dffe:	2200      	movs	r2, #0
 800e000:	2100      	movs	r1, #0
 800e002:	6978      	ldr	r0, [r7, #20]
 800e004:	f7fe ff58 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800e008:	6238      	str	r0, [r7, #32]

        /* Free Mutex resource.  */
        _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3310      	adds	r3, #16
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff fbb2 	bl	800d778 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	e051      	b.n	800e0bc <_ux_device_class_cdc_acm_write+0x130>

    }
    else
    {    
        /* Check if we need more transactions.  */
        local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 800e018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800e01e:	e035      	b.n	800e08c <_ux_device_class_cdc_acm_write+0x100>
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e026:	d903      	bls.n	800e030 <_ux_device_class_cdc_acm_write+0xa4>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 800e028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e02c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e02e:	e004      	b.n	800e03a <_ux_device_class_cdc_acm_write+0xae>
                
            else
            {

                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Assume the length match expectation.  */
                local_host_length = requested_length;
#else

                /* Assume expecting more, so ZLP is appended in stack.  */
                local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH + 1;
 800e034:	f240 2301 	movw	r3, #513	; 0x201
 800e038:	627b      	str	r3, [r7, #36]	; 0x24
#endif
            }
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	4618      	mov	r0, r3
 800e044:	f7ff fa5b 	bl	800d4fe <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);
 800e048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e04a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e04c:	6978      	ldr	r0, [r7, #20]
 800e04e:	f7fe ff33 	bl	800ceb8 <_ux_device_stack_transfer_request>
 800e052:	6238      	str	r0, [r7, #32]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d111      	bne.n	800e07e <_ux_device_class_cdc_acm_write+0xf2>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	4413      	add	r3, r2
 800e062:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	699b      	ldr	r3, [r3, #24]
 800e06c:	441a      	add	r2, r3
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	607b      	str	r3, [r7, #4]
 800e07c:	e006      	b.n	800e08c <_ux_device_class_cdc_acm_write+0x100>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3310      	adds	r3, #16
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fb78 	bl	800d778 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	e017      	b.n	800e0bc <_ux_device_class_cdc_acm_write+0x130>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b03      	cmp	r3, #3
 800e092:	d102      	bne.n	800e09a <_ux_device_class_cdc_acm_write+0x10e>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1c2      	bne.n	800e020 <_ux_device_class_cdc_acm_write+0x94>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3310      	adds	r3, #16
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7ff fb6a 	bl	800d778 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b03      	cmp	r3, #3
 800e0aa:	d006      	beq.n	800e0ba <_ux_device_class_cdc_acm_write+0x12e>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 800e0ac:	2222      	movs	r2, #34	; 0x22
 800e0ae:	2107      	movs	r1, #7
 800e0b0:	2002      	movs	r0, #2
 800e0b2:	f7fe ff8b 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 800e0b6:	2322      	movs	r3, #34	; 0x22
 800e0b8:	e000      	b.n	800e0bc <_ux_device_class_cdc_acm_write+0x130>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
          
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3730      	adds	r7, #48	; 0x30
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	20003b04 	.word	0x20003b04

0800e0c8 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2280      	movs	r2, #128	; 0x80
 800e0d6:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800e0de:	6838      	ldr	r0, [r7, #0]
 800e0e0:	f7fd fe5c 	bl	800bd9c <_ux_device_stack_control_request_process>
}
 800e0e4:	bf00      	nop
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2280      	movs	r2, #128	; 0x80
 800e102:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e104:	68b8      	ldr	r0, [r7, #8]
 800e106:	f7fd fe49 	bl	800bd9c <_ux_device_stack_control_request_process>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d108      	bne.n	800e122 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2203      	movs	r2, #3
 800e114:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800e116:	2300      	movs	r3, #0
 800e118:	2200      	movs	r2, #0
 800e11a:	2100      	movs	r1, #0
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7f3 fd1b 	bl	8001b58 <HAL_PCD_EP_Transmit>
    }
}
 800e122:	bf00      	nop
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b084      	sub	sp, #16
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	60b9      	str	r1, [r7, #8]
 800e134:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2280      	movs	r2, #128	; 0x80
 800e13a:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e13c:	68b8      	ldr	r0, [r7, #8]
 800e13e:	f7fd fe2d 	bl	800bd9c <_ux_device_stack_control_request_process>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d108      	bne.n	800e15a <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2204      	movs	r2, #4
 800e14c:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800e14e:	2300      	movs	r3, #0
 800e150:	2200      	movs	r2, #0
 800e152:	2100      	movs	r1, #0
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7f3 fcff 	bl	8001b58 <HAL_PCD_EP_Transmit>
    }
}
 800e15a:	bf00      	nop
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
	...

0800e164 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e16c:	4b39      	ldr	r3, [pc, #228]	; (800e254 <HAL_PCD_SetupStageCallback+0xf0>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	69db      	ldr	r3, [r3, #28]
 800e176:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	3304      	adds	r3, #4
 800e17c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3330      	adds	r3, #48	; 0x30
 800e184:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e192:	2208      	movs	r2, #8
 800e194:	4619      	mov	r1, r3
 800e196:	f7ff f9b2 	bl	800d4fe <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2200      	movs	r2, #0
 800e19e:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	f023 020e 	bic.w	r2, r3, #14
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e1be:	b25b      	sxtb	r3, r3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	da04      	bge.n	800e1ce <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800e1c4:	6939      	ldr	r1, [r7, #16]
 800e1c6:	6978      	ldr	r0, [r7, #20]
 800e1c8:	f7ff ff7e 	bl	800e0c8 <_ux_dcd_stm32_setup_in>
 800e1cc:	e03f      	b.n	800e24e <HAL_PCD_SetupStageCallback+0xea>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10a      	bne.n	800e1f4 <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d105      	bne.n	800e1f4 <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	6939      	ldr	r1, [r7, #16]
 800e1ec:	6978      	ldr	r0, [r7, #20]
 800e1ee:	f7ff ff9c 	bl	800e12a <_ux_dcd_stm32_setup_status>
 800e1f2:	e02c      	b.n	800e24e <HAL_PCD_SetupStageCallback+0xea>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	3354      	adds	r3, #84	; 0x54
 800e1fe:	3306      	adds	r3, #6
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fb48 	bl	800d896 <_ux_utility_short_get>
 800e206:	4602      	mov	r2, r0
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	695b      	ldr	r3, [r3, #20]
 800e210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e214:	d907      	bls.n	800e226 <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800e216:	68f9      	ldr	r1, [r7, #12]
 800e218:	69b8      	ldr	r0, [r7, #24]
 800e21a:	f000 fa9d 	bl	800e758 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2200      	movs	r2, #0
 800e222:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 800e224:	e013      	b.n	800e24e <HAL_PCD_SetupStageCallback+0xea>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	2200      	movs	r2, #0
 800e22a:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	68da      	ldr	r2, [r3, #12]
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 800e238:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7f3 fc33 	bl	8001aae <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2202      	movs	r2, #2
 800e24c:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800e24e:	3720      	adds	r7, #32
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20003b04 	.word	0x20003b04

0800e258 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e264:	4b57      	ldr	r3, [pc, #348]	; (800e3c4 <HAL_PCD_DataInStageCallback+0x16c>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	69db      	ldr	r3, [r3, #28]
 800e26e:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	f003 030f 	and.w	r3, r3, #15
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00c      	beq.n	800e294 <HAL_PCD_DataInStageCallback+0x3c>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	f003 020f 	and.w	r2, r3, #15
 800e280:	4613      	mov	r3, r2
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	3360      	adds	r3, #96	; 0x60
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	4413      	add	r3, r2
 800e28e:	3304      	adds	r3, #4
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	e00a      	b.n	800e2aa <HAL_PCD_DataInStageCallback+0x52>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800e294:	78fb      	ldrb	r3, [r7, #3]
 800e296:	f003 020f 	and.w	r2, r3, #15
 800e29a:	4613      	mov	r3, r2
 800e29c:	005b      	lsls	r3, r3, #1
 800e29e:	4413      	add	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3330      	adds	r3, #48	; 0x30
 800e2b0:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800e2b2:	78fb      	ldrb	r3, [r7, #3]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d15d      	bne.n	800e374 <HAL_PCD_DataInStageCallback+0x11c>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	7a1b      	ldrb	r3, [r3, #8]
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d17a      	bne.n	800e3bc <HAL_PCD_DataInStageCallback+0x164>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7f3 fbee 	bl	8001aae <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d825      	bhi.n	800e32a <HAL_PCD_DataInStageCallback+0xd2>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d10b      	bne.n	800e2fe <HAL_PCD_DataInStageCallback+0xa6>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 800e2ea:	b2d9      	uxtb	r1, r3
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7f3 fc31 	bl	8001b58 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	651a      	str	r2, [r3, #80]	; 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800e2fc:	e05e      	b.n	800e3bc <HAL_PCD_DataInStageCallback+0x164>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2200      	movs	r2, #0
 800e302:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2202      	movs	r2, #2
 800e308:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <HAL_PCD_DataInStageCallback+0xca>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	2204      	movs	r2, #4
 800e326:	721a      	strb	r2, [r3, #8]
}
 800e328:	e048      	b.n	800e3bc <HAL_PCD_DataInStageCallback+0x164>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	69da      	ldr	r2, [r3, #28]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	69db      	ldr	r3, [r3, #28]
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	69db      	ldr	r3, [r3, #28]
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d902      	bls.n	800e346 <HAL_PCD_DataInStageCallback+0xee>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	69db      	ldr	r3, [r3, #28]
 800e344:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	691a      	ldr	r2, [r3, #16]
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	441a      	add	r2, r3
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	69da      	ldr	r2, [r3, #28]
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	1ad2      	subs	r2, r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 800e364:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7f3 fbf3 	bl	8001b58 <HAL_PCD_EP_Transmit>
}
 800e372:	e023      	b.n	800e3bc <HAL_PCD_DataInStageCallback+0x164>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d010      	beq.n	800e39e <HAL_PCD_DataInStageCallback+0x146>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00c      	beq.n	800e39e <HAL_PCD_DataInStageCallback+0x146>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	651a      	str	r2, [r3, #80]	; 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800e390:	78f9      	ldrb	r1, [r7, #3]
 800e392:	2300      	movs	r3, #0
 800e394:	2200      	movs	r2, #0
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7f3 fbde 	bl	8001b58 <HAL_PCD_EP_Transmit>
}
 800e39c:	e00e      	b.n	800e3bc <HAL_PCD_DataInStageCallback+0x164>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	625a      	str	r2, [r3, #36]	; 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3330      	adds	r3, #48	; 0x30
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7ff fa60 	bl	800d87c <_ux_utility_semaphore_put>
}
 800e3bc:	bf00      	nop
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	20003b04 	.word	0x20003b04

0800e3c8 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b088      	sub	sp, #32
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800e3d4:	4b3b      	ldr	r3, [pc, #236]	; (800e4c4 <HAL_PCD_DataOutStageCallback+0xfc>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	f003 020f 	and.w	r2, r3, #15
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	4413      	add	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3330      	adds	r3, #48	; 0x30
 800e3fc:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800e3fe:	78fb      	ldrb	r3, [r7, #3]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d147      	bne.n	800e494 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	7a1b      	ldrb	r3, [r3, #8]
 800e408:	2b02      	cmp	r3, #2
 800e40a:	d156      	bne.n	800e4ba <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800e412:	78fb      	ldrb	r3, [r7, #3]
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7f3 fb86 	bl	8001b28 <HAL_PCD_EP_GetRxCount>
 800e41c:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	699a      	ldr	r2, [r3, #24]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	441a      	add	r2, r3
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800e432:	429a      	cmp	r2, r3
 800e434:	d822      	bhi.n	800e47c <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800e43e:	429a      	cmp	r2, r3
 800e440:	d004      	beq.n	800e44c <HAL_PCD_DataOutStageCallback+0x84>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d005      	beq.n	800e458 <HAL_PCD_DataOutStageCallback+0x90>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	6939      	ldr	r1, [r7, #16]
 800e450:	6978      	ldr	r0, [r7, #20]
 800e452:	f7ff fe4b 	bl	800e0ec <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800e456:	e030      	b.n	800e4ba <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	691a      	ldr	r2, [r3, #16]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	441a      	add	r2, r3
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 800e46a:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7f3 fb1a 	bl	8001aae <HAL_PCD_EP_Receive>
}
 800e47a:	e01e      	b.n	800e4ba <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2227      	movs	r2, #39	; 0x27
 800e480:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e486:	2b00      	cmp	r3, #0
 800e488:	d017      	beq.n	800e4ba <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48e:	6938      	ldr	r0, [r7, #16]
 800e490:	4798      	blx	r3
}
 800e492:	e012      	b.n	800e4ba <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800e494:	78fb      	ldrb	r3, [r7, #3]
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7f3 fb45 	bl	8001b28 <HAL_PCD_EP_GetRxCount>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	3330      	adds	r3, #48	; 0x30
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff f9e1 	bl	800d87c <_ux_utility_semaphore_put>
}
 800e4ba:	bf00      	nop
 800e4bc:	3720      	adds	r7, #32
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20003b04 	.word	0x20003b04

0800e4c8 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800e4d0:	4b10      	ldr	r3, [pc, #64]	; (800e514 <HAL_PCD_ResetCallback+0x4c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	6a1b      	ldr	r3, [r3, #32]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800e4da:	f7fd ffdd 	bl	800c498 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d105      	bne.n	800e4f2 <HAL_PCD_ResetCallback+0x2a>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <HAL_PCD_ResetCallback+0x4c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        break;
 800e4f0:	e005      	b.n	800e4fe <HAL_PCD_ResetCallback+0x36>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800e4f2:	4b08      	ldr	r3, [pc, #32]	; (800e514 <HAL_PCD_ResetCallback+0x4c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        break;
 800e4fc:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800e4fe:	f000 fa69 	bl	800e9d4 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800e502:	4b04      	ldr	r3, [pc, #16]	; (800e514 <HAL_PCD_ResetCallback+0x4c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2201      	movs	r2, #1
 800e508:	621a      	str	r2, [r3, #32]
}
 800e50a:	bf00      	nop
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20003b04 	.word	0x20003b04

0800e518 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e520:	4b07      	ldr	r3, [pc, #28]	; (800e540 <HAL_PCD_SuspendCallback+0x28>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d005      	beq.n	800e538 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800e52c:	4b04      	ldr	r3, [pc, #16]	; (800e540 <HAL_PCD_SuspendCallback+0x28>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e534:	20f4      	movs	r0, #244	; 0xf4
 800e536:	4798      	blx	r3
    }
}
 800e538:	bf00      	nop
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	20003b04 	.word	0x20003b04

0800e544 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e54c:	4b07      	ldr	r3, [pc, #28]	; (800e56c <HAL_PCD_ResumeCallback+0x28>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d005      	beq.n	800e564 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800e558:	4b04      	ldr	r3, [pc, #16]	; (800e56c <HAL_PCD_ResumeCallback+0x28>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e560:	20f3      	movs	r0, #243	; 0xf3
 800e562:	4798      	blx	r3
    }
}
 800e564:	bf00      	nop
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	20003b04 	.word	0x20003b04

0800e570 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e578:	4b07      	ldr	r3, [pc, #28]	; (800e598 <HAL_PCD_SOFCallback+0x28>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d005      	beq.n	800e590 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <HAL_PCD_SOFCallback+0x28>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e58c:	20f0      	movs	r0, #240	; 0xf0
 800e58e:	4798      	blx	r3
    }
}
 800e590:	bf00      	nop
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	20003b04 	.word	0x20003b04

0800e59c <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ac:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5b4:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	2b07      	cmp	r3, #7
 800e5ba:	d806      	bhi.n	800e5ca <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e5c2:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d301      	bcc.n	800e5ce <_stm32_ed_get+0x32>
        return(UX_NULL);
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e014      	b.n	800e5f8 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d009      	beq.n	800e5e8 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	005b      	lsls	r3, r3, #1
 800e5da:	4413      	add	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	3360      	adds	r3, #96	; 0x60
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	e007      	b.n	800e5f8 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	4413      	add	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	3304      	adds	r3, #4
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	695b      	ldr	r3, [r3, #20]
 800e612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e616:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff ffbc 	bl	800e59c <_stm32_ed_get>
 800e624:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 800e62c:	2314      	movs	r3, #20
 800e62e:	e034      	b.n	800e69a <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d12d      	bne.n	800e698 <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	f043 0201 	orr.w	r2, r3, #1
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	b2da      	uxtb	r2, r3
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	b2db      	uxtb	r3, r3
 800e662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e666:	b2da      	uxtb	r2, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d010      	beq.n	800e694 <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	695b      	ldr	r3, [r3, #20]
 800e67c:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e682:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	f003 0303 	and.w	r3, r3, #3
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	f7f3 f95f 	bl	8001952 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 800e694:	2300      	movs	r3, #0
 800e696:	e000      	b.n	800e69a <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 800e698:	2314      	movs	r3, #20
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	695b      	ldr	r3, [r3, #20]
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	f7f3 f9a9 	bl	8001a1e <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b088      	sub	sp, #32
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ea:	617b      	str	r3, [r7, #20]
    return(posture);
 800e6ec:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e6ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6f0:	b672      	cpsid	i
    return(int_posture);
 800e6f2:	693b      	ldr	r3, [r7, #16]

    UX_DISABLE
 800e6f4:	61bb      	str	r3, [r7, #24]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	f423 7243 	bic.w	r2, r3, #780	; 0x30c
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	2200      	movs	r2, #0
 800e706:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	695b      	ldr	r3, [r3, #20]
 800e712:	b2db      	uxtb	r3, r3
 800e714:	4619      	mov	r1, r3
 800e716:	4610      	mov	r0, r2
 800e718:	f7f3 fab3 	bl	8001c82 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	695b      	ldr	r3, [r3, #20]
 800e726:	b2db      	uxtb	r3, r3
 800e728:	4619      	mov	r1, r3
 800e72a:	4610      	mov	r0, r2
 800e72c:	f7f3 fafd 	bl	8001d2a <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e734:	2b00      	cmp	r3, #0
 800e736:	d004      	beq.n	800e742 <_ux_dcd_stm32_endpoint_reset+0x6c>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	3360      	adds	r3, #96	; 0x60
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7ff f89d 	bl	800d87c <_ux_utility_semaphore_put>
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f383 8810 	msr	PRIMASK, r3
}
 800e74c:	bf00      	nop
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 800e74e:	2300      	movs	r3, #0
}
 800e750:	4618      	mov	r0, r3
 800e752:	3720      	adds	r7, #32
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	f043 0204 	orr.w	r2, r3, #4
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	7a9b      	ldrb	r3, [r3, #10]
 800e784:	4313      	orrs	r3, r2
 800e786:	b2db      	uxtb	r3, r3
 800e788:	4619      	mov	r1, r3
 800e78a:	f7f3 fa28 	bl	8001bde <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <_stm32_ed_get>:
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a8:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7b0:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b07      	cmp	r3, #7
 800e7b6:	d806      	bhi.n	800e7c6 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e7be:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d301      	bcc.n	800e7ca <_stm32_ed_get+0x32>
        return(UX_NULL);
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e014      	b.n	800e7f4 <_stm32_ed_get+0x5c>
    if (ep_dir)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d009      	beq.n	800e7e4 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	4413      	add	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	3360      	adds	r3, #96	; 0x60
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	4413      	add	r3, r2
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	e007      	b.n	800e7f4 <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	4413      	add	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	3304      	adds	r3, #4
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7ff ffc3 	bl	800e798 <_stm32_ed_get>
 800e812:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	f003 0301 	and.w	r3, r3, #1
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 800e820:	23ff      	movs	r3, #255	; 0xff
 800e822:	e008      	b.n	800e836 <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	f003 0304 	and.w	r3, r3, #4
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 800e830:	2300      	movs	r3, #0
 800e832:	e000      	b.n	800e836 <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 800e834:	2301      	movs	r3, #1
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 800e83e:	b480      	push	{r7}
 800e840:	b083      	sub	sp, #12
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
	...

0800e858 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d106      	bne.n	800e87a <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 800e86c:	2255      	movs	r2, #85	; 0x55
 800e86e:	2102      	movs	r1, #2
 800e870:	2002      	movs	r0, #2
 800e872:	f7fe fbab 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 800e876:	2355      	movs	r3, #85	; 0x55
 800e878:	e077      	b.n	800e96a <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	69db      	ldr	r3, [r3, #28]
 800e87e:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	3b0a      	subs	r3, #10
 800e884:	2b0b      	cmp	r3, #11
 800e886:	d867      	bhi.n	800e958 <_ux_dcd_stm32_function+0x100>
 800e888:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <_ux_dcd_stm32_function+0x38>)
 800e88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88e:	bf00      	nop
 800e890:	0800e8c1 	.word	0x0800e8c1
 800e894:	0800e959 	.word	0x0800e959
 800e898:	0800e8cd 	.word	0x0800e8cd
 800e89c:	0800e8d9 	.word	0x0800e8d9
 800e8a0:	0800e8e5 	.word	0x0800e8e5
 800e8a4:	0800e8f1 	.word	0x0800e8f1
 800e8a8:	0800e8fd 	.word	0x0800e8fd
 800e8ac:	0800e915 	.word	0x0800e915
 800e8b0:	0800e959 	.word	0x0800e959
 800e8b4:	0800e92d 	.word	0x0800e92d
 800e8b8:	0800e909 	.word	0x0800e909
 800e8bc:	0800e94b 	.word	0x0800e94b
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	6938      	ldr	r0, [r7, #16]
 800e8c4:	f7ff ffbb 	bl	800e83e <_ux_dcd_stm32_frame_number_get>
 800e8c8:	6178      	str	r0, [r7, #20]
        break;
 800e8ca:	e04d      	b.n	800e968 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 800e8cc:	6879      	ldr	r1, [r7, #4]
 800e8ce:	6938      	ldr	r0, [r7, #16]
 800e8d0:	f000 f956 	bl	800eb80 <_ux_dcd_stm32_transfer_request>
 800e8d4:	6178      	str	r0, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 800e8d6:	e047      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	6938      	ldr	r0, [r7, #16]
 800e8dc:	f000 f944 	bl	800eb68 <_ux_dcd_stm32_transfer_abort>
 800e8e0:	6178      	str	r0, [r7, #20]
        break;
 800e8e2:	e041      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	6938      	ldr	r0, [r7, #16]
 800e8e8:	f7ff fe8c 	bl	800e604 <_ux_dcd_stm32_endpoint_create>
 800e8ec:	6178      	str	r0, [r7, #20]
        break;
 800e8ee:	e03b      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	6938      	ldr	r0, [r7, #16]
 800e8f4:	f7ff fed5 	bl	800e6a2 <_ux_dcd_stm32_endpoint_destroy>
 800e8f8:	6178      	str	r0, [r7, #20]
        break;
 800e8fa:	e035      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	6938      	ldr	r0, [r7, #16]
 800e900:	f7ff fee9 	bl	800e6d6 <_ux_dcd_stm32_endpoint_reset>
 800e904:	6178      	str	r0, [r7, #20]
        break;
 800e906:	e02f      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 800e908:	6879      	ldr	r1, [r7, #4]
 800e90a:	6938      	ldr	r0, [r7, #16]
 800e90c:	f7ff ff24 	bl	800e758 <_ux_dcd_stm32_endpoint_stall>
 800e910:	6178      	str	r0, [r7, #20]
        break;
 800e912:	e029      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	b2d2      	uxtb	r2, r2
 800e91e:	4611      	mov	r1, r2
 800e920:	4618      	mov	r0, r3
 800e922:	f7f2 fff1 	bl	8001908 <HAL_PCD_SetAddress>
 800e926:	4603      	mov	r3, r0
 800e928:	617b      	str	r3, [r7, #20]
        break;
 800e92a:	e01d      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b0b      	cmp	r3, #11
 800e930:	d108      	bne.n	800e944 <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e938:	4618      	mov	r0, r3
 800e93a:	f7f2 fe9c 	bl	8001676 <HAL_PCD_Stop>
 800e93e:	4603      	mov	r3, r0
 800e940:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 800e942:	e011      	b.n	800e968 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 800e944:	2300      	movs	r3, #0
 800e946:	617b      	str	r3, [r7, #20]
        break;
 800e948:	e00e      	b.n	800e968 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4619      	mov	r1, r3
 800e94e:	6938      	ldr	r0, [r7, #16]
 800e950:	f7ff ff56 	bl	800e800 <_ux_dcd_stm32_endpoint_status>
 800e954:	6178      	str	r0, [r7, #20]
        break;
 800e956:	e007      	b.n	800e968 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 800e958:	2254      	movs	r2, #84	; 0x54
 800e95a:	2102      	movs	r1, #2
 800e95c:	2002      	movs	r0, #2
 800e95e:	f7fe fb35 	bl	800cfcc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 800e962:	2354      	movs	r3, #84	; 0x54
 800e964:	617b      	str	r3, [r7, #20]
        break;
 800e966:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 800e968:	697b      	ldr	r3, [r7, #20]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop

0800e974 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e97e:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <_ux_dcd_stm32_initialize+0x58>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2280      	movs	r2, #128	; 0x80
 800e988:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800e98a:	22c8      	movs	r2, #200	; 0xc8
 800e98c:	2100      	movs	r1, #0
 800e98e:	2000      	movs	r0, #0
 800e990:	f7fe fc8c 	bl	800d2ac <_ux_utility_memory_allocate>
 800e994:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d101      	bne.n	800e9a0 <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 800e99c:	2312      	movs	r3, #18
 800e99e:	e010      	b.n	800e9c2 <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	4a08      	ldr	r2, [pc, #32]	; (800e9d0 <_ux_dcd_stm32_initialize+0x5c>)
 800e9b0:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20003b04 	.word	0x20003b04
 800e9d0:	0800e859 	.word	0x0800e859

0800e9d4 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b086      	sub	sp, #24
 800e9d8:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e9da:	4b61      	ldr	r3, [pc, #388]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	69db      	ldr	r3, [r3, #28]
 800e9e4:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e9e6:	4b5e      	ldr	r3, [pc, #376]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3320      	adds	r3, #32
 800e9ec:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800e9ee:	4b5c      	ldr	r3, [pc, #368]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d110      	bne.n	800ea1c <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800e9fa:	4b59      	ldr	r3, [pc, #356]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	4b58      	ldr	r3, [pc, #352]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 800ea06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800ea0a:	4b55      	ldr	r3, [pc, #340]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	4b54      	ldr	r3, [pc, #336]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
 800ea16:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800ea1a:	e02b      	b.n	800ea74 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800ea1c:	4b50      	ldr	r3, [pc, #320]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800ea26:	4b4e      	ldr	r3, [pc, #312]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d110      	bne.n	800ea54 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800ea32:	4b4b      	ldr	r3, [pc, #300]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	4b4a      	ldr	r3, [pc, #296]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800ea3e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800ea42:	4b47      	ldr	r3, [pc, #284]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	4b46      	ldr	r3, [pc, #280]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 800ea4e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800ea52:	e00f      	b.n	800ea74 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800ea54:	4b42      	ldr	r3, [pc, #264]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	4b41      	ldr	r3, [pc, #260]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 800ea60:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800ea64:	4b3e      	ldr	r3, [pc, #248]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	4b3d      	ldr	r3, [pc, #244]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
 800ea70:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800ea74:	4b3a      	ldr	r3, [pc, #232]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800ea7c:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800ea82:	220e      	movs	r2, #14
 800ea84:	4937      	ldr	r1, [pc, #220]	; (800eb64 <_ux_dcd_stm32_initialize_complete+0x190>)
 800ea86:	68b8      	ldr	r0, [r7, #8]
 800ea88:	f7fe fb8e 	bl	800d1a8 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	336c      	adds	r3, #108	; 0x6c
 800ea90:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800eab4:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800ead0:	210e      	movs	r1, #14
 800ead2:	6978      	ldr	r0, [r7, #20]
 800ead4:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800eadc:	2100      	movs	r1, #0
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f3 f923 	bl	8001d2a <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	69db      	ldr	r3, [r3, #28]
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	f7f2 ff2d 	bl	8001952 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800eafe:	2180      	movs	r1, #128	; 0x80
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7f3 f912 	bl	8001d2a <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	69db      	ldr	r3, [r3, #28]
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	2300      	movs	r3, #0
 800eb14:	2180      	movs	r1, #128	; 0x80
 800eb16:	f7f2 ff1c 	bl	8001952 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2208      	movs	r2, #8
 800eb30:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2208      	movs	r2, #8
 800eb36:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800eb3e:	4b08      	ldr	r3, [pc, #32]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d005      	beq.n	800eb56 <_ux_dcd_stm32_initialize_complete+0x182>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800eb4a:	4b05      	ldr	r3, [pc, #20]	; (800eb60 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800eb52:	2001      	movs	r0, #1
 800eb54:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	20003b04 	.word	0x20003b04
 800eb64:	20000030 	.word	0x20000030

0800eb68 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb94:	2b03      	cmp	r3, #3
 800eb96:	d12d      	bne.n	800ebf4 <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800eba2:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	f7f2 ffd4 	bl	8001b58 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d045      	beq.n	800ec48 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f7fe fe1f 	bl	800d80c <_ux_utility_semaphore_get>
 800ebce:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	e037      	b.n	800ec4a <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	695a      	ldr	r2, [r3, #20]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d002      	beq.n	800ebf0 <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebee:	e02c      	b.n	800ec4a <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e02a      	b.n	800ec4a <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800ebfe:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	695b      	ldr	r3, [r3, #20]
 800ec08:	f7f2 ff51 	bl	8001aae <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d017      	beq.n	800ec48 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	f7fe fdf1 	bl	800d80c <_ux_utility_semaphore_get>
 800ec2a:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	e009      	b.n	800ec4a <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec42:	e002      	b.n	800ec4a <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 800ec44:	2300      	movs	r3, #0
 800ec46:	e000      	b.n	800ec4a <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <MX_USBX_Device_Init>:
 * @brief  Application USBX Device Initialization.
 * @param  memory_ptr: memory pointer
 * @retval status
 */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 800ec54:	b590      	push	{r4, r7, lr}
 800ec56:	b097      	sub	sp, #92	; 0x5c
 800ec58:	af08      	add	r7, sp, #32
 800ec5a:	6078      	str	r0, [r7, #4]
	UINT ret = UX_SUCCESS;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	637b      	str	r3, [r7, #52]	; 0x34
	ULONG string_framework_length;
	ULONG language_id_framework_length;
	UCHAR *string_framework;
	UCHAR *language_id_framework;
	UCHAR *pointer;
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	633b      	str	r3, [r7, #48]	; 0x30
	/* USER CODE BEGIN MX_USBX_Device_Init0 */

	/* USER CODE END MX_USBX_Device_Init0 */

	/* Allocate the stack for USBX Memory */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 800ec64:	f107 010c 	add.w	r1, r7, #12
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800ec6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec70:	f7fb fd90 	bl	800a794 <_txe_byte_allocate>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d000      	beq.n	800ec7c <MX_USBX_Device_Init+0x28>
			USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
		while(1);
 800ec7a:	e7fe      	b.n	800ec7a <MX_USBX_Device_Init+0x26>
		return TX_POOL_ERROR;
		/* USER CODE END USBX_ALLOCATE_STACK_ERORR */
	}

	/* Initialize USBX Memory */
	if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	2300      	movs	r3, #0
 800ec80:	2200      	movs	r2, #0
 800ec82:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ec86:	f7fe f9c3 	bl	800d010 <_ux_system_initialize>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d000      	beq.n	800ec92 <MX_USBX_Device_Init+0x3e>
	{
		/* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
		while(1);
 800ec90:	e7fe      	b.n	800ec90 <MX_USBX_Device_Init+0x3c>
		return UX_ERROR;
		/* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
	}

	/* Get Device Framework High Speed and get the length */
	device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800ec92:	f107 031c 	add.w	r3, r7, #28
 800ec96:	4619      	mov	r1, r3
 800ec98:	2001      	movs	r0, #1
 800ec9a:	f000 fa13 	bl	800f0c4 <USBD_Get_Device_Framework_Speed>
 800ec9e:	62f8      	str	r0, [r7, #44]	; 0x2c
			&device_framework_hs_length);

	/* Get Device Framework Full Speed and get the length */
	device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 800eca0:	f107 0318 	add.w	r3, r7, #24
 800eca4:	4619      	mov	r1, r3
 800eca6:	2000      	movs	r0, #0
 800eca8:	f000 fa0c 	bl	800f0c4 <USBD_Get_Device_Framework_Speed>
 800ecac:	62b8      	str	r0, [r7, #40]	; 0x28
			&device_framework_fs_length);

	/* Get String Framework and get the length */
	string_framework = USBD_Get_String_Framework(&string_framework_length);
 800ecae:	f107 0314 	add.w	r3, r7, #20
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 fa48 	bl	800f148 <USBD_Get_String_Framework>
 800ecb8:	6278      	str	r0, [r7, #36]	; 0x24

	/* Get Language Id Framework and get the length */
	language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 800ecba:	f107 0310 	add.w	r3, r7, #16
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 fac6 	bl	800f250 <USBD_Get_Language_Id_Framework>
 800ecc4:	6238      	str	r0, [r7, #32]

	/* Install the device portion of USBX */
	if (ux_device_stack_initialize(device_framework_high_speed,
 800ecc6:	69f9      	ldr	r1, [r7, #28]
 800ecc8:	69b8      	ldr	r0, [r7, #24]
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	2400      	movs	r4, #0
 800ecd0:	9404      	str	r4, [sp, #16]
 800ecd2:	9203      	str	r2, [sp, #12]
 800ecd4:	6a3a      	ldr	r2, [r7, #32]
 800ecd6:	9202      	str	r2, [sp, #8]
 800ecd8:	9301      	str	r3, [sp, #4]
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	4603      	mov	r3, r0
 800ece0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ece4:	f7fd fce6 	bl	800c6b4 <_ux_device_stack_initialize>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d000      	beq.n	800ecf0 <MX_USBX_Device_Init+0x9c>
			language_id_framework,
			language_id_framework_length,
			UX_NULL) != UX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERORR */
		while(1);
 800ecee:	e7fe      	b.n	800ecee <MX_USBX_Device_Init+0x9a>
		return UX_ERROR;
		/* USER CODE END USBX_DEVICE_INITIALIZE_ERORR */
	}

	/* Initialize the cdc acm class parameters for the device */
	cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 800ecf0:	4b57      	ldr	r3, [pc, #348]	; (800ee50 <MX_USBX_Device_Init+0x1fc>)
 800ecf2:	4a58      	ldr	r2, [pc, #352]	; (800ee54 <MX_USBX_Device_Init+0x200>)
 800ecf4:	601a      	str	r2, [r3, #0]
	cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 800ecf6:	4b56      	ldr	r3, [pc, #344]	; (800ee50 <MX_USBX_Device_Init+0x1fc>)
 800ecf8:	4a57      	ldr	r2, [pc, #348]	; (800ee58 <MX_USBX_Device_Init+0x204>)
 800ecfa:	605a      	str	r2, [r3, #4]
	cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 800ecfc:	4b54      	ldr	r3, [pc, #336]	; (800ee50 <MX_USBX_Device_Init+0x1fc>)
 800ecfe:	4a57      	ldr	r2, [pc, #348]	; (800ee5c <MX_USBX_Device_Init+0x208>)
 800ed00:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CDC_ACM_PARAMETER */

	/* USER CODE END CDC_ACM_PARAMETER */

	/* Get cdc acm configuration number */
	cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 800ed02:	2100      	movs	r1, #0
 800ed04:	2002      	movs	r0, #2
 800ed06:	f000 fb03 	bl	800f310 <USBD_Get_Configuration_Number>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	4b54      	ldr	r3, [pc, #336]	; (800ee60 <MX_USBX_Device_Init+0x20c>)
 800ed10:	601a      	str	r2, [r3, #0]

	/* Find cdc acm interface number */
	cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 800ed12:	2100      	movs	r1, #0
 800ed14:	2002      	movs	r0, #2
 800ed16:	f000 fabd 	bl	800f294 <USBD_Get_Interface_Number>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	4b51      	ldr	r3, [pc, #324]	; (800ee64 <MX_USBX_Device_Init+0x210>)
 800ed20:	601a      	str	r2, [r3, #0]

	/* Initialize the device cdc acm class */
	if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 800ed22:	4b4f      	ldr	r3, [pc, #316]	; (800ee60 <MX_USBX_Device_Init+0x20c>)
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	4b4f      	ldr	r3, [pc, #316]	; (800ee64 <MX_USBX_Device_Init+0x210>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4949      	ldr	r1, [pc, #292]	; (800ee50 <MX_USBX_Device_Init+0x1fc>)
 800ed2c:	9100      	str	r1, [sp, #0]
 800ed2e:	494e      	ldr	r1, [pc, #312]	; (800ee68 <MX_USBX_Device_Init+0x214>)
 800ed30:	484e      	ldr	r0, [pc, #312]	; (800ee6c <MX_USBX_Device_Init+0x218>)
 800ed32:	f7fc fdb9 	bl	800b8a8 <_ux_device_stack_class_register>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d000      	beq.n	800ed3e <MX_USBX_Device_Init+0xea>
			cdc_acm_configuration_number,
			cdc_acm_interface_number,
			&cdc_acm_parameter) != UX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
		while(1);
 800ed3c:	e7fe      	b.n	800ed3c <MX_USBX_Device_Init+0xe8>
		return UX_ERROR;
		/* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
	}

	/* Allocate the stack for device application main thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 800ed3e:	f107 010c 	add.w	r1, r7, #12
 800ed42:	2300      	movs	r3, #0
 800ed44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed4a:	f7fb fd23 	bl	800a794 <_txe_byte_allocate>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d000      	beq.n	800ed56 <MX_USBX_Device_Init+0x102>
			TX_NO_WAIT) != TX_SUCCESS)
	{
		/* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERORR */
		while(1);
 800ed54:	e7fe      	b.n	800ed54 <MX_USBX_Device_Init+0x100>
		return TX_POOL_ERROR;
		/* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERORR */
	}

	/* Create the device application main thread */
	if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	22b0      	movs	r2, #176	; 0xb0
 800ed5a:	9206      	str	r2, [sp, #24]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	9205      	str	r2, [sp, #20]
 800ed60:	2200      	movs	r2, #0
 800ed62:	9204      	str	r2, [sp, #16]
 800ed64:	220a      	movs	r2, #10
 800ed66:	9203      	str	r2, [sp, #12]
 800ed68:	220a      	movs	r2, #10
 800ed6a:	9202      	str	r2, [sp, #8]
 800ed6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed70:	9201      	str	r2, [sp, #4]
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	2300      	movs	r3, #0
 800ed76:	4a3e      	ldr	r2, [pc, #248]	; (800ee70 <MX_USBX_Device_Init+0x21c>)
 800ed78:	493e      	ldr	r1, [pc, #248]	; (800ee74 <MX_USBX_Device_Init+0x220>)
 800ed7a:	483f      	ldr	r0, [pc, #252]	; (800ee78 <MX_USBX_Device_Init+0x224>)
 800ed7c:	f7fc fa06 	bl	800b18c <_txe_thread_create>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d000      	beq.n	800ed88 <MX_USBX_Device_Init+0x134>
			0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
			UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
			UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
	{
		/* USER CODE BEGIN MAIN_THREAD_CREATE_ERORR */
		while(1);
 800ed86:	e7fe      	b.n	800ed86 <MX_USBX_Device_Init+0x132>
		/* USER CODE END MAIN_THREAD_CREATE_ERORR */
	}

	/* USER CODE BEGIN MX_USBX_Device_Init1 */
	/* Allocate memory for the UX RX thread */
	if(tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 800ed88:	f107 010c 	add.w	r1, r7, #12
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed94:	f7fb fcfe 	bl	800a794 <_txe_byte_allocate>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <MX_USBX_Device_Init+0x14e>
	{
		return TX_POOL_ERROR;
 800ed9e:	2302      	movs	r3, #2
 800eda0:	e051      	b.n	800ee46 <MX_USBX_Device_Init+0x1f2>
	}

	/* Create the UX RX thread */
	if(tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry", usbx_cdc_acm_read_thread_entry, 1, pointer, 1024, 20, 20, TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	22b0      	movs	r2, #176	; 0xb0
 800eda6:	9206      	str	r2, [sp, #24]
 800eda8:	2201      	movs	r2, #1
 800edaa:	9205      	str	r2, [sp, #20]
 800edac:	2200      	movs	r2, #0
 800edae:	9204      	str	r2, [sp, #16]
 800edb0:	2214      	movs	r2, #20
 800edb2:	9203      	str	r2, [sp, #12]
 800edb4:	2214      	movs	r2, #20
 800edb6:	9202      	str	r2, [sp, #8]
 800edb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800edbc:	9201      	str	r2, [sp, #4]
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	2301      	movs	r3, #1
 800edc2:	4a2e      	ldr	r2, [pc, #184]	; (800ee7c <MX_USBX_Device_Init+0x228>)
 800edc4:	492e      	ldr	r1, [pc, #184]	; (800ee80 <MX_USBX_Device_Init+0x22c>)
 800edc6:	482f      	ldr	r0, [pc, #188]	; (800ee84 <MX_USBX_Device_Init+0x230>)
 800edc8:	f7fc f9e0 	bl	800b18c <_txe_thread_create>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <MX_USBX_Device_Init+0x182>
	{
		return TX_THREAD_ERROR;
 800edd2:	230e      	movs	r3, #14
 800edd4:	e037      	b.n	800ee46 <MX_USBX_Device_Init+0x1f2>
	}

	/* Allocate memory for the UX TX thread */
	if(tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 800edd6:	f107 010c 	add.w	r1, r7, #12
 800edda:	2300      	movs	r3, #0
 800eddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ede0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ede2:	f7fb fcd7 	bl	800a794 <_txe_byte_allocate>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <MX_USBX_Device_Init+0x19c>
	{
		return TX_POOL_ERROR;
 800edec:	2302      	movs	r3, #2
 800edee:	e02a      	b.n	800ee46 <MX_USBX_Device_Init+0x1f2>
	}

	/* Create the UX TX thread */
	if(tx_thread_create(&ux_cdc_write_thread, "cdc_acm_write_usbx_app_thread_entry", usbx_cdc_acm_write_thread_entry, 1, pointer, 1025, 20, 20, TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	22b0      	movs	r2, #176	; 0xb0
 800edf4:	9206      	str	r2, [sp, #24]
 800edf6:	2201      	movs	r2, #1
 800edf8:	9205      	str	r2, [sp, #20]
 800edfa:	2200      	movs	r2, #0
 800edfc:	9204      	str	r2, [sp, #16]
 800edfe:	2214      	movs	r2, #20
 800ee00:	9203      	str	r2, [sp, #12]
 800ee02:	2214      	movs	r2, #20
 800ee04:	9202      	str	r2, [sp, #8]
 800ee06:	f240 4201 	movw	r2, #1025	; 0x401
 800ee0a:	9201      	str	r2, [sp, #4]
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	2301      	movs	r3, #1
 800ee10:	4a1d      	ldr	r2, [pc, #116]	; (800ee88 <MX_USBX_Device_Init+0x234>)
 800ee12:	491e      	ldr	r1, [pc, #120]	; (800ee8c <MX_USBX_Device_Init+0x238>)
 800ee14:	481e      	ldr	r0, [pc, #120]	; (800ee90 <MX_USBX_Device_Init+0x23c>)
 800ee16:	f7fc f9b9 	bl	800b18c <_txe_thread_create>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d001      	beq.n	800ee24 <MX_USBX_Device_Init+0x1d0>
	{
		return TX_THREAD_ERROR;
 800ee20:	230e      	movs	r3, #14
 800ee22:	e010      	b.n	800ee46 <MX_USBX_Device_Init+0x1f2>
	}

	/* Create the Command Queue */
	if(tx_queue_create(&ux_command_queue, "Command Queue", 1, queue_stack, sizeof(queue_stack)) != TX_SUCCESS)
 800ee24:	2338      	movs	r3, #56	; 0x38
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	4b19      	ldr	r3, [pc, #100]	; (800ee94 <MX_USBX_Device_Init+0x240>)
 800ee30:	2201      	movs	r2, #1
 800ee32:	4919      	ldr	r1, [pc, #100]	; (800ee98 <MX_USBX_Device_Init+0x244>)
 800ee34:	4819      	ldr	r0, [pc, #100]	; (800ee9c <MX_USBX_Device_Init+0x248>)
 800ee36:	f7fb ff31 	bl	800ac9c <_txe_queue_create>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <MX_USBX_Device_Init+0x1f0>
	{
		return TX_QUEUE_ERROR;
 800ee40:	2309      	movs	r3, #9
 800ee42:	e000      	b.n	800ee46 <MX_USBX_Device_Init+0x1f2>
	}
	/* USER CODE END MX_USBX_Device_Init1 */

	return ret;
 800ee44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	373c      	adds	r7, #60	; 0x3c
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd90      	pop	{r4, r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	20003b14 	.word	0x20003b14
 800ee54:	0800ef0d 	.word	0x0800ef0d
 800ee58:	0800ef35 	.word	0x0800ef35
 800ee5c:	0800ef49 	.word	0x0800ef49
 800ee60:	20003b10 	.word	0x20003b10
 800ee64:	20003b0c 	.word	0x20003b0c
 800ee68:	0800db45 	.word	0x0800db45
 800ee6c:	20000010 	.word	0x20000010
 800ee70:	0800eea1 	.word	0x0800eea1
 800ee74:	0800fe6c 	.word	0x0800fe6c
 800ee78:	20003b20 	.word	0x20003b20
 800ee7c:	0800ef5d 	.word	0x0800ef5d
 800ee80:	0800fe88 	.word	0x0800fe88
 800ee84:	20003bd0 	.word	0x20003bd0
 800ee88:	0800efdd 	.word	0x0800efdd
 800ee8c:	0800feac 	.word	0x0800feac
 800ee90:	20003c80 	.word	0x20003c80
 800ee94:	20003d68 	.word	0x20003d68
 800ee98:	0800fed0 	.word	0x0800fed0
 800ee9c:	20003d30 	.word	0x20003d30

0800eea0 <app_ux_device_thread_entry>:
 * @brief  Function implementing app_ux_device_thread_entry.
 * @param  thread_input: User thread input parameter.
 * @retval none
 */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN app_ux_device_thread_entry */
	MX_USB_PCD_Init();
 800eea8:	f7f1 ff88 	bl	8000dbc <MX_USB_PCD_Init>

	HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x00 , PCD_SNG_BUF, 0x40);
 800eeac:	2340      	movs	r3, #64	; 0x40
 800eeae:	2200      	movs	r2, #0
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	4814      	ldr	r0, [pc, #80]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eeb4:	f7f3 ffcd 	bl	8002e52 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x80 , PCD_SNG_BUF, 0x80);
 800eeb8:	2380      	movs	r3, #128	; 0x80
 800eeba:	2200      	movs	r2, #0
 800eebc:	2180      	movs	r1, #128	; 0x80
 800eebe:	4811      	ldr	r0, [pc, #68]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eec0:	f7f3 ffc7 	bl	8002e52 <HAL_PCDEx_PMAConfig>

	HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x81, PCD_SNG_BUF, 0xC0);
 800eec4:	23c0      	movs	r3, #192	; 0xc0
 800eec6:	2200      	movs	r2, #0
 800eec8:	2181      	movs	r1, #129	; 0x81
 800eeca:	480e      	ldr	r0, [pc, #56]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eecc:	f7f3 ffc1 	bl	8002e52 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x02, PCD_SNG_BUF, 0x100);
 800eed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eed4:	2200      	movs	r2, #0
 800eed6:	2102      	movs	r1, #2
 800eed8:	480a      	ldr	r0, [pc, #40]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eeda:	f7f3 ffba 	bl	8002e52 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x82, PCD_SNG_BUF, 0x140);
 800eede:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800eee2:	2200      	movs	r2, #0
 800eee4:	2182      	movs	r1, #130	; 0x82
 800eee6:	4807      	ldr	r0, [pc, #28]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eee8:	f7f3 ffb3 	bl	8002e52 <HAL_PCDEx_PMAConfig>

	ux_dcd_stm32_initialize((ULONG)USB, (ULONG)&hpcd_USB_FS);
 800eeec:	4b05      	ldr	r3, [pc, #20]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eeee:	4619      	mov	r1, r3
 800eef0:	4805      	ldr	r0, [pc, #20]	; (800ef08 <app_ux_device_thread_entry+0x68>)
 800eef2:	f7ff fd3f 	bl	800e974 <_ux_dcd_stm32_initialize>

	HAL_PCD_Start(&hpcd_USB_FS);
 800eef6:	4803      	ldr	r0, [pc, #12]	; (800ef04 <app_ux_device_thread_entry+0x64>)
 800eef8:	f7f2 fb9b 	bl	8001632 <HAL_PCD_Start>
	/* USER CODE END app_ux_device_thread_entry */
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	200031cc 	.word	0x200031cc
 800ef08:	40005c00 	.word	0x40005c00

0800ef0c <USBD_CDC_ACM_Activate>:
 *         This function is called when insertion of a CDC ACM device.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_Activate */
	/* Save the instance */
	cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *)cdc_acm_instance;
 800ef14:	4a05      	ldr	r2, [pc, #20]	; (800ef2c <USBD_CDC_ACM_Activate+0x20>)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6013      	str	r3, [r2, #0]

	/* Turn the Led ON when USB is connected */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	2180      	movs	r1, #128	; 0x80
 800ef1e:	4804      	ldr	r0, [pc, #16]	; (800ef30 <USBD_CDC_ACM_Activate+0x24>)
 800ef20:	f7f2 fa72 	bl	8001408 <HAL_GPIO_WritePin>
	/* USER CODE END USBD_CDC_ACM_Activate */

	return;
 800ef24:	bf00      	nop
}
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	20003e68 	.word	0x20003e68
 800ef30:	48000400 	.word	0x48000400

0800ef34 <USBD_CDC_ACM_Deactivate>:
 *         This function is called when extraction of a CDC ACM device.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
	UX_PARAMETER_NOT_USED(cdc_acm_instance);
	/* USER CODE END USBD_CDC_ACM_Deactivate */

	return;
 800ef3c:	bf00      	nop
}
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <USBD_CDC_ACM_ParameterChange>:
 *         This function is invoked to manage the CDC ACM class requests.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
	UX_PARAMETER_NOT_USED(cdc_acm_instance);
	/* USER CODE END USBD_CDC_ACM_ParameterChange */

	return;
 800ef50:	bf00      	nop
}
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <usbx_cdc_acm_read_thread_entry>:

/* USER CODE BEGIN 1 */
VOID usbx_cdc_acm_read_thread_entry(ULONG thread_input)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
	uint8_t message;

	/* Infinite Loop */
	while(1)
	{
		if(cdc_acm != UX_NULL)
 800ef64:	4b19      	ldr	r3, [pc, #100]	; (800efcc <usbx_cdc_acm_read_thread_entry+0x70>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d0fb      	beq.n	800ef64 <usbx_cdc_acm_read_thread_entry+0x8>
		{
			ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBuffer, 64, &rx_actual_length);
 800ef6c:	4b17      	ldr	r3, [pc, #92]	; (800efcc <usbx_cdc_acm_read_thread_entry+0x70>)
 800ef6e:	6818      	ldr	r0, [r3, #0]
 800ef70:	f107 030c 	add.w	r3, r7, #12
 800ef74:	2240      	movs	r2, #64	; 0x40
 800ef76:	4916      	ldr	r1, [pc, #88]	; (800efd0 <usbx_cdc_acm_read_thread_entry+0x74>)
 800ef78:	f7fe ff56 	bl	800de28 <_ux_device_class_cdc_acm_read>

			switch(UserRxBuffer[rx_actual_length-1])
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	4a13      	ldr	r2, [pc, #76]	; (800efd0 <usbx_cdc_acm_read_thread_entry+0x74>)
 800ef82:	5cd3      	ldrb	r3, [r2, r3]
 800ef84:	2b30      	cmp	r3, #48	; 0x30
 800ef86:	d010      	beq.n	800efaa <usbx_cdc_acm_read_thread_entry+0x4e>
 800ef88:	2b31      	cmp	r3, #49	; 0x31
 800ef8a:	d1eb      	bne.n	800ef64 <usbx_cdc_acm_read_thread_entry+0x8>
			{
				case '1':
					message = LED_ON;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	72fb      	strb	r3, [r7, #11]
					tx_queue_send(&ux_command_queue, &message, TX_NO_WAIT);
 800ef90:	f107 030b 	add.w	r3, r7, #11
 800ef94:	2200      	movs	r2, #0
 800ef96:	4619      	mov	r1, r3
 800ef98:	480e      	ldr	r0, [pc, #56]	; (800efd4 <usbx_cdc_acm_read_thread_entry+0x78>)
 800ef9a:	f7fb ff79 	bl	800ae90 <_txe_queue_send>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800ef9e:	2201      	movs	r2, #1
 800efa0:	2102      	movs	r1, #2
 800efa2:	480d      	ldr	r0, [pc, #52]	; (800efd8 <usbx_cdc_acm_read_thread_entry+0x7c>)
 800efa4:	f7f2 fa30 	bl	8001408 <HAL_GPIO_WritePin>
					break;
 800efa8:	e00e      	b.n	800efc8 <usbx_cdc_acm_read_thread_entry+0x6c>

				case '0':
					message = LED_OFF;
 800efaa:	2301      	movs	r3, #1
 800efac:	72fb      	strb	r3, [r7, #11]
					tx_queue_send(&ux_command_queue, &message, TX_NO_WAIT);
 800efae:	f107 030b 	add.w	r3, r7, #11
 800efb2:	2200      	movs	r2, #0
 800efb4:	4619      	mov	r1, r3
 800efb6:	4807      	ldr	r0, [pc, #28]	; (800efd4 <usbx_cdc_acm_read_thread_entry+0x78>)
 800efb8:	f7fb ff6a 	bl	800ae90 <_txe_queue_send>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800efbc:	2200      	movs	r2, #0
 800efbe:	2102      	movs	r1, #2
 800efc0:	4805      	ldr	r0, [pc, #20]	; (800efd8 <usbx_cdc_acm_read_thread_entry+0x7c>)
 800efc2:	f7f2 fa21 	bl	8001408 <HAL_GPIO_WritePin>
					break;
 800efc6:	bf00      	nop
		if(cdc_acm != UX_NULL)
 800efc8:	e7cc      	b.n	800ef64 <usbx_cdc_acm_read_thread_entry+0x8>
 800efca:	bf00      	nop
 800efcc:	20003e68 	.word	0x20003e68
 800efd0:	20003e6c 	.word	0x20003e6c
 800efd4:	20003d30 	.word	0x20003d30
 800efd8:	48000400 	.word	0x48000400

0800efdc <usbx_cdc_acm_write_thread_entry>:
		}
	}
}

VOID usbx_cdc_acm_write_thread_entry(ULONG thread_input)
{
 800efdc:	b5b0      	push	{r4, r5, r7, lr}
 800efde:	b08e      	sub	sp, #56	; 0x38
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
	UX_PARAMETER_NOT_USED(thread_input);

	/* Private Variables */
	ULONG tx_actual_length;
	uint8_t queue_message = 0xFF;
 800efe4:	23ff      	movs	r3, #255	; 0xff
 800efe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	const uint8_t UserLedOn[] = " LED ON\r\n";
 800efea:	4a25      	ldr	r2, [pc, #148]	; (800f080 <usbx_cdc_acm_write_thread_entry+0xa4>)
 800efec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eff0:	ca07      	ldmia	r2, {r0, r1, r2}
 800eff2:	c303      	stmia	r3!, {r0, r1}
 800eff4:	801a      	strh	r2, [r3, #0]
	const uint8_t UserLedOff[] = " LED OFF\r\n";
 800eff6:	4a23      	ldr	r2, [pc, #140]	; (800f084 <usbx_cdc_acm_write_thread_entry+0xa8>)
 800eff8:	f107 031c 	add.w	r3, r7, #28
 800effc:	ca07      	ldmia	r2, {r0, r1, r2}
 800effe:	c303      	stmia	r3!, {r0, r1}
 800f000:	801a      	strh	r2, [r3, #0]
 800f002:	3302      	adds	r3, #2
 800f004:	0c12      	lsrs	r2, r2, #16
 800f006:	701a      	strb	r2, [r3, #0]
	const uint8_t UserButtonEvent[] = "BUTTON PRESSED\r\n";
 800f008:	4b1f      	ldr	r3, [pc, #124]	; (800f088 <usbx_cdc_acm_write_thread_entry+0xac>)
 800f00a:	f107 0408 	add.w	r4, r7, #8
 800f00e:	461d      	mov	r5, r3
 800f010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f014:	682b      	ldr	r3, [r5, #0]
 800f016:	7023      	strb	r3, [r4, #0]

	while(1)
	{
		tx_queue_receive(&ux_command_queue, &queue_message, TX_WAIT_FOREVER);
 800f018:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800f01c:	f04f 32ff 	mov.w	r2, #4294967295
 800f020:	4619      	mov	r1, r3
 800f022:	481a      	ldr	r0, [pc, #104]	; (800f08c <usbx_cdc_acm_write_thread_entry+0xb0>)
 800f024:	f7fb feea 	bl	800adfc <_txe_queue_receive>

		switch(queue_message)
 800f028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	d01a      	beq.n	800f066 <usbx_cdc_acm_write_thread_entry+0x8a>
 800f030:	2b02      	cmp	r3, #2
 800f032:	dc22      	bgt.n	800f07a <usbx_cdc_acm_write_thread_entry+0x9e>
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <usbx_cdc_acm_write_thread_entry+0x62>
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d00a      	beq.n	800f052 <usbx_cdc_acm_write_thread_entry+0x76>
				break;
			case BUTTON_PRESSED:
				ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(UserButtonEvent), sizeof(UserButtonEvent), &tx_actual_length);
				break;
			default:
				break;
 800f03c:	e01d      	b.n	800f07a <usbx_cdc_acm_write_thread_entry+0x9e>
				ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(UserLedOn), sizeof(UserLedOn), &tx_actual_length);
 800f03e:	4b14      	ldr	r3, [pc, #80]	; (800f090 <usbx_cdc_acm_write_thread_entry+0xb4>)
 800f040:	6818      	ldr	r0, [r3, #0]
 800f042:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f046:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f04a:	220a      	movs	r2, #10
 800f04c:	f7fe ff9e 	bl	800df8c <_ux_device_class_cdc_acm_write>
				break;
 800f050:	e014      	b.n	800f07c <usbx_cdc_acm_write_thread_entry+0xa0>
				ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(UserLedOff), sizeof(UserLedOff), &tx_actual_length);
 800f052:	4b0f      	ldr	r3, [pc, #60]	; (800f090 <usbx_cdc_acm_write_thread_entry+0xb4>)
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f05a:	f107 011c 	add.w	r1, r7, #28
 800f05e:	220b      	movs	r2, #11
 800f060:	f7fe ff94 	bl	800df8c <_ux_device_class_cdc_acm_write>
				break;
 800f064:	e00a      	b.n	800f07c <usbx_cdc_acm_write_thread_entry+0xa0>
				ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(UserButtonEvent), sizeof(UserButtonEvent), &tx_actual_length);
 800f066:	4b0a      	ldr	r3, [pc, #40]	; (800f090 <usbx_cdc_acm_write_thread_entry+0xb4>)
 800f068:	6818      	ldr	r0, [r3, #0]
 800f06a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f06e:	f107 0108 	add.w	r1, r7, #8
 800f072:	2211      	movs	r2, #17
 800f074:	f7fe ff8a 	bl	800df8c <_ux_device_class_cdc_acm_write>
				break;
 800f078:	e000      	b.n	800f07c <usbx_cdc_acm_write_thread_entry+0xa0>
				break;
 800f07a:	bf00      	nop
		tx_queue_receive(&ux_command_queue, &queue_message, TX_WAIT_FOREVER);
 800f07c:	e7cc      	b.n	800f018 <usbx_cdc_acm_write_thread_entry+0x3c>
 800f07e:	bf00      	nop
 800f080:	0800fee0 	.word	0x0800fee0
 800f084:	0800feec 	.word	0x0800feec
 800f088:	0800fef8 	.word	0x0800fef8
 800f08c:	20003d30 	.word	0x20003d30
 800f090:	20003e68 	.word	0x20003e68

0800f094 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	80fb      	strh	r3, [r7, #6]
	/* Private Variables */
	uint8_t message = BUTTON_PRESSED;
 800f09e:	2302      	movs	r3, #2
 800f0a0:	73fb      	strb	r3, [r7, #15]

	/* Check which button was pressed */
	if(GPIO_Pin == JOYSTICK_SEL_Pin)
 800f0a2:	88fb      	ldrh	r3, [r7, #6]
 800f0a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0a8:	d106      	bne.n	800f0b8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		tx_queue_send(&ux_command_queue, &message, TX_NO_WAIT);
 800f0aa:	f107 030f 	add.w	r3, r7, #15
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4803      	ldr	r0, [pc, #12]	; (800f0c0 <HAL_GPIO_EXTI_Callback+0x2c>)
 800f0b4:	f7fb feec 	bl	800ae90 <_txe_queue_send>
	}
}
 800f0b8:	bf00      	nop
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20003d30 	.word	0x20003d30

0800f0c4 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	6039      	str	r1, [r7, #0]
 800f0ce:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 800f0d4:	79fb      	ldrb	r3, [r7, #7]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d113      	bne.n	800f102 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800f0da:	4b16      	ldr	r3, [pc, #88]	; (800f134 <USBD_Get_Device_Framework_Speed+0x70>)
 800f0dc:	6819      	ldr	r1, [r3, #0]
 800f0de:	79fb      	ldrb	r3, [r7, #7]
 800f0e0:	4a15      	ldr	r2, [pc, #84]	; (800f138 <USBD_Get_Device_Framework_Speed+0x74>)
 800f0e2:	4816      	ldr	r0, [pc, #88]	; (800f13c <USBD_Get_Device_Framework_Speed+0x78>)
 800f0e4:	f000 f974 	bl	800f3d0 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800f0e8:	4b14      	ldr	r3, [pc, #80]	; (800f13c <USBD_Get_Device_Framework_Speed+0x78>)
 800f0ea:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <USBD_Get_Device_Framework_Speed+0x78>)
 800f0f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800f0f4:	441a      	add	r2, r3
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 800f0fa:	4b0e      	ldr	r3, [pc, #56]	; (800f134 <USBD_Get_Device_Framework_Speed+0x70>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	60fb      	str	r3, [r7, #12]
 800f100:	e012      	b.n	800f128 <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 800f102:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <USBD_Get_Device_Framework_Speed+0x7c>)
 800f104:	6819      	ldr	r1, [r3, #0]
 800f106:	79fb      	ldrb	r3, [r7, #7]
 800f108:	4a0b      	ldr	r2, [pc, #44]	; (800f138 <USBD_Get_Device_Framework_Speed+0x74>)
 800f10a:	480e      	ldr	r0, [pc, #56]	; (800f144 <USBD_Get_Device_Framework_Speed+0x80>)
 800f10c:	f000 f960 	bl	800f3d0 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800f110:	4b0c      	ldr	r3, [pc, #48]	; (800f144 <USBD_Get_Device_Framework_Speed+0x80>)
 800f112:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800f116:	4b0b      	ldr	r3, [pc, #44]	; (800f144 <USBD_Get_Device_Framework_Speed+0x80>)
 800f118:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800f11c:	441a      	add	r2, r3
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 800f122:	4b07      	ldr	r3, [pc, #28]	; (800f140 <USBD_Get_Device_Framework_Speed+0x7c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 800f128:	68fb      	ldr	r3, [r7, #12]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	20000064 	.word	0x20000064
 800f138:	20000058 	.word	0x20000058
 800f13c:	20003eac 	.word	0x20003eac
 800f140:	20000068 	.word	0x20000068
 800f144:	20003fd4 	.word	0x20003fd4

0800f148 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 800f150:	2300      	movs	r3, #0
 800f152:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 800f154:	2300      	movs	r3, #0
 800f156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	1c5a      	adds	r2, r3, #1
 800f15c:	73fa      	strb	r2, [r7, #15]
 800f15e:	461a      	mov	r2, r3
 800f160:	4b37      	ldr	r3, [pc, #220]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f162:	2109      	movs	r1, #9
 800f164:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f166:	7bfb      	ldrb	r3, [r7, #15]
 800f168:	1c5a      	adds	r2, r3, #1
 800f16a:	73fa      	strb	r2, [r7, #15]
 800f16c:	461a      	mov	r2, r3
 800f16e:	4b34      	ldr	r3, [pc, #208]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f170:	2104      	movs	r1, #4
 800f172:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	1c5a      	adds	r2, r3, #1
 800f178:	73fa      	strb	r2, [r7, #15]
 800f17a:	461a      	mov	r2, r3
 800f17c:	4b30      	ldr	r3, [pc, #192]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f17e:	2101      	movs	r1, #1
 800f180:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 800f182:	7bfb      	ldrb	r3, [r7, #15]
 800f184:	4a2e      	ldr	r2, [pc, #184]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f186:	4413      	add	r3, r2
 800f188:	f107 020c 	add.w	r2, r7, #12
 800f18c:	4619      	mov	r1, r3
 800f18e:	482d      	ldr	r0, [pc, #180]	; (800f244 <USBD_Get_String_Framework+0xfc>)
 800f190:	f000 f8d0 	bl	800f334 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 800f194:	89bb      	ldrh	r3, [r7, #12]
 800f196:	b2da      	uxtb	r2, r3
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	4413      	add	r3, r2
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	3301      	adds	r3, #1
 800f1a0:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f1a2:	7bfb      	ldrb	r3, [r7, #15]
 800f1a4:	1c5a      	adds	r2, r3, #1
 800f1a6:	73fa      	strb	r2, [r7, #15]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4b25      	ldr	r3, [pc, #148]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f1ac:	2109      	movs	r1, #9
 800f1ae:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	73fa      	strb	r2, [r7, #15]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	4b21      	ldr	r3, [pc, #132]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f1ba:	2104      	movs	r1, #4
 800f1bc:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800f1be:	7bfb      	ldrb	r3, [r7, #15]
 800f1c0:	1c5a      	adds	r2, r3, #1
 800f1c2:	73fa      	strb	r2, [r7, #15]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	4b1e      	ldr	r3, [pc, #120]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f1c8:	2102      	movs	r1, #2
 800f1ca:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
 800f1ce:	4a1c      	ldr	r2, [pc, #112]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f1d0:	4413      	add	r3, r2
 800f1d2:	f107 020c 	add.w	r2, r7, #12
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	481b      	ldr	r0, [pc, #108]	; (800f248 <USBD_Get_String_Framework+0x100>)
 800f1da:	f000 f8ab 	bl	800f334 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 800f1de:	89bb      	ldrh	r3, [r7, #12]
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	7bfb      	ldrb	r3, [r7, #15]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	1c5a      	adds	r2, r3, #1
 800f1f0:	73fa      	strb	r2, [r7, #15]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	4b12      	ldr	r3, [pc, #72]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f1f6:	2109      	movs	r1, #9
 800f1f8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
 800f1fc:	1c5a      	adds	r2, r3, #1
 800f1fe:	73fa      	strb	r2, [r7, #15]
 800f200:	461a      	mov	r2, r3
 800f202:	4b0f      	ldr	r3, [pc, #60]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f204:	2104      	movs	r1, #4
 800f206:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f208:	7bfb      	ldrb	r3, [r7, #15]
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	73fa      	strb	r2, [r7, #15]
 800f20e:	461a      	mov	r2, r3
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f212:	2103      	movs	r1, #3
 800f214:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800f216:	7bfb      	ldrb	r3, [r7, #15]
 800f218:	4a09      	ldr	r2, [pc, #36]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f21a:	4413      	add	r3, r2
 800f21c:	f107 020c 	add.w	r2, r7, #12
 800f220:	4619      	mov	r1, r3
 800f222:	480a      	ldr	r0, [pc, #40]	; (800f24c <USBD_Get_String_Framework+0x104>)
 800f224:	f000 f886 	bl	800f334 <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 800f228:	4805      	ldr	r0, [pc, #20]	; (800f240 <USBD_Get_String_Framework+0xf8>)
 800f22a:	f7f1 f915 	bl	8000458 <strlen>
 800f22e:	4602      	mov	r2, r0
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 800f234:	4b02      	ldr	r3, [pc, #8]	; (800f240 <USBD_Get_String_Framework+0xf8>)
}
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	2000428c 	.word	0x2000428c
 800f244:	0800ff0c 	.word	0x0800ff0c
 800f248:	0800ff20 	.word	0x0800ff20
 800f24c:	0800ff34 	.word	0x0800ff34

0800f250 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 800f258:	2300      	movs	r3, #0
 800f25a:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
 800f25e:	1c5a      	adds	r2, r3, #1
 800f260:	73fa      	strb	r2, [r7, #15]
 800f262:	461a      	mov	r2, r3
 800f264:	4b0a      	ldr	r3, [pc, #40]	; (800f290 <USBD_Get_Language_Id_Framework+0x40>)
 800f266:	2109      	movs	r1, #9
 800f268:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	73fa      	strb	r2, [r7, #15]
 800f270:	461a      	mov	r2, r3
 800f272:	4b07      	ldr	r3, [pc, #28]	; (800f290 <USBD_Get_Language_Id_Framework+0x40>)
 800f274:	2104      	movs	r1, #4
 800f276:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 800f278:	4805      	ldr	r0, [pc, #20]	; (800f290 <USBD_Get_Language_Id_Framework+0x40>)
 800f27a:	f7f1 f8ed 	bl	8000458 <strlen>
 800f27e:	4602      	mov	r2, r0
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 800f284:	4b02      	ldr	r3, [pc, #8]	; (800f290 <USBD_Get_Language_Id_Framework+0x40>)
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	2000438c 	.word	0x2000438c

0800f294 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	460a      	mov	r2, r1
 800f29e:	71fb      	strb	r3, [r7, #7]
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	73bb      	strb	r3, [r7, #14]
 800f2b0:	e021      	b.n	800f2f6 <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f2b2:	7bbb      	ldrb	r3, [r7, #14]
 800f2b4:	4a15      	ldr	r2, [pc, #84]	; (800f30c <USBD_Get_Interface_Number+0x78>)
 800f2b6:	215c      	movs	r1, #92	; 0x5c
 800f2b8:	fb01 f303 	mul.w	r3, r1, r3
 800f2bc:	4413      	add	r3, r2
 800f2be:	330c      	adds	r3, #12
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	79fa      	ldrb	r2, [r7, #7]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d113      	bne.n	800f2f0 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	4a10      	ldr	r2, [pc, #64]	; (800f30c <USBD_Get_Interface_Number+0x78>)
 800f2cc:	215c      	movs	r1, #92	; 0x5c
 800f2ce:	fb01 f303 	mul.w	r3, r1, r3
 800f2d2:	4413      	add	r3, r2
 800f2d4:	3314      	adds	r3, #20
 800f2d6:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f2d8:	79ba      	ldrb	r2, [r7, #6]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d108      	bne.n	800f2f0 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800f2de:	7bbb      	ldrb	r3, [r7, #14]
 800f2e0:	4a0a      	ldr	r2, [pc, #40]	; (800f30c <USBD_Get_Interface_Number+0x78>)
 800f2e2:	215c      	movs	r1, #92	; 0x5c
 800f2e4:	fb01 f303 	mul.w	r3, r1, r3
 800f2e8:	4413      	add	r3, r2
 800f2ea:	335a      	adds	r3, #90	; 0x5a
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	73bb      	strb	r3, [r7, #14]
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d9da      	bls.n	800f2b2 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  return itf_num;
 800f2fc:	7bfb      	ldrb	r3, [r7, #15]
 800f2fe:	b29b      	uxth	r3, r3
}
 800f300:	4618      	mov	r0, r3
 800f302:	3714      	adds	r7, #20
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	20003eac 	.word	0x20003eac

0800f310 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	460a      	mov	r2, r1
 800f31a:	71fb      	strb	r3, [r7, #7]
 800f31c:	4613      	mov	r3, r2
 800f31e:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 800f320:	2301      	movs	r3, #1
 800f322:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800f324:	7bfb      	ldrb	r3, [r7, #15]
 800f326:	b29b      	uxth	r3, r3
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3714      	adds	r7, #20
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f340:	2300      	movs	r3, #0
 800f342:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d023      	beq.n	800f392 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 800f34e:	6938      	ldr	r0, [r7, #16]
 800f350:	f000 f823 	bl	800f39a <USBD_Desc_GetLen>
 800f354:	4603      	mov	r3, r0
 800f356:	b29a      	uxth	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 800f35c:	7dfb      	ldrb	r3, [r7, #23]
 800f35e:	1c5a      	adds	r2, r3, #1
 800f360:	75fa      	strb	r2, [r7, #23]
 800f362:	461a      	mov	r2, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	4413      	add	r3, r2
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	7812      	ldrb	r2, [r2, #0]
 800f36c:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800f36e:	e00b      	b.n	800f388 <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800f370:	7dfb      	ldrb	r3, [r7, #23]
 800f372:	1c5a      	adds	r2, r3, #1
 800f374:	75fa      	strb	r2, [r7, #23]
 800f376:	461a      	mov	r2, r3
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	4413      	add	r3, r2
 800f37c:	693a      	ldr	r2, [r7, #16]
 800f37e:	7812      	ldrb	r2, [r2, #0]
 800f380:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	3301      	adds	r3, #1
 800f386:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1ef      	bne.n	800f370 <USBD_Desc_GetString+0x3c>
 800f390:	e000      	b.n	800f394 <USBD_Desc_GetString+0x60>
    return;
 800f392:	bf00      	nop
  }
}
 800f394:	3718      	adds	r7, #24
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800f39a:	b480      	push	{r7}
 800f39c:	b085      	sub	sp, #20
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f3aa:	e005      	b.n	800f3b8 <USBD_Desc_GetLen+0x1e>
  {
    len++;
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1f5      	bne.n	800f3ac <USBD_Desc_GetLen+0x12>
  }

  return len;
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b088      	sub	sp, #32
 800f3d4:	af02      	add	r7, sp, #8
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  pdev->CurrDevDescSz = 0U;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800f3f2:	4a73      	ldr	r2, [pc, #460]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800f3f8:	4b71      	ldr	r3, [pc, #452]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2212      	movs	r2, #18
 800f3fe:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800f400:	4b6f      	ldr	r3, [pc, #444]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2201      	movs	r2, #1
 800f406:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800f408:	4b6d      	ldr	r3, [pc, #436]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2200      	movs	r2, #0
 800f40e:	709a      	strb	r2, [r3, #2]
 800f410:	2200      	movs	r2, #0
 800f412:	f042 0202 	orr.w	r2, r2, #2
 800f416:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 800f418:	4b69      	ldr	r3, [pc, #420]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2200      	movs	r2, #0
 800f41e:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800f420:	4b67      	ldr	r3, [pc, #412]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2200      	movs	r2, #0
 800f426:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800f428:	4b65      	ldr	r3, [pc, #404]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2200      	movs	r2, #0
 800f42e:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800f430:	4b63      	ldr	r3, [pc, #396]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2240      	movs	r2, #64	; 0x40
 800f436:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 800f438:	4b61      	ldr	r3, [pc, #388]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f062 027c 	orn	r2, r2, #124	; 0x7c
 800f442:	721a      	strb	r2, [r3, #8]
 800f444:	2200      	movs	r2, #0
 800f446:	f042 0204 	orr.w	r2, r2, #4
 800f44a:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 800f44c:	4b5c      	ldr	r3, [pc, #368]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2200      	movs	r2, #0
 800f452:	f042 0210 	orr.w	r2, r2, #16
 800f456:	729a      	strb	r2, [r3, #10]
 800f458:	2200      	movs	r2, #0
 800f45a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800f45e:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 800f460:	4b57      	ldr	r3, [pc, #348]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2200      	movs	r2, #0
 800f466:	731a      	strb	r2, [r3, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	f042 0202 	orr.w	r2, r2, #2
 800f46e:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800f470:	4b53      	ldr	r3, [pc, #332]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2201      	movs	r2, #1
 800f476:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800f478:	4b51      	ldr	r3, [pc, #324]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2202      	movs	r2, #2
 800f47e:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800f480:	4b4f      	ldr	r3, [pc, #316]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2203      	movs	r2, #3
 800f486:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800f488:	4b4d      	ldr	r3, [pc, #308]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2201      	movs	r2, #1
 800f48e:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f496:	f103 0212 	add.w	r2, r3, #18
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 800f4a0:	78fb      	ldrb	r3, [r7, #3]
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d162      	bne.n	800f56c <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	4a44      	ldr	r2, [pc, #272]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4b2:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800f4b4:	4b43      	ldr	r3, [pc, #268]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	220a      	movs	r2, #10
 800f4ba:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800f4bc:	4b41      	ldr	r3, [pc, #260]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2206      	movs	r2, #6
 800f4c2:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800f4c4:	4b3f      	ldr	r3, [pc, #252]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	709a      	strb	r2, [r3, #2]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f042 0202 	orr.w	r2, r2, #2
 800f4d2:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800f4d4:	4b3b      	ldr	r3, [pc, #236]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 800f4dc:	4b39      	ldr	r3, [pc, #228]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800f4e4:	4b37      	ldr	r3, [pc, #220]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800f4ec:	4b35      	ldr	r3, [pc, #212]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2240      	movs	r2, #64	; 0x40
 800f4f2:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800f4f4:	4b33      	ldr	r3, [pc, #204]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 800f4fc:	4b31      	ldr	r3, [pc, #196]	; (800f5c4 <USBD_Device_Framework_Builder+0x1f4>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2200      	movs	r2, #0
 800f502:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f50a:	f103 020a 	add.w	r2, r3, #10
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800f514:	e02a      	b.n	800f56c <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	d823      	bhi.n	800f566 <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800f522:	2b02      	cmp	r3, #2
 800f524:	d81f      	bhi.n	800f566 <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800f526:	7dfb      	ldrb	r3, [r7, #23]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	4413      	add	r3, r2
 800f52c:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d019      	beq.n	800f566 <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 800f532:	7dfb      	ldrb	r3, [r7, #23]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 800f538:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	4413      	add	r3, r2
 800f544:	78fa      	ldrb	r2, [r7, #3]
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	4613      	mov	r3, r2
 800f54a:	2200      	movs	r2, #0
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f000 f83b 	bl	800f5c8 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	1c5a      	adds	r2, r3, #1
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	1c5a      	adds	r2, r3, #1
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 800f566:	7dfb      	ldrb	r3, [r7, #23]
 800f568:	3301      	adds	r3, #1
 800f56a:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800f56c:	7dfb      	ldrb	r3, [r7, #23]
 800f56e:	2b02      	cmp	r3, #2
 800f570:	d9d1      	bls.n	800f516 <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d90c      	bls.n	800f594 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 800f57a:	4b11      	ldr	r3, [pc, #68]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	22ef      	movs	r2, #239	; 0xef
 800f580:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800f582:	4b0f      	ldr	r3, [pc, #60]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2202      	movs	r2, #2
 800f588:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800f58a:	4b0d      	ldr	r3, [pc, #52]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2201      	movs	r2, #1
 800f590:	719a      	strb	r2, [r3, #6]
 800f592:	e00f      	b.n	800f5b4 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	2b02      	cmp	r3, #2
 800f59a:	d10b      	bne.n	800f5b4 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 800f59c:	4b08      	ldr	r3, [pc, #32]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2202      	movs	r2, #2
 800f5a2:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800f5a4:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2202      	movs	r2, #2
 800f5aa:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800f5ac:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <USBD_Device_Framework_Builder+0x1f0>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	20004390 	.word	0x20004390
 800f5c4:	20004394 	.word	0x20004394

0800f5c8 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	4608      	mov	r0, r1
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	70fb      	strb	r3, [r7, #3]
 800f5da:	460b      	mov	r3, r1
 800f5dc:	70bb      	strb	r3, [r7, #2]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	707b      	strb	r3, [r7, #1]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	d834      	bhi.n	800f654 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	215c      	movs	r1, #92	; 0x5c
 800f5f2:	fb01 f303 	mul.w	r3, r1, r3
 800f5f6:	4413      	add	r3, r2
 800f5f8:	3318      	adds	r3, #24
 800f5fa:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d129      	bne.n	800f654 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	6852      	ldr	r2, [r2, #4]
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	205c      	movs	r0, #92	; 0x5c
 800f60c:	fb00 f303 	mul.w	r3, r0, r3
 800f610:	440b      	add	r3, r1
 800f612:	3310      	adds	r3, #16
 800f614:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	215c      	movs	r1, #92	; 0x5c
 800f61e:	fb01 f303 	mul.w	r3, r1, r3
 800f622:	4413      	add	r3, r2
 800f624:	3318      	adds	r3, #24
 800f626:	2201      	movs	r2, #1
 800f628:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	215c      	movs	r1, #92	; 0x5c
 800f632:	fb01 f303 	mul.w	r3, r1, r3
 800f636:	4413      	add	r3, r2
 800f638:	330c      	adds	r3, #12
 800f63a:	78fa      	ldrb	r2, [r7, #3]
 800f63c:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 800f63e:	787b      	ldrb	r3, [r7, #1]
 800f640:	693a      	ldr	r2, [r7, #16]
 800f642:	4619      	mov	r1, r3
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 f80a 	bl	800f65e <USBD_FrameWork_AddToConfDesc>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 800f650:	23ff      	movs	r3, #255	; 0xff
 800f652:	e000      	b.n	800f656 <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b086      	sub	sp, #24
 800f662:	af00      	add	r7, sp, #0
 800f664:	60f8      	str	r0, [r7, #12]
 800f666:	460b      	mov	r3, r1
 800f668:	607a      	str	r2, [r7, #4]
 800f66a:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800f66c:	2300      	movs	r3, #0
 800f66e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	7afa      	ldrb	r2, [r7, #11]
 800f674:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d107      	bne.n	800f68e <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800f686:	4619      	mov	r1, r3
 800f688:	4610      	mov	r0, r2
 800f68a:	f000 f8a1 	bl	800f7d0 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	215c      	movs	r1, #92	; 0x5c
 800f696:	fb01 f303 	mul.w	r3, r1, r3
 800f69a:	4413      	add	r3, r2
 800f69c:	330c      	adds	r3, #12
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	2b02      	cmp	r3, #2
 800f6a2:	d162      	bne.n	800f76a <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f000 f866 	bl	800f776 <USBD_FrameWork_FindFreeIFNbr>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	215c      	movs	r1, #92	; 0x5c
 800f6b6:	fb01 f303 	mul.w	r3, r1, r3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	3320      	adds	r3, #32
 800f6be:	2202      	movs	r2, #2
 800f6c0:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	215c      	movs	r1, #92	; 0x5c
 800f6ca:	fb01 f303 	mul.w	r3, r1, r3
 800f6ce:	4413      	add	r3, r2
 800f6d0:	335a      	adds	r3, #90	; 0x5a
 800f6d2:	7dfa      	ldrb	r2, [r7, #23]
 800f6d4:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	7dfa      	ldrb	r2, [r7, #23]
 800f6dc:	3201      	adds	r2, #1
 800f6de:	b2d0      	uxtb	r0, r2
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	215c      	movs	r1, #92	; 0x5c
 800f6e4:	fb01 f303 	mul.w	r3, r1, r3
 800f6e8:	4413      	add	r3, r2
 800f6ea:	335b      	adds	r3, #91	; 0x5b
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	215c      	movs	r1, #92	; 0x5c
 800f6f8:	fb01 f303 	mul.w	r3, r1, r3
 800f6fc:	4413      	add	r3, r2
 800f6fe:	331c      	adds	r3, #28
 800f700:	2203      	movs	r2, #3
 800f702:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 800f704:	7afb      	ldrb	r3, [r7, #11]
 800f706:	2b01      	cmp	r3, #1
 800f708:	d114      	bne.n	800f734 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800f70a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f70e:	2202      	movs	r2, #2
 800f710:	2102      	movs	r1, #2
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f000 f889 	bl	800f82a <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800f718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f71c:	2202      	movs	r2, #2
 800f71e:	2182      	movs	r1, #130	; 0x82
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f000 f882 	bl	800f82a <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800f726:	2308      	movs	r3, #8
 800f728:	2203      	movs	r2, #3
 800f72a:	2181      	movs	r1, #129	; 0x81
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f000 f87c 	bl	800f82a <USBD_FrameWork_AssignEp>
 800f732:	e011      	b.n	800f758 <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800f734:	2340      	movs	r3, #64	; 0x40
 800f736:	2202      	movs	r2, #2
 800f738:	2102      	movs	r1, #2
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f000 f875 	bl	800f82a <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800f740:	2340      	movs	r3, #64	; 0x40
 800f742:	2202      	movs	r2, #2
 800f744:	2182      	movs	r1, #130	; 0x82
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f000 f86f 	bl	800f82a <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800f74c:	2308      	movs	r3, #8
 800f74e:	2203      	movs	r2, #3
 800f750:	2181      	movs	r1, #129	; 0x81
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f000 f869 	bl	800f82a <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800f758:	6879      	ldr	r1, [r7, #4]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800f760:	461a      	mov	r2, r3
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f000 f8d4 	bl	800f910 <USBD_FrameWork_CDCDesc>

      break;
 800f768:	e000      	b.n	800f76c <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 800f76a:	bf00      	nop
  }

  return UX_SUCCESS;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800f776:	b480      	push	{r7}
 800f778:	b087      	sub	sp, #28
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800f77e:	2300      	movs	r3, #0
 800f780:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800f782:	2300      	movs	r3, #0
 800f784:	613b      	str	r3, [r7, #16]
 800f786:	e016      	b.n	800f7b6 <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800f788:	2300      	movs	r3, #0
 800f78a:	60fb      	str	r3, [r7, #12]
 800f78c:	e005      	b.n	800f79a <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	3301      	adds	r3, #1
 800f792:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	3301      	adds	r3, #1
 800f798:	60fb      	str	r3, [r7, #12]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	215c      	movs	r1, #92	; 0x5c
 800f7a0:	fb01 f303 	mul.w	r3, r1, r3
 800f7a4:	4413      	add	r3, r2
 800f7a6:	3320      	adds	r3, #32
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d3ee      	bcc.n	800f78e <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	613b      	str	r3, [r7, #16]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d3e3      	bcc.n	800f788 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	b2db      	uxtb	r3, r3
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	371c      	adds	r7, #28
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2209      	movs	r2, #9
 800f7e2:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2202      	movs	r2, #2
 800f7e8:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	709a      	strb	r2, [r3, #2]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2200      	movs	r2, #0
 800f804:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	22c0      	movs	r2, #192	; 0xc0
 800f80a:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2219      	movs	r2, #25
 800f810:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f103 0209 	add.w	r2, r3, #9
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	601a      	str	r2, [r3, #0]
}
 800f81e:	bf00      	nop
 800f820:	3714      	adds	r7, #20
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr

0800f82a <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 800f82a:	b490      	push	{r4, r7}
 800f82c:	b086      	sub	sp, #24
 800f82e:	af00      	add	r7, sp, #0
 800f830:	60f8      	str	r0, [r7, #12]
 800f832:	607b      	str	r3, [r7, #4]
 800f834:	460b      	mov	r3, r1
 800f836:	72fb      	strb	r3, [r7, #11]
 800f838:	4613      	mov	r3, r2
 800f83a:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 800f83c:	2300      	movs	r3, #0
 800f83e:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800f840:	e002      	b.n	800f848 <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	3301      	adds	r3, #1
 800f846:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	215c      	movs	r1, #92	; 0x5c
 800f850:	fb01 f303 	mul.w	r3, r1, r3
 800f854:	4413      	add	r3, r2
 800f856:	331c      	adds	r3, #28
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	697a      	ldr	r2, [r7, #20]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d210      	bcs.n	800f882 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6858      	ldr	r0, [r3, #4]
 800f864:	68f9      	ldr	r1, [r7, #12]
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	4613      	mov	r3, r2
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	4413      	add	r3, r2
 800f86e:	005b      	lsls	r3, r3, #1
 800f870:	225c      	movs	r2, #92	; 0x5c
 800f872:	fb00 f202 	mul.w	r2, r0, r2
 800f876:	4413      	add	r3, r2
 800f878:	440b      	add	r3, r1
 800f87a:	3328      	adds	r3, #40	; 0x28
 800f87c:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1df      	bne.n	800f842 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6858      	ldr	r0, [r3, #4]
 800f886:	68f9      	ldr	r1, [r7, #12]
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	4613      	mov	r3, r2
 800f88c:	005b      	lsls	r3, r3, #1
 800f88e:	4413      	add	r3, r2
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	225c      	movs	r2, #92	; 0x5c
 800f894:	fb00 f202 	mul.w	r2, r0, r2
 800f898:	4413      	add	r3, r2
 800f89a:	440b      	add	r3, r1
 800f89c:	3324      	adds	r3, #36	; 0x24
 800f89e:	7afa      	ldrb	r2, [r7, #11]
 800f8a0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6858      	ldr	r0, [r3, #4]
 800f8a6:	68f9      	ldr	r1, [r7, #12]
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	4613      	mov	r3, r2
 800f8ac:	005b      	lsls	r3, r3, #1
 800f8ae:	4413      	add	r3, r2
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	225c      	movs	r2, #92	; 0x5c
 800f8b4:	fb00 f202 	mul.w	r2, r0, r2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	440b      	add	r3, r1
 800f8bc:	3325      	adds	r3, #37	; 0x25
 800f8be:	7aba      	ldrb	r2, [r7, #10]
 800f8c0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6858      	ldr	r0, [r3, #4]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	b29c      	uxth	r4, r3
 800f8ca:	68f9      	ldr	r1, [r7, #12]
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	005b      	lsls	r3, r3, #1
 800f8d2:	4413      	add	r3, r2
 800f8d4:	005b      	lsls	r3, r3, #1
 800f8d6:	225c      	movs	r2, #92	; 0x5c
 800f8d8:	fb00 f202 	mul.w	r2, r0, r2
 800f8dc:	4413      	add	r3, r2
 800f8de:	440b      	add	r3, r1
 800f8e0:	3326      	adds	r3, #38	; 0x26
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6858      	ldr	r0, [r3, #4]
 800f8ea:	68f9      	ldr	r1, [r7, #12]
 800f8ec:	697a      	ldr	r2, [r7, #20]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	005b      	lsls	r3, r3, #1
 800f8f2:	4413      	add	r3, r2
 800f8f4:	005b      	lsls	r3, r3, #1
 800f8f6:	225c      	movs	r2, #92	; 0x5c
 800f8f8:	fb00 f202 	mul.w	r2, r0, r2
 800f8fc:	4413      	add	r3, r2
 800f8fe:	440b      	add	r3, r1
 800f900:	3328      	adds	r3, #40	; 0x28
 800f902:	2201      	movs	r2, #1
 800f904:	701a      	strb	r2, [r3, #0]
}
 800f906:	bf00      	nop
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bc90      	pop	{r4, r7}
 800f90e:	4770      	bx	lr

0800f910 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	4413      	add	r3, r2
 800f924:	461a      	mov	r2, r3
 800f926:	4b99      	ldr	r3, [pc, #612]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f928:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800f92a:	4b98      	ldr	r3, [pc, #608]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2208      	movs	r2, #8
 800f930:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 800f932:	4b96      	ldr	r3, [pc, #600]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	220b      	movs	r2, #11
 800f938:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	685a      	ldr	r2, [r3, #4]
 800f93e:	4b93      	ldr	r3, [pc, #588]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	68f9      	ldr	r1, [r7, #12]
 800f944:	205c      	movs	r0, #92	; 0x5c
 800f946:	fb00 f202 	mul.w	r2, r0, r2
 800f94a:	440a      	add	r2, r1
 800f94c:	325a      	adds	r2, #90	; 0x5a
 800f94e:	7812      	ldrb	r2, [r2, #0]
 800f950:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 800f952:	4b8e      	ldr	r3, [pc, #568]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2202      	movs	r2, #2
 800f958:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 800f95a:	4b8c      	ldr	r3, [pc, #560]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2202      	movs	r2, #2
 800f960:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 800f962:	4b8a      	ldr	r3, [pc, #552]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2202      	movs	r2, #2
 800f968:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 800f96a:	4b88      	ldr	r3, [pc, #544]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2201      	movs	r2, #1
 800f970:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 800f972:	4b86      	ldr	r3, [pc, #536]	; (800fb8c <USBD_FrameWork_CDCDesc+0x27c>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2200      	movs	r2, #0
 800f978:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f103 0208 	add.w	r2, r3, #8
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	4413      	add	r3, r2
 800f98e:	461a      	mov	r2, r3
 800f990:	4b7f      	ldr	r3, [pc, #508]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	4b7e      	ldr	r3, [pc, #504]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2209      	movs	r2, #9
 800f99a:	701a      	strb	r2, [r3, #0]
 800f99c:	4b7c      	ldr	r3, [pc, #496]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2204      	movs	r2, #4
 800f9a2:	705a      	strb	r2, [r3, #1]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	685a      	ldr	r2, [r3, #4]
 800f9a8:	4b79      	ldr	r3, [pc, #484]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	68f9      	ldr	r1, [r7, #12]
 800f9ae:	205c      	movs	r0, #92	; 0x5c
 800f9b0:	fb00 f202 	mul.w	r2, r0, r2
 800f9b4:	440a      	add	r2, r1
 800f9b6:	325a      	adds	r2, #90	; 0x5a
 800f9b8:	7812      	ldrb	r2, [r2, #0]
 800f9ba:	709a      	strb	r2, [r3, #2]
 800f9bc:	4b74      	ldr	r3, [pc, #464]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	70da      	strb	r2, [r3, #3]
 800f9c4:	4b72      	ldr	r3, [pc, #456]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	711a      	strb	r2, [r3, #4]
 800f9cc:	4b70      	ldr	r3, [pc, #448]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	715a      	strb	r2, [r3, #5]
 800f9d4:	4b6e      	ldr	r3, [pc, #440]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2202      	movs	r2, #2
 800f9da:	719a      	strb	r2, [r3, #6]
 800f9dc:	4b6c      	ldr	r3, [pc, #432]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	71da      	strb	r2, [r3, #7]
 800f9e4:	4b6a      	ldr	r3, [pc, #424]	; (800fb90 <USBD_FrameWork_CDCDesc+0x280>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	721a      	strb	r2, [r3, #8]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f103 0209 	add.w	r2, r3, #9
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	4413      	add	r3, r2
 800fa00:	461a      	mov	r2, r3
 800fa02:	4b64      	ldr	r3, [pc, #400]	; (800fb94 <USBD_FrameWork_CDCDesc+0x284>)
 800fa04:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 800fa06:	4b63      	ldr	r3, [pc, #396]	; (800fb94 <USBD_FrameWork_CDCDesc+0x284>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2205      	movs	r2, #5
 800fa0c:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 800fa0e:	4b61      	ldr	r3, [pc, #388]	; (800fb94 <USBD_FrameWork_CDCDesc+0x284>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2224      	movs	r2, #36	; 0x24
 800fa14:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 800fa16:	4b5f      	ldr	r3, [pc, #380]	; (800fb94 <USBD_FrameWork_CDCDesc+0x284>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 800fa1e:	4b5d      	ldr	r3, [pc, #372]	; (800fb94 <USBD_FrameWork_CDCDesc+0x284>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2200      	movs	r2, #0
 800fa24:	f042 0210 	orr.w	r2, r2, #16
 800fa28:	70da      	strb	r2, [r3, #3]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f042 0201 	orr.w	r2, r2, #1
 800fa30:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	1d5a      	adds	r2, r3, #5
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	4413      	add	r3, r2
 800fa44:	461a      	mov	r2, r3
 800fa46:	4b54      	ldr	r3, [pc, #336]	; (800fb98 <USBD_FrameWork_CDCDesc+0x288>)
 800fa48:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 800fa4a:	4b53      	ldr	r3, [pc, #332]	; (800fb98 <USBD_FrameWork_CDCDesc+0x288>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2205      	movs	r2, #5
 800fa50:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 800fa52:	4b51      	ldr	r3, [pc, #324]	; (800fb98 <USBD_FrameWork_CDCDesc+0x288>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2224      	movs	r2, #36	; 0x24
 800fa58:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 800fa5a:	4b4f      	ldr	r3, [pc, #316]	; (800fb98 <USBD_FrameWork_CDCDesc+0x288>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 800fa62:	4b4d      	ldr	r3, [pc, #308]	; (800fb98 <USBD_FrameWork_CDCDesc+0x288>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2200      	movs	r2, #0
 800fa68:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	4b4a      	ldr	r3, [pc, #296]	; (800fb98 <USBD_FrameWork_CDCDesc+0x288>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	68f9      	ldr	r1, [r7, #12]
 800fa74:	205c      	movs	r0, #92	; 0x5c
 800fa76:	fb00 f202 	mul.w	r2, r0, r2
 800fa7a:	440a      	add	r2, r1
 800fa7c:	325b      	adds	r2, #91	; 0x5b
 800fa7e:	7812      	ldrb	r2, [r2, #0]
 800fa80:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	1d5a      	adds	r2, r3, #5
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681a      	ldr	r2, [r3, #0]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	4413      	add	r3, r2
 800fa94:	461a      	mov	r2, r3
 800fa96:	4b41      	ldr	r3, [pc, #260]	; (800fb9c <USBD_FrameWork_CDCDesc+0x28c>)
 800fa98:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 800fa9a:	4b40      	ldr	r3, [pc, #256]	; (800fb9c <USBD_FrameWork_CDCDesc+0x28c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	2204      	movs	r2, #4
 800faa0:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 800faa2:	4b3e      	ldr	r3, [pc, #248]	; (800fb9c <USBD_FrameWork_CDCDesc+0x28c>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2224      	movs	r2, #36	; 0x24
 800faa8:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 800faaa:	4b3c      	ldr	r3, [pc, #240]	; (800fb9c <USBD_FrameWork_CDCDesc+0x28c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2202      	movs	r2, #2
 800fab0:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 800fab2:	4b3a      	ldr	r3, [pc, #232]	; (800fb9c <USBD_FrameWork_CDCDesc+0x28c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2202      	movs	r2, #2
 800fab8:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	1d1a      	adds	r2, r3, #4
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	4413      	add	r3, r2
 800facc:	461a      	mov	r2, r3
 800face:	4b34      	ldr	r3, [pc, #208]	; (800fba0 <USBD_FrameWork_CDCDesc+0x290>)
 800fad0:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 800fad2:	4b33      	ldr	r3, [pc, #204]	; (800fba0 <USBD_FrameWork_CDCDesc+0x290>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2205      	movs	r2, #5
 800fad8:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 800fada:	4b31      	ldr	r3, [pc, #196]	; (800fba0 <USBD_FrameWork_CDCDesc+0x290>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2224      	movs	r2, #36	; 0x24
 800fae0:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 800fae2:	4b2f      	ldr	r3, [pc, #188]	; (800fba0 <USBD_FrameWork_CDCDesc+0x290>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2206      	movs	r2, #6
 800fae8:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	685a      	ldr	r2, [r3, #4]
 800faee:	4b2c      	ldr	r3, [pc, #176]	; (800fba0 <USBD_FrameWork_CDCDesc+0x290>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68f9      	ldr	r1, [r7, #12]
 800faf4:	205c      	movs	r0, #92	; 0x5c
 800faf6:	fb00 f202 	mul.w	r2, r0, r2
 800fafa:	440a      	add	r2, r1
 800fafc:	325a      	adds	r2, #90	; 0x5a
 800fafe:	7812      	ldrb	r2, [r2, #0]
 800fb00:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	4b26      	ldr	r3, [pc, #152]	; (800fba0 <USBD_FrameWork_CDCDesc+0x290>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	205c      	movs	r0, #92	; 0x5c
 800fb0e:	fb00 f202 	mul.w	r2, r0, r2
 800fb12:	440a      	add	r2, r1
 800fb14:	325b      	adds	r2, #91	; 0x5b
 800fb16:	7812      	ldrb	r2, [r2, #0]
 800fb18:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	1d5a      	adds	r2, r3, #5
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	4b1d      	ldr	r3, [pc, #116]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	4b1c      	ldr	r3, [pc, #112]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2207      	movs	r2, #7
 800fb38:	701a      	strb	r2, [r3, #0]
 800fb3a:	4b1a      	ldr	r3, [pc, #104]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2205      	movs	r2, #5
 800fb40:	705a      	strb	r2, [r3, #1]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	4b17      	ldr	r3, [pc, #92]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68f9      	ldr	r1, [r7, #12]
 800fb4c:	205c      	movs	r0, #92	; 0x5c
 800fb4e:	fb00 f202 	mul.w	r2, r0, r2
 800fb52:	440a      	add	r2, r1
 800fb54:	3230      	adds	r2, #48	; 0x30
 800fb56:	7812      	ldrb	r2, [r2, #0]
 800fb58:	709a      	strb	r2, [r3, #2]
 800fb5a:	4b12      	ldr	r3, [pc, #72]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2203      	movs	r2, #3
 800fb60:	70da      	strb	r2, [r3, #3]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	685a      	ldr	r2, [r3, #4]
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68f9      	ldr	r1, [r7, #12]
 800fb6c:	205c      	movs	r0, #92	; 0x5c
 800fb6e:	fb00 f202 	mul.w	r2, r0, r2
 800fb72:	440a      	add	r2, r1
 800fb74:	3232      	adds	r2, #50	; 0x32
 800fb76:	8812      	ldrh	r2, [r2, #0]
 800fb78:	809a      	strh	r2, [r3, #4]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d112      	bne.n	800fba8 <USBD_FrameWork_CDCDesc+0x298>
 800fb82:	4b08      	ldr	r3, [pc, #32]	; (800fba4 <USBD_FrameWork_CDCDesc+0x294>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2205      	movs	r2, #5
 800fb88:	719a      	strb	r2, [r3, #6]
 800fb8a:	e011      	b.n	800fbb0 <USBD_FrameWork_CDCDesc+0x2a0>
 800fb8c:	20004398 	.word	0x20004398
 800fb90:	2000439c 	.word	0x2000439c
 800fb94:	200043a0 	.word	0x200043a0
 800fb98:	200043a4 	.word	0x200043a4
 800fb9c:	200043a8 	.word	0x200043a8
 800fba0:	200043ac 	.word	0x200043ac
 800fba4:	200043b0 	.word	0x200043b0
 800fba8:	4b66      	ldr	r3, [pc, #408]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2205      	movs	r2, #5
 800fbae:	719a      	strb	r2, [r3, #6]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	1dda      	adds	r2, r3, #7
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4b60      	ldr	r3, [pc, #384]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fbc6:	601a      	str	r2, [r3, #0]
 800fbc8:	4b5f      	ldr	r3, [pc, #380]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2209      	movs	r2, #9
 800fbce:	701a      	strb	r2, [r3, #0]
 800fbd0:	4b5d      	ldr	r3, [pc, #372]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2204      	movs	r2, #4
 800fbd6:	705a      	strb	r2, [r3, #1]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	4b5a      	ldr	r3, [pc, #360]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68f9      	ldr	r1, [r7, #12]
 800fbe2:	205c      	movs	r0, #92	; 0x5c
 800fbe4:	fb00 f202 	mul.w	r2, r0, r2
 800fbe8:	440a      	add	r2, r1
 800fbea:	325b      	adds	r2, #91	; 0x5b
 800fbec:	7812      	ldrb	r2, [r2, #0]
 800fbee:	709a      	strb	r2, [r3, #2]
 800fbf0:	4b55      	ldr	r3, [pc, #340]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	70da      	strb	r2, [r3, #3]
 800fbf8:	4b53      	ldr	r3, [pc, #332]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2202      	movs	r2, #2
 800fbfe:	711a      	strb	r2, [r3, #4]
 800fc00:	4b51      	ldr	r3, [pc, #324]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	220a      	movs	r2, #10
 800fc06:	715a      	strb	r2, [r3, #5]
 800fc08:	4b4f      	ldr	r3, [pc, #316]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	719a      	strb	r2, [r3, #6]
 800fc10:	4b4d      	ldr	r3, [pc, #308]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2200      	movs	r2, #0
 800fc16:	71da      	strb	r2, [r3, #7]
 800fc18:	4b4b      	ldr	r3, [pc, #300]	; (800fd48 <USBD_FrameWork_CDCDesc+0x438>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	721a      	strb	r2, [r3, #8]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f103 0209 	add.w	r2, r3, #9
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	4413      	add	r3, r2
 800fc34:	461a      	mov	r2, r3
 800fc36:	4b43      	ldr	r3, [pc, #268]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	4b42      	ldr	r3, [pc, #264]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2207      	movs	r2, #7
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	4b40      	ldr	r3, [pc, #256]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2205      	movs	r2, #5
 800fc48:	705a      	strb	r2, [r3, #1]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	685a      	ldr	r2, [r3, #4]
 800fc4e:	4b3d      	ldr	r3, [pc, #244]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68f9      	ldr	r1, [r7, #12]
 800fc54:	205c      	movs	r0, #92	; 0x5c
 800fc56:	fb00 f202 	mul.w	r2, r0, r2
 800fc5a:	440a      	add	r2, r1
 800fc5c:	3224      	adds	r2, #36	; 0x24
 800fc5e:	7812      	ldrb	r2, [r2, #0]
 800fc60:	709a      	strb	r2, [r3, #2]
 800fc62:	4b38      	ldr	r3, [pc, #224]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2202      	movs	r2, #2
 800fc68:	70da      	strb	r2, [r3, #3]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	685a      	ldr	r2, [r3, #4]
 800fc6e:	4b35      	ldr	r3, [pc, #212]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	68f9      	ldr	r1, [r7, #12]
 800fc74:	205c      	movs	r0, #92	; 0x5c
 800fc76:	fb00 f202 	mul.w	r2, r0, r2
 800fc7a:	440a      	add	r2, r1
 800fc7c:	3226      	adds	r2, #38	; 0x26
 800fc7e:	8812      	ldrh	r2, [r2, #0]
 800fc80:	809a      	strh	r2, [r3, #4]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d104      	bne.n	800fc94 <USBD_FrameWork_CDCDesc+0x384>
 800fc8a:	4b2e      	ldr	r3, [pc, #184]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	719a      	strb	r2, [r3, #6]
 800fc92:	e003      	b.n	800fc9c <USBD_FrameWork_CDCDesc+0x38c>
 800fc94:	4b2b      	ldr	r3, [pc, #172]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	719a      	strb	r2, [r3, #6]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	1dda      	adds	r2, r3, #7
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	4413      	add	r3, r2
 800fcae:	461a      	mov	r2, r3
 800fcb0:	4b24      	ldr	r3, [pc, #144]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	4b23      	ldr	r3, [pc, #140]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2207      	movs	r2, #7
 800fcba:	701a      	strb	r2, [r3, #0]
 800fcbc:	4b21      	ldr	r3, [pc, #132]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2205      	movs	r2, #5
 800fcc2:	705a      	strb	r2, [r3, #1]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	4b1e      	ldr	r3, [pc, #120]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68f9      	ldr	r1, [r7, #12]
 800fcce:	205c      	movs	r0, #92	; 0x5c
 800fcd0:	fb00 f202 	mul.w	r2, r0, r2
 800fcd4:	440a      	add	r2, r1
 800fcd6:	322a      	adds	r2, #42	; 0x2a
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	709a      	strb	r2, [r3, #2]
 800fcdc:	4b19      	ldr	r3, [pc, #100]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2202      	movs	r2, #2
 800fce2:	70da      	strb	r2, [r3, #3]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	4b16      	ldr	r3, [pc, #88]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68f9      	ldr	r1, [r7, #12]
 800fcee:	205c      	movs	r0, #92	; 0x5c
 800fcf0:	fb00 f202 	mul.w	r2, r0, r2
 800fcf4:	440a      	add	r2, r1
 800fcf6:	322c      	adds	r2, #44	; 0x2c
 800fcf8:	8812      	ldrh	r2, [r2, #0]
 800fcfa:	809a      	strh	r2, [r3, #4]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d104      	bne.n	800fd0e <USBD_FrameWork_CDCDesc+0x3fe>
 800fd04:	4b0f      	ldr	r3, [pc, #60]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	719a      	strb	r2, [r3, #6]
 800fd0c:	e003      	b.n	800fd16 <USBD_FrameWork_CDCDesc+0x406>
 800fd0e:	4b0d      	ldr	r3, [pc, #52]	; (800fd44 <USBD_FrameWork_CDCDesc+0x434>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2200      	movs	r2, #0
 800fd14:	719a      	strb	r2, [r3, #6]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	1dda      	adds	r2, r3, #7
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	791a      	ldrb	r2, [r3, #4]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	3202      	adds	r2, #2
 800fd28:	b2d2      	uxtb	r2, r2
 800fd2a:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	b292      	uxth	r2, r2
 800fd34:	805a      	strh	r2, [r3, #2]
}
 800fd36:	bf00      	nop
 800fd38:	3714      	adds	r7, #20
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop
 800fd44:	200043b0 	.word	0x200043b0
 800fd48:	2000439c 	.word	0x2000439c

0800fd4c <memset>:
 800fd4c:	4402      	add	r2, r0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d100      	bne.n	800fd56 <memset+0xa>
 800fd54:	4770      	bx	lr
 800fd56:	f803 1b01 	strb.w	r1, [r3], #1
 800fd5a:	e7f9      	b.n	800fd50 <memset+0x4>

0800fd5c <__libc_init_array>:
 800fd5c:	b570      	push	{r4, r5, r6, lr}
 800fd5e:	4d0d      	ldr	r5, [pc, #52]	; (800fd94 <__libc_init_array+0x38>)
 800fd60:	4c0d      	ldr	r4, [pc, #52]	; (800fd98 <__libc_init_array+0x3c>)
 800fd62:	1b64      	subs	r4, r4, r5
 800fd64:	10a4      	asrs	r4, r4, #2
 800fd66:	2600      	movs	r6, #0
 800fd68:	42a6      	cmp	r6, r4
 800fd6a:	d109      	bne.n	800fd80 <__libc_init_array+0x24>
 800fd6c:	4d0b      	ldr	r5, [pc, #44]	; (800fd9c <__libc_init_array+0x40>)
 800fd6e:	4c0c      	ldr	r4, [pc, #48]	; (800fda0 <__libc_init_array+0x44>)
 800fd70:	f000 f818 	bl	800fda4 <_init>
 800fd74:	1b64      	subs	r4, r4, r5
 800fd76:	10a4      	asrs	r4, r4, #2
 800fd78:	2600      	movs	r6, #0
 800fd7a:	42a6      	cmp	r6, r4
 800fd7c:	d105      	bne.n	800fd8a <__libc_init_array+0x2e>
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd84:	4798      	blx	r3
 800fd86:	3601      	adds	r6, #1
 800fd88:	e7ee      	b.n	800fd68 <__libc_init_array+0xc>
 800fd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd8e:	4798      	blx	r3
 800fd90:	3601      	adds	r6, #1
 800fd92:	e7f2      	b.n	800fd7a <__libc_init_array+0x1e>
 800fd94:	0800ff8c 	.word	0x0800ff8c
 800fd98:	0800ff8c 	.word	0x0800ff8c
 800fd9c:	0800ff8c 	.word	0x0800ff8c
 800fda0:	0800ff90 	.word	0x0800ff90

0800fda4 <_init>:
 800fda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda6:	bf00      	nop
 800fda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdaa:	bc08      	pop	{r3}
 800fdac:	469e      	mov	lr, r3
 800fdae:	4770      	bx	lr

0800fdb0 <_fini>:
 800fdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb2:	bf00      	nop
 800fdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdb6:	bc08      	pop	{r3}
 800fdb8:	469e      	mov	lr, r3
 800fdba:	4770      	bx	lr
